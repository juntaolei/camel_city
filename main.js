// Generated by js_of_ocaml 3.9.1
(function(joo_global_object)
   {"use strict";
     /*<<+array.js 89 0>>*/ function caml_array_fill(array,ofs,len,v)
     { /*<<+array.js 90 2>>*/ for
       ( /*<<+array.js 90 12>>*/ var i=0;i < len;i++)
        /*<<+array.js 90 30>>*/ array[ofs + i + 1] = v;
       /*<<+array.js 93 2>>*/ return 0 /*<<+array.js 94 0>>*/ }
     /*<<+mlBytes.js 73 0>>*/ function caml_subarray_to_jsbytes(a,i,len)
     { /*<<+mlBytes.js 74 2>>*/  /*<<+mlBytes.js 74 8>>*/ var
       f=
        String.fromCharCode;
       /*<<+mlBytes.js 75 2>>*/ if(i == 0 && len <= 4096 && len == a.length)
        /*<<+mlBytes.js 75 48>>*/ return  /*<<+mlBytes.js 75 55>>*/ f.apply
               (null,a);
       /*<<+mlBytes.js 74 2>>*/  /*<<+mlBytes.js 76 8>>*/ var s="";
       /*<<+mlBytes.js 77 2>>*/ for(;0 < len;i += 1024,len -= 1024)
       s
       +=
        /*<<+mlBytes.js 78 9>>*/ f.apply
        (null,
          /*<<+mlBytes.js 78 24>>*/ a.slice
          (i,i +  /*<<+mlBytes.js 78 38>>*/ Math.min(len,1024)));
       /*<<+mlBytes.js 79 2>>*/ return s /*<<+mlBytes.js 80 0>>*/ }
     /*<<+mlBytes.js 453 0>>*/ function caml_convert_bytes_to_array(s)
     { /*<<+mlBytes.js 455 2>>*/ if(joo_global_object.Uint8Array)
        /*<<+mlBytes.js 455 35>>*/  /*<<+mlBytes.js 456 10>>*/ var
        a=
         new (joo_global_object.Uint8Array)(s.l);
      else
        /*<<+mlBytes.js 457 9>>*/  /*<<+mlBytes.js 458 10>>*/ var
        a=
         new Array(s.l);
       /*<<+mlBytes.js 460 2>>*/ var
        /*<<+mlBytes.js 460 8>>*/ b=s.c,
        /*<<+mlBytes.js 460 17>>*/ l=b.length,
        /*<<+mlBytes.js 460 31>>*/ i=0;
       /*<<+mlBytes.js 461 2>>*/ for(;i < l;i++)
       a[i] =  /*<<+mlBytes.js 461 28>>*/ b.charCodeAt(i);
       /*<<+mlBytes.js 462 2>>*/ for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
       /*<<+mlBytes.js 465 2>>*/ return a /*<<+mlBytes.js 466 0>>*/ }
     /*<<+mlBytes.js 611 0>>*/ function caml_blit_bytes(s1,i1,s2,i2,len)
     { /*<<+mlBytes.js 612 2>>*/ if(len == 0)
        /*<<+mlBytes.js 612 16>>*/ return 0;
       /*<<+mlBytes.js 613 2>>*/ if
       (i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
        /*<<+mlBytes.js 614 72>>*/ {s2.c
        =
        s1.t == 4
         ? /*<<+mlBytes.js 616 6>>*/ caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len
           ?s1.c
           : /*<<+mlBytes.js 617 43>>*/ s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
        /*<<+mlBytes.js 619 9>>*/ if(s2.t == 2 && i2 == s2.c.length)
         /*<<+mlBytes.js 619 59>>*/ {s2.c
         +=
         s1.t == 4
          ? /*<<+mlBytes.js 621 6>>*/ caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len
            ?s1.c
            : /*<<+mlBytes.js 622 43>>*/ s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
         /*<<+mlBytes.js 624 9>>*/ { /*<<+mlBytes.js 625 4>>*/ if(s2.t != 4)
           /*<<+mlBytes.js 625 31>>*/ caml_convert_bytes_to_array(s2);
          /*<<+mlBytes.js 626 4>>*/ var
           /*<<+mlBytes.js 626 11>>*/ c1=s1.c,
           /*<<+mlBytes.js 626 22>>*/ c2=s2.c;
          /*<<+mlBytes.js 627 4>>*/ if(s1.t == 4)
           /*<<+mlBytes.js 627 31>>*/ if(i2 <= i1)
            /*<<+mlBytes.js 628 20>>*/ for
            ( /*<<+mlBytes.js 629 19>>*/ var i=0;i < len;i++)
            c2[i2 + i] = c1[i1 + i];
          else
            /*<<+mlBytes.js 630 13>>*/ for
            ( /*<<+mlBytes.js 631 19>>*/ var i=len - 1;i >= 0;i--)
            c2[i2 + i] = c1[i1 + i];
         else
           /*<<+mlBytes.js 633 11>>*/ { /*<<+mlBytes.js 634 6>>*/  /*<<+mlBytes.js 634 12>>*/ var
            l=
              /*<<+mlBytes.js 634 14>>*/ Math.min(len,c1.length - i1);
            /*<<+mlBytes.js 635 6>>*/ for
            ( /*<<+mlBytes.js 635 17>>*/ var i=0;i < l;i++)
            c2[i2 + i] =  /*<<+mlBytes.js 635 48>>*/ c1.charCodeAt(i1 + i);
            /*<<+mlBytes.js 636 6>>*/ for(;i < len;i++)c2[i2 + i] = 0}}
       /*<<+mlBytes.js 639 2>>*/ return 0 /*<<+mlBytes.js 640 0>>*/ }
     /*<<+mlBytes.js 798 0>>*/ function caml_bytes_of_string(s)
     { /*<<+mlBytes.js 798 35>>*/ return s /*<<+mlBytes.js 798 44>>*/ }
     /*<<+mlBytes.js 644 0>>*/ function caml_blit_string(a,b,c,d,e)
     { /*<<+mlBytes.js 645 4>>*/ caml_blit_bytes
       ( /*<<+mlBytes.js 645 20>>*/ caml_bytes_of_string(a),b,c,d,e);
       /*<<+mlBytes.js 646 4>>*/ return 0 /*<<+mlBytes.js 647 0>>*/ }
     /*<<+fail.js 27 0>>*/ function caml_raise_with_arg(tag,arg)
     { /*<<+fail.js 27 42>>*/ throw [0,tag,arg] /*<<+fail.js 27 63>>*/ }
     /*<<+mlBytes.js 50 0>>*/ function caml_str_repeat(n,s)
     { /*<<+mlBytes.js 51 2>>*/ if(n == 0)
        /*<<+mlBytes.js 51 13>>*/ return "";
       /*<<+mlBytes.js 52 2>>*/ if(s.repeat)
        /*<<+mlBytes.js 52 16>>*/ return  /*<<+mlBytes.js 52 24>>*/ s.repeat
               (n);
       /*<<+mlBytes.js 53 2>>*/ var
        /*<<+mlBytes.js 53 8>>*/ r="",
        /*<<+mlBytes.js 53 16>>*/ l=0;
       /*<<+mlBytes.js 54 2>>*/ for(;;)
        /*<<+mlBytes.js 54 10>>*/ { /*<<+mlBytes.js 55 4>>*/ if(n & 1)r += s;
        n >>= 1;
         /*<<+mlBytes.js 57 4>>*/ if(n == 0)
          /*<<+mlBytes.js 57 16>>*/ return r;
        s += s;
        l++;
         /*<<+mlBytes.js 60 4>>*/ if(l == 9)
          /*<<+mlBytes.js 60 16>>*/  /*<<+mlBytes.js 61 6>>*/ s.slice(0,1)} /*<<+mlBytes.js 66 0>>*/ }
     /*<<+mlBytes.js 443 0>>*/ function caml_convert_string_to_bytes(s)
     { /*<<+mlBytes.js 445 2>>*/ if(s.t == 2)
       s.c
       +=
        /*<<+mlBytes.js 446 11>>*/ caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c
       =
        /*<<+mlBytes.js 448 10>>*/ caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0 /*<<+mlBytes.js 450 0>>*/ }
     /*<<+mlBytes.js 165 0>>*/ function jsoo_is_ascii(s)
     { /*<<+mlBytes.js 167 2>>*/ if(s.length < 24)
        /*<<+mlBytes.js 167 21>>*/ { /*<<+mlBytes.js 169 4>>*/ for
         ( /*<<+mlBytes.js 169 15>>*/ var i=0;i < s.length;i++)
          /*<<+mlBytes.js 169 39>>*/ if
          ( /*<<+mlBytes.js 169 43>>*/ s.charCodeAt(i) > 127)
           /*<<+mlBytes.js 169 66>>*/ return false;
         /*<<+mlBytes.js 170 4>>*/ return true}
      else
        /*<<+mlBytes.js 172 4>>*/ return !
               /*<<+mlBytes.js 172 12>>*/ /[^\x00-\x7f]/.test(s) /*<<+mlBytes.js 173 0>>*/ }
     /*<<+mlBytes.js 118 0>>*/ function caml_utf16_of_utf8(s)
     { /*<<+mlBytes.js 119 2>>*/ for
       (var
          /*<<+mlBytes.js 119 13>>*/ b="",
          /*<<+mlBytes.js 119 21>>*/ t="",
         c,
         c1,
         c2,
         v,
          /*<<+mlBytes.js 119 43>>*/ i=0,
          /*<<+mlBytes.js 119 50>>*/ l=s.length;
        i
        <
        l;
        i++)
        /*<<+mlBytes.js 119 74>>*/ {c1
        =
         /*<<+mlBytes.js 120 9>>*/ s.charCodeAt(i);
         /*<<+mlBytes.js 121 4>>*/ if(c1 < 0x80)
          /*<<+mlBytes.js 121 19>>*/ { /*<<+mlBytes.js 122 6>>*/ for
           ( /*<<+mlBytes.js 122 17>>*/ var j=i + 1;
            j
            <
            l
            &&
            (c1 =  /*<<+mlBytes.js 122 43>>*/ s.charCodeAt(j))
            <
            0x80;
            j++)
            /*<<+mlBytes.js 122 72>>*/ ;
           /*<<+mlBytes.js 123 6>>*/ if(j - i > 512)
            /*<<+mlBytes.js 123 23>>*/ { /*<<+mlBytes.js 123 25>>*/ t.substr
             (0,1);
            b += t;
            t = "";
            b +=  /*<<+mlBytes.js 123 62>>*/ s.slice(i,j)}
          else
           t +=  /*<<+mlBytes.js 124 16>>*/ s.slice(i,j);
           /*<<+mlBytes.js 125 6>>*/ if(j == l)
            /*<<+mlBytes.js 125 18>>*/ break;
          i = j}
        v = 1;
         /*<<+mlBytes.js 129 4>>*/ if
         (++i
          <
          l
          &&
          ((c2 =  /*<<+mlBytes.js 129 29>>*/ s.charCodeAt(i)) & - 64)
          ==
          128)
          /*<<+mlBytes.js 129 62>>*/ {c = c2 + (c1 << 6);
           /*<<+mlBytes.js 131 6>>*/ if(c1 < 0xe0)
            /*<<+mlBytes.js 131 21>>*/ {v = c - 0x3080;
             /*<<+mlBytes.js 133 8>>*/ if(v < 0x80)v = 1}
          else
            /*<<+mlBytes.js 134 13>>*/ {v = 2;
             /*<<+mlBytes.js 136 8>>*/ if
             (++i
              <
              l
              &&
              ((c2 =  /*<<+mlBytes.js 136 33>>*/ s.charCodeAt(i)) & - 64)
              ==
              128)
              /*<<+mlBytes.js 136 66>>*/ {c = c2 + (c << 6);
               /*<<+mlBytes.js 138 10>>*/ if(c1 < 0xf0)
                /*<<+mlBytes.js 138 25>>*/ {v = c - 0xe2080;
                 /*<<+mlBytes.js 140 12>>*/ if
                 (v < 0x800 || v >= 0xd7ff && v < 0xe000)
                 v = 2}
              else
                /*<<+mlBytes.js 141 17>>*/ {v = 3;
                 /*<<+mlBytes.js 143 12>>*/ if
                 (++i
                  <
                  l
                  &&
                  ((c2 =  /*<<+mlBytes.js 143 37>>*/ s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                  /*<<+mlBytes.js 144 29>>*/ {v = c2 - 0x3c82080 + (c << 6);
                   /*<<+mlBytes.js 146 14>>*/ if(v < 0x10000 || v > 0x10ffff)
                   v = 3}}}}}
         /*<<+mlBytes.js 152 4>>*/ if(v < 4)
          /*<<+mlBytes.js 152 15>>*/ {i -= v;t += "\ufffd"}
        else
          /*<<+mlBytes.js 155 11>>*/ if(v > 0xffff)
          t
          +=
           /*<<+mlBytes.js 156 11>>*/ String.fromCharCode
           (0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t +=  /*<<+mlBytes.js 158 11>>*/ String.fromCharCode(v);
         /*<<+mlBytes.js 159 4>>*/ if(t.length > 1024)
          /*<<+mlBytes.js 159 25>>*/ { /*<<+mlBytes.js 159 26>>*/ t.substr
           (0,1);
          b += t;
          t = ""}}
       /*<<+mlBytes.js 161 2>>*/ return b + t /*<<+mlBytes.js 162 0>>*/ }
     /*<<+mlBytes.js 412 0>>*/ function MlBytes(tag,contents,length)
     {this.t = tag;
      this.c = contents;
      this.l = length /*<<+mlBytes.js 414 0>>*/ }
    MlBytes.prototype.toString
    =
    function()
     { /*<<+mlBytes.js 416 2>>*/ switch(this.t)
       {case 9: /*<<+mlBytes.js 418 4>>*/ return this.c;
        default: /*<<+mlBytes.js 420 4>>*/ caml_convert_string_to_bytes(this);case 0:
          /*<<+mlBytes.js 422 4>>*/ if
          ( /*<<+mlBytes.js 422 8>>*/ jsoo_is_ascii(this.c))
           /*<<+mlBytes.js 422 31>>*/ {this.t = 9;
            /*<<+mlBytes.js 424 6>>*/ return this.c}
         this.t = 8;
        case 8: /*<<+mlBytes.js 428 4>>*/ return this.c
        } /*<<+mlBytes.js 415 29>>*/ };
    MlBytes.prototype.toUtf16
    =
    function()
     { /*<<+mlBytes.js 432 2>>*/  /*<<+mlBytes.js 432 8>>*/ var
       r=
         /*<<+mlBytes.js 432 10>>*/ this.toString();
       /*<<+mlBytes.js 433 2>>*/ if(this.t == 9)
        /*<<+mlBytes.js 433 18>>*/ return r;
       /*<<+mlBytes.js 434 2>>*/ return  /*<<+mlBytes.js 434 9>>*/ caml_utf16_of_utf8
              (r) /*<<+mlBytes.js 431 28>>*/ };
    MlBytes.prototype.slice
    =
    function()
     { /*<<+mlBytes.js 437 2>>*/  /*<<+mlBytes.js 437 14>>*/ var
       content=
        this.t == 4? /*<<+mlBytes.js 437 30>>*/ this.c.slice():this.c;
       /*<<+mlBytes.js 438 2>>*/ return new MlBytes(this.t,content,this.l) /*<<+mlBytes.js 436 26>>*/ };
     /*<<+mlBytes.js 738 0>>*/ function caml_bytes_of_jsbytes(s)
     { /*<<+mlBytes.js 738 36>>*/ return new MlBytes(0,s,s.length) /*<<+mlBytes.js 738 70>>*/ }
     /*<<+mlBytes.js 803 0>>*/ function caml_string_of_jsbytes(s)
     { /*<<+mlBytes.js 803 37>>*/ return  /*<<+mlBytes.js 803 44>>*/ caml_bytes_of_jsbytes
              (s) /*<<+mlBytes.js 803 70>>*/ }
     /*<<+fail.js 31 0>>*/ function caml_raise_with_string(tag,msg)
     { /*<<+fail.js 32 2>>*/ caml_raise_with_arg
       (tag, /*<<+fail.js 32 28>>*/ caml_string_of_jsbytes(msg)) /*<<+fail.js 33 0>>*/ }
     /*<<+stdlib.js 64 0>>*/  /*<<+stdlib.js 64 21>>*/ var
     caml_global_data=
      [0];
     /*<<+fail.js 44 0>>*/ function caml_invalid_argument(msg)
     { /*<<+fail.js 45 2>>*/ caml_raise_with_string
       (caml_global_data.Invalid_argument,msg) /*<<+fail.js 46 0>>*/ }
     /*<<+mlBytes.js 212 0>>*/ function caml_bytes_bound_error()
     { /*<<+mlBytes.js 213 2>>*/ caml_invalid_argument("index out of bounds") /*<<+mlBytes.js 214 0>>*/ }
     /*<<+mlBytes.js 176 0>>*/ function caml_bytes_unsafe_get(s,i)
     { /*<<+mlBytes.js 177 2>>*/ switch(s.t & 6)
       {default:
          /*<<+mlBytes.js 179 4>>*/ if(i >= s.c.length)
           /*<<+mlBytes.js 179 25>>*/ return 0;case 0:
          /*<<+mlBytes.js 181 4>>*/ return  /*<<+mlBytes.js 181 11>>*/ s.c.charCodeAt
                 (i);
        case 4: /*<<+mlBytes.js 183 4>>*/ return s.c[i]
        } /*<<+mlBytes.js 185 0>>*/ }
     /*<<+mlBytes.js 293 0>>*/ function caml_bytes_get(s,i)
     { /*<<+mlBytes.js 294 2>>*/ if(i >>> 0 >= s.l)
        /*<<+mlBytes.js 294 22>>*/ caml_bytes_bound_error();
       /*<<+mlBytes.js 295 2>>*/ return  /*<<+mlBytes.js 295 9>>*/ caml_bytes_unsafe_get
              (s,i) /*<<+mlBytes.js 296 0>>*/ }
     /*<<+mlBytes.js 189 0>>*/ function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
       /*<<+mlBytes.js 192 2>>*/ if(s.t != 4)
        /*<<+mlBytes.js 192 28>>*/ { /*<<+mlBytes.js 193 4>>*/ if
         (i == s.c.length)
          /*<<+mlBytes.js 193 25>>*/ {s.c
          +=
           /*<<+mlBytes.js 194 13>>*/ String.fromCharCode(c);
           /*<<+mlBytes.js 195 6>>*/ if(i + 1 == s.l)s.t = 0;
           /*<<+mlBytes.js 196 6>>*/ return 0}
         /*<<+mlBytes.js 198 4>>*/ caml_convert_bytes_to_array(s)}
      s.c[i] = c;
       /*<<+mlBytes.js 201 2>>*/ return 0 /*<<+mlBytes.js 202 0>>*/ }
     /*<<+mlBytes.js 395 0>>*/ function caml_bytes_set(s,i,c)
     { /*<<+mlBytes.js 396 2>>*/ if(i >>> 0 >= s.l)
        /*<<+mlBytes.js 396 22>>*/ caml_bytes_bound_error();
       /*<<+mlBytes.js 397 2>>*/ return  /*<<+mlBytes.js 397 9>>*/ caml_bytes_unsafe_set
              (s,i,c) /*<<+mlBytes.js 398 0>>*/ }
     /*<<+stdlib.js 22 0>>*/ function caml_call_gen(f,args)
     { /*<<+stdlib.js 23 2>>*/ if(f.fun)
        /*<<+stdlib.js 24 4>>*/ return  /*<<+stdlib.js 24 11>>*/ caml_call_gen
               (f.fun,args);
       /*<<+stdlib.js 26 2>>*/ if(typeof f !== "function")
        /*<<+stdlib.js 26 30>>*/ return f;
       /*<<+stdlib.js 27 2>>*/  /*<<+stdlib.js 27 8>>*/ var n=f.length | 0;
       /*<<+stdlib.js 28 2>>*/ if(n === 0)
        /*<<+stdlib.js 28 14>>*/ return  /*<<+stdlib.js 28 21>>*/ f.apply
               (null,args);
       /*<<+stdlib.js 27 2>>*/ var
        /*<<+stdlib.js 29 14>>*/ argsLen=args.length | 0,
        /*<<+stdlib.js 30 8>>*/ d=n - argsLen | 0;
       /*<<+stdlib.js 31 2>>*/ if(d == 0)
        /*<<+stdlib.js 32 4>>*/ return  /*<<+stdlib.js 32 11>>*/ f.apply
               (null,args);
      else
        /*<<+stdlib.js 33 7>>*/ if(d < 0)
         /*<<+stdlib.js 33 18>>*/ return  /*<<+stdlib.js 34 11>>*/ caml_call_gen
                ( /*<<+stdlib.js 34 25>>*/ f.apply
                  (null, /*<<+stdlib.js 34 38>>*/ args.slice(0,n)),
                  /*<<+stdlib.js 34 55>>*/ args.slice(n));
       else
         /*<<+stdlib.js 36 7>>*/ return function()
         { /*<<+stdlib.js 38 6>>*/ var
            /*<<+stdlib.js 38 21>>*/ extra_args=
            arguments.length == 0?1:arguments.length,
            /*<<+stdlib.js 39 16>>*/ nargs=new Array(args.length + extra_args);
           /*<<+stdlib.js 40 6>>*/ for
           ( /*<<+stdlib.js 40 16>>*/ var i=0;i < args.length;i++)
           nargs[i] = args[i];
           /*<<+stdlib.js 41 6>>*/ for
           ( /*<<+stdlib.js 41 16>>*/ var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
           /*<<+stdlib.js 42 6>>*/ return  /*<<+stdlib.js 42 13>>*/ caml_call_gen
                  (f,nargs) /*<<+stdlib.js 37 11>>*/ } /*<<+stdlib.js 45 0>>*/ }
     /*<<+fail.js 68 0>>*/ function caml_array_bound_error()
     { /*<<+fail.js 69 2>>*/ caml_invalid_argument("index out of bounds") /*<<+fail.js 70 0>>*/ }
     /*<<+array.js 98 0>>*/ function caml_check_bound(array,index)
     { /*<<+array.js 99 2>>*/ if(index >>> 0 >= array.length - 1)
        /*<<+array.js 99 39>>*/ caml_array_bound_error();
       /*<<+array.js 100 2>>*/ return array /*<<+array.js 101 0>>*/ }
     /*<<+ieee_754.js 184 0>>*/ function caml_classify_float(x)
     { /*<<+ieee_754.js 185 2>>*/ if( /*<<+ieee_754.js 185 6>>*/ isFinite(x))
        /*<<+ieee_754.js 185 20>>*/ { /*<<+ieee_754.js 186 4>>*/ if
         ( /*<<+ieee_754.js 186 8>>*/ Math.abs(x) >= 2.2250738585072014e-308)
          /*<<+ieee_754.js 186 48>>*/ return 0;
         /*<<+ieee_754.js 187 4>>*/ if(x != 0)
          /*<<+ieee_754.js 187 16>>*/ return 1;
         /*<<+ieee_754.js 188 4>>*/ return 2}
       /*<<+ieee_754.js 190 2>>*/ return  /*<<+ieee_754.js 190 9>>*/ isNaN(x)
              ?4
              :3 /*<<+ieee_754.js 191 0>>*/ }
     /*<<+mlBytes.js 808 0>>*/ function caml_jsbytes_of_string(s)
     { /*<<+mlBytes.js 809 2>>*/ if((s.t & 6) != 0)
        /*<<+mlBytes.js 809 34>>*/ caml_convert_string_to_bytes(s);
       /*<<+mlBytes.js 810 2>>*/ return s.c /*<<+mlBytes.js 810 13>>*/ }
     /*<<+ieee_754.js 21 0>>*/  /*<<+ieee_754.js 21 12>>*/ var
     log2_ok=
      Math.log2
      &&
       /*<<+ieee_754.js 21 27>>*/ Math.log2(1.1235582092889474E+307)
      ==
      1020;
     /*<<+ieee_754.js 22 0>>*/ function jsoo_floor_log2(x)
     { /*<<+ieee_754.js 23 2>>*/ if(log2_ok)
        /*<<+ieee_754.js 23 14>>*/ return  /*<<+ieee_754.js 23 21>>*/ Math.floor
               ( /*<<+ieee_754.js 23 32>>*/ Math.log2(x));
       /*<<+ieee_754.js 24 2>>*/  /*<<+ieee_754.js 24 8>>*/ var i=0;
       /*<<+ieee_754.js 25 2>>*/ if(x == 0)
        /*<<+ieee_754.js 25 14>>*/ return - Infinity;
       /*<<+ieee_754.js 26 2>>*/ if(x >= 1)
        /*<<+ieee_754.js 26 11>>*/ while(x >= 2)
         /*<<+ieee_754.js 26 25>>*/ {x /= 2;i++}
      else
        /*<<+ieee_754.js 27 7>>*/ while(x < 1)
         /*<<+ieee_754.js 27 22>>*/ {x *= 2;i--}
       /*<<+ieee_754.js 28 2>>*/ return i /*<<+ieee_754.js 29 0>>*/ }
     /*<<+ieee_754.js 69 0>>*/ function caml_int32_bits_of_float(x)
     { /*<<+ieee_754.js 70 2>>*/  /*<<+ieee_754.js 70 15>>*/ var
       float32a=
        new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
       /*<<+ieee_754.js 70 2>>*/  /*<<+ieee_754.js 72 13>>*/ var
       int32a=
        new (joo_global_object.Int32Array)(float32a.buffer);
       /*<<+ieee_754.js 73 2>>*/ return int32a[0] | 0 /*<<+ieee_754.js 74 0>>*/ }
     /*<<+int64.js 21 0>>*/  /*<<+int64.js 21 22>>*/ var
     caml_int64_offset=
       /*<<+int64.js 21 24>>*/ Math.pow(2,- 24);
     /*<<+fail.js 21 0>>*/ function caml_raise_constant(tag)
     { /*<<+fail.js 21 37>>*/ throw tag /*<<+fail.js 21 48>>*/ }
     /*<<+fail.js 56 0>>*/ function caml_raise_zero_divide()
     { /*<<+fail.js 57 2>>*/ caml_raise_constant
       (caml_global_data.Division_by_zero) /*<<+fail.js 58 0>>*/ }
     /*<<+int64.js 25 0>>*/ function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;
      this.mi = mi & 0xffffff;
      this.hi = hi & 0xffff /*<<+int64.js 29 0>>*/ }
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function()
     { /*<<+int64.js 32 2>>*/ return new MlInt64(this.lo,this.mi,this.hi) /*<<+int64.js 31 25>>*/ };
    MlInt64.prototype.ucompare
    =
    function(x)
     { /*<<+int64.js 36 2>>*/ if(this.hi > x.hi)
        /*<<+int64.js 36 22>>*/ return 1;
       /*<<+int64.js 37 2>>*/ if(this.hi < x.hi)
        /*<<+int64.js 37 22>>*/ return - 1;
       /*<<+int64.js 38 2>>*/ if(this.mi > x.mi)
        /*<<+int64.js 38 22>>*/ return 1;
       /*<<+int64.js 39 2>>*/ if(this.mi < x.mi)
        /*<<+int64.js 39 22>>*/ return - 1;
       /*<<+int64.js 40 2>>*/ if(this.lo > x.lo)
        /*<<+int64.js 40 22>>*/ return 1;
       /*<<+int64.js 41 2>>*/ if(this.lo < x.lo)
        /*<<+int64.js 41 22>>*/ return - 1;
       /*<<+int64.js 42 2>>*/ return 0 /*<<+int64.js 35 29>>*/ };
    MlInt64.prototype.compare
    =
    function(x)
     { /*<<+int64.js 45 2>>*/ var
        /*<<+int64.js 45 9>>*/ hi=this.hi << 16,
        /*<<+int64.js 46 10>>*/ xhi=x.hi << 16;
       /*<<+int64.js 47 2>>*/ if(hi > xhi) /*<<+int64.js 47 16>>*/ return 1;
       /*<<+int64.js 48 2>>*/ if(hi < xhi) /*<<+int64.js 48 16>>*/ return - 1;
       /*<<+int64.js 49 2>>*/ if(this.mi > x.mi)
        /*<<+int64.js 49 22>>*/ return 1;
       /*<<+int64.js 50 2>>*/ if(this.mi < x.mi)
        /*<<+int64.js 50 22>>*/ return - 1;
       /*<<+int64.js 51 2>>*/ if(this.lo > x.lo)
        /*<<+int64.js 51 22>>*/ return 1;
       /*<<+int64.js 52 2>>*/ if(this.lo < x.lo)
        /*<<+int64.js 52 22>>*/ return - 1;
       /*<<+int64.js 53 2>>*/ return 0 /*<<+int64.js 44 28>>*/ };
    MlInt64.prototype.neg
    =
    function()
     { /*<<+int64.js 56 2>>*/ var
        /*<<+int64.js 56 9>>*/ lo=- this.lo,
        /*<<+int64.js 57 9>>*/ mi=- this.mi + (lo >> 24),
        /*<<+int64.js 58 9>>*/ hi=- this.hi + (mi >> 24);
       /*<<+int64.js 59 2>>*/ return new MlInt64(lo,mi,hi) /*<<+int64.js 55 24>>*/ };
    MlInt64.prototype.add
    =
    function(x)
     { /*<<+int64.js 62 2>>*/ var
        /*<<+int64.js 62 9>>*/ lo=this.lo + x.lo,
        /*<<+int64.js 63 9>>*/ mi=this.mi + x.mi + (lo >> 24),
        /*<<+int64.js 64 9>>*/ hi=this.hi + x.hi + (mi >> 24);
       /*<<+int64.js 65 2>>*/ return new MlInt64(lo,mi,hi) /*<<+int64.js 61 24>>*/ };
    MlInt64.prototype.sub
    =
    function(x)
     { /*<<+int64.js 68 2>>*/ var
        /*<<+int64.js 68 9>>*/ lo=this.lo - x.lo,
        /*<<+int64.js 69 9>>*/ mi=this.mi - x.mi + (lo >> 24),
        /*<<+int64.js 70 9>>*/ hi=this.hi - x.hi + (mi >> 24);
       /*<<+int64.js 71 2>>*/ return new MlInt64(lo,mi,hi) /*<<+int64.js 67 24>>*/ };
    MlInt64.prototype.mul
    =
    function(x)
     { /*<<+int64.js 74 2>>*/ var
        /*<<+int64.js 74 9>>*/ lo=this.lo * x.lo,
        /*<<+int64.js 75 9>>*/ mi=
        (lo * caml_int64_offset | 0)
        +
        this.mi
        *
        x.lo
        +
        this.lo
        *
        x.mi,
        /*<<+int64.js 76 9>>*/ hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
       /*<<+int64.js 77 2>>*/ return new MlInt64(lo,mi,hi) /*<<+int64.js 73 24>>*/ };
    MlInt64.prototype.isZero
    =
    function()
     { /*<<+int64.js 80 2>>*/ return (this.lo | this.mi | this.hi) == 0 /*<<+int64.js 79 27>>*/ };
    MlInt64.prototype.isNeg
    =
    function()
     { /*<<+int64.js 83 2>>*/ return this.hi << 16 < 0 /*<<+int64.js 82 26>>*/ };
    MlInt64.prototype.and
    =
    function(x)
     { /*<<+int64.js 86 2>>*/ return new
              MlInt64
              (this.lo & x.lo,this.mi & x.mi,this.hi & x.hi) /*<<+int64.js 85 24>>*/ };
    MlInt64.prototype.or
    =
    function(x)
     { /*<<+int64.js 89 2>>*/ return new
              MlInt64
              (this.lo | x.lo,this.mi | x.mi,this.hi | x.hi) /*<<+int64.js 88 23>>*/ };
    MlInt64.prototype.xor
    =
    function(x)
     { /*<<+int64.js 92 2>>*/ return new
              MlInt64
              (this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi) /*<<+int64.js 91 24>>*/ };
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
       /*<<+int64.js 96 2>>*/ if(s == 0) /*<<+int64.js 96 14>>*/ return this;
       /*<<+int64.js 97 2>>*/ if(s < 24)
        /*<<+int64.js 97 14>>*/ return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
       /*<<+int64.js 102 2>>*/ if(s < 48)
        /*<<+int64.js 103 4>>*/ return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
       /*<<+int64.js 106 2>>*/ return new MlInt64(0,0,this.lo << s - 48) /*<<+int64.js 94 31>>*/ };
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
       /*<<+int64.js 110 2>>*/ if(s == 0)
        /*<<+int64.js 110 14>>*/ return this;
       /*<<+int64.js 111 2>>*/ if(s < 24)
        /*<<+int64.js 112 4>>*/ return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
       /*<<+int64.js 116 2>>*/ if(s < 48)
        /*<<+int64.js 117 4>>*/ return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
       /*<<+int64.js 121 2>>*/ return new MlInt64(this.hi >> s - 48,0,0) /*<<+int64.js 108 41>>*/ };
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
       /*<<+int64.js 125 2>>*/ if(s == 0)
        /*<<+int64.js 125 14>>*/ return this;
       /*<<+int64.js 126 2>>*/  /*<<+int64.js 126 8>>*/ var
       h=
        this.hi << 16 >> 16;
       /*<<+int64.js 127 2>>*/ if(s < 24)
        /*<<+int64.js 128 4>>*/ return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
       /*<<+int64.js 126 2>>*/  /*<<+int64.js 132 11>>*/ var
       sign=
        this.hi << 16 >> 31;
       /*<<+int64.js 133 2>>*/ if(s < 48)
        /*<<+int64.js 134 4>>*/ return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
       /*<<+int64.js 138 2>>*/ return new
              MlInt64
              (this.hi << 16 >> s - 32,sign,sign) /*<<+int64.js 123 32>>*/ };
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff /*<<+int64.js 140 25>>*/ };
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1 /*<<+int64.js 145 25>>*/ };
    MlInt64.prototype.udivmod
    =
    function(x)
     { /*<<+int64.js 151 2>>*/ var
        /*<<+int64.js 151 13>>*/ offset=0,
        /*<<+int64.js 152 14>>*/ modulus= /*<<+int64.js 152 16>>*/ this.copy(),
        /*<<+int64.js 153 14>>*/ divisor= /*<<+int64.js 153 16>>*/ x.copy(),
        /*<<+int64.js 154 15>>*/ quotient=new MlInt64(0,0,0);
       /*<<+int64.js 155 2>>*/ while
       ( /*<<+int64.js 155 9>>*/ modulus.ucompare(divisor) > 0)
        /*<<+int64.js 155 40>>*/ {offset++;
         /*<<+int64.js 157 4>>*/ divisor.lsl1()}
       /*<<+int64.js 159 2>>*/ while(offset >= 0)
        /*<<+int64.js 159 22>>*/ {offset--;
         /*<<+int64.js 161 4>>*/ quotient.lsl1();
         /*<<+int64.js 162 4>>*/ if
         ( /*<<+int64.js 162 8>>*/ modulus.ucompare(divisor) >= 0)
          /*<<+int64.js 162 40>>*/ {quotient.lo++;
          modulus =  /*<<+int64.js 164 16>>*/ modulus.sub(divisor)}
         /*<<+int64.js 166 4>>*/ divisor.lsr1()}
       /*<<+int64.js 168 2>>*/ return {quotient:quotient,modulus:modulus} /*<<+int64.js 150 28>>*/ };
    MlInt64.prototype.div
    =
    function(y)
     { /*<<+int64.js 172 2>>*/  /*<<+int64.js 172 8>>*/ var x=this;
       /*<<+int64.js 173 2>>*/ if( /*<<+int64.js 173 6>>*/ y.isZero())
        /*<<+int64.js 173 18>>*/ caml_raise_zero_divide();
       /*<<+int64.js 172 2>>*/  /*<<+int64.js 174 11>>*/ var sign=x.hi ^ y.hi;
       /*<<+int64.js 175 2>>*/ if(x.hi & 0x8000)
       x =  /*<<+int64.js 175 25>>*/ x.neg();
       /*<<+int64.js 176 2>>*/ if(y.hi & 0x8000)
       y =  /*<<+int64.js 176 25>>*/ y.neg();
       /*<<+int64.js 172 2>>*/  /*<<+int64.js 177 8>>*/ var
       q=
         /*<<+int64.js 177 10>>*/ x.udivmod(y).quotient;
       /*<<+int64.js 178 2>>*/ if(sign & 0x8000)
       q =  /*<<+int64.js 178 25>>*/ q.neg();
       /*<<+int64.js 179 2>>*/ return q /*<<+int64.js 170 24>>*/ };
    MlInt64.prototype.mod
    =
    function(y)
     { /*<<+int64.js 183 2>>*/  /*<<+int64.js 183 8>>*/ var x=this;
       /*<<+int64.js 184 2>>*/ if( /*<<+int64.js 184 6>>*/ y.isZero())
        /*<<+int64.js 184 18>>*/ caml_raise_zero_divide();
       /*<<+int64.js 183 2>>*/  /*<<+int64.js 185 11>>*/ var sign=x.hi;
       /*<<+int64.js 186 2>>*/ if(x.hi & 0x8000)
       x =  /*<<+int64.js 186 25>>*/ x.neg();
       /*<<+int64.js 187 2>>*/ if(y.hi & 0x8000)
       y =  /*<<+int64.js 187 25>>*/ y.neg();
       /*<<+int64.js 183 2>>*/  /*<<+int64.js 188 8>>*/ var
       r=
         /*<<+int64.js 188 10>>*/ x.udivmod(y).modulus;
       /*<<+int64.js 189 2>>*/ if(sign & 0x8000)
       r =  /*<<+int64.js 189 25>>*/ r.neg();
       /*<<+int64.js 190 2>>*/ return r /*<<+int64.js 181 24>>*/ };
    MlInt64.prototype.toInt
    =
    function()
     { /*<<+int64.js 193 2>>*/ return this.lo | this.mi << 24 /*<<+int64.js 192 26>>*/ };
    MlInt64.prototype.toFloat
    =
    function()
     { /*<<+int64.js 196 2>>*/ return (this.hi << 16)
             *
              /*<<+int64.js 196 28>>*/ Math.pow(2,32)
             +
             this.mi
             *
              /*<<+int64.js 196 56>>*/ Math.pow(2,24)
             +
             this.lo /*<<+int64.js 195 28>>*/ };
    MlInt64.prototype.toArray
    =
    function()
     { /*<<+int64.js 199 2>>*/ return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff] /*<<+int64.js 198 28>>*/ };
    MlInt64.prototype.lo32
    =
    function()
     { /*<<+int64.js 209 2>>*/ return this.lo | (this.mi & 0xff) << 24 /*<<+int64.js 208 25>>*/ };
    MlInt64.prototype.hi32
    =
    function()
     { /*<<+int64.js 212 2>>*/ return this.mi >>> 8 & 0xffff | this.hi << 16 /*<<+int64.js 211 25>>*/ };
     /*<<+int64.js 349 0>>*/ function caml_int64_create_lo_mi_hi(lo,mi,hi)
     { /*<<+int64.js 350 2>>*/ return new MlInt64(lo,mi,hi) /*<<+int64.js 351 0>>*/ }
     /*<<+ieee_754.js 33 0>>*/ function caml_int64_bits_of_float(x)
     { /*<<+ieee_754.js 34 2>>*/ if(!  /*<<+ieee_754.js 34 7>>*/ isFinite(x))
        /*<<+ieee_754.js 34 20>>*/ { /*<<+ieee_754.js 35 4>>*/ if
         ( /*<<+ieee_754.js 35 8>>*/ isNaN(x))
          /*<<+ieee_754.js 36 6>>*/ return  /*<<+ieee_754.js 36 13>>*/ caml_int64_create_lo_mi_hi
                 (1,0,0x7ff0);
         /*<<+ieee_754.js 37 4>>*/ return x > 0
                ? /*<<+ieee_754.js 38 13>>*/ caml_int64_create_lo_mi_hi
                  (0,0,0x7ff0)
                : /*<<+ieee_754.js 40 13>>*/ caml_int64_create_lo_mi_hi
                  (0,0,0xfff0)}
       /*<<+ieee_754.js 42 2>>*/  /*<<+ieee_754.js 42 11>>*/ var
       sign=
        x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
       /*<<+ieee_754.js 43 2>>*/ if(sign)x = - x;
       /*<<+ieee_754.js 42 2>>*/  /*<<+ieee_754.js 46 10>>*/ var
       exp=
         /*<<+ieee_754.js 46 12>>*/ jsoo_floor_log2(x) + 1023;
       /*<<+ieee_754.js 47 2>>*/ if(exp <= 0)
        /*<<+ieee_754.js 47 16>>*/ {exp = 0;
        x /=  /*<<+ieee_754.js 49 9>>*/ Math.pow(2,- 1026)}
      else
        /*<<+ieee_754.js 50 9>>*/ {x
        /=
         /*<<+ieee_754.js 51 9>>*/ Math.pow(2,exp - 1027);
         /*<<+ieee_754.js 52 4>>*/ if(x < 16)
          /*<<+ieee_754.js 52 16>>*/ {x *= 2;exp -= 1}
         /*<<+ieee_754.js 54 4>>*/ if(exp == 0)
          /*<<+ieee_754.js 54 18>>*/ x /= 2}
       /*<<+ieee_754.js 42 2>>*/ var
        /*<<+ieee_754.js 57 8>>*/ k= /*<<+ieee_754.js 57 10>>*/ Math.pow(2,24),
        /*<<+ieee_754.js 58 9>>*/ r3=x | 0;
      x = (x - r3) * k;
       /*<<+ieee_754.js 42 2>>*/  /*<<+ieee_754.js 60 9>>*/ var r2=x | 0;
      x = (x - r2) * k;
       /*<<+ieee_754.js 42 2>>*/  /*<<+ieee_754.js 62 9>>*/ var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
       /*<<+ieee_754.js 64 2>>*/ return  /*<<+ieee_754.js 64 9>>*/ caml_int64_create_lo_mi_hi
              (r1,r2,r3) /*<<+ieee_754.js 65 0>>*/ }
     /*<<+int64.js 374 0>>*/ function caml_int64_to_bytes(x)
     { /*<<+int64.js 374 34>>*/ return  /*<<+int64.js 374 41>>*/ x.toArray() /*<<+int64.js 374 53>>*/ }
     /*<<+bigarray.js 606 0>>*/ function caml_ba_serialize(writer,ba,sz)
     { /*<<+bigarray.js 607 2>>*/ writer.write(32,ba.dims.length);
       /*<<+bigarray.js 608 2>>*/ writer.write(32,ba.kind | ba.layout << 8);
       /*<<+bigarray.js 609 2>>*/ if(ba.caml_custom == "_bigarr02")
        /*<<+bigarray.js 610 4>>*/ for
        ( /*<<+bigarray.js 610 14>>*/ var i=0;i < ba.dims.length;i++)
         /*<<+bigarray.js 610 44>>*/ if(ba.dims[i] < 0xffff)
          /*<<+bigarray.js 612 8>>*/ writer.write(16,ba.dims[i]);
        else
          /*<<+bigarray.js 613 11>>*/ { /*<<+bigarray.js 614 8>>*/ writer.write
           (16,0xffff);
           /*<<+bigarray.js 615 8>>*/ writer.write(32,0);
           /*<<+bigarray.js 616 8>>*/ writer.write(32,ba.dims[i])}
      else
        /*<<+bigarray.js 620 4>>*/ for
        ( /*<<+bigarray.js 620 14>>*/ var i=0;i < ba.dims.length;i++)
         /*<<+bigarray.js 620 44>>*/ writer.write(32,ba.dims[i]);
       /*<<+bigarray.js 621 2>>*/ switch(ba.kind)
       {case 2:
        case 3:
        case 12:
          /*<<+bigarray.js 625 4>>*/ for
          ( /*<<+bigarray.js 625 14>>*/ var i=0;i < ba.data.length;i++)
           /*<<+bigarray.js 625 43>>*/  /*<<+bigarray.js 626 6>>*/ writer.write
           (8,ba.data[i]);
          /*<<+bigarray.js 628 4>>*/ break;
        case 4:
        case 5:
          /*<<+bigarray.js 631 4>>*/ for
          ( /*<<+bigarray.js 631 14>>*/ var i=0;i < ba.data.length;i++)
           /*<<+bigarray.js 631 43>>*/  /*<<+bigarray.js 632 6>>*/ writer.write
           (16,ba.data[i]);
          /*<<+bigarray.js 634 4>>*/ break;
        case 6:
          /*<<+bigarray.js 636 4>>*/ for
          ( /*<<+bigarray.js 636 14>>*/ var i=0;i < ba.data.length;i++)
           /*<<+bigarray.js 636 43>>*/  /*<<+bigarray.js 637 6>>*/ writer.write
           (32,ba.data[i]);
          /*<<+bigarray.js 639 4>>*/ break;
        case 8:
        case 9:
          /*<<+bigarray.js 642 4>>*/ writer.write(8,0);
          /*<<+bigarray.js 643 4>>*/ for
          ( /*<<+bigarray.js 643 14>>*/ var i=0;i < ba.data.length;i++)
           /*<<+bigarray.js 643 43>>*/  /*<<+bigarray.js 644 6>>*/ writer.write
           (32,ba.data[i]);
          /*<<+bigarray.js 646 4>>*/ break;
        case 7:
          /*<<+bigarray.js 648 4>>*/ for
          ( /*<<+bigarray.js 648 14>>*/ var i=0;i < ba.data.length / 2;i++)
           /*<<+bigarray.js 648 47>>*/ { /*<<+bigarray.js 649 6>>*/  /*<<+bigarray.js 649 12>>*/ var
            b=
              /*<<+bigarray.js 649 14>>*/ caml_int64_to_bytes
              ( /*<<+bigarray.js 649 34>>*/ ba.get(i));
            /*<<+bigarray.js 650 6>>*/ for
            ( /*<<+bigarray.js 650 17>>*/ var j=0;j < 8;j++)
             /*<<+bigarray.js 650 34>>*/ writer.write(8,b[j])}
          /*<<+bigarray.js 652 4>>*/ break;
        case 1:
          /*<<+bigarray.js 654 4>>*/ for
          ( /*<<+bigarray.js 654 14>>*/ var i=0;i < ba.data.length;i++)
           /*<<+bigarray.js 654 43>>*/ { /*<<+bigarray.js 655 6>>*/  /*<<+bigarray.js 655 12>>*/ var
            b=
              /*<<+bigarray.js 655 14>>*/ caml_int64_to_bytes
              ( /*<<+bigarray.js 655 34>>*/ caml_int64_bits_of_float
                ( /*<<+bigarray.js 655 59>>*/ ba.get(i)));
            /*<<+bigarray.js 656 6>>*/ for
            ( /*<<+bigarray.js 656 17>>*/ var j=0;j < 8;j++)
             /*<<+bigarray.js 656 34>>*/ writer.write(8,b[j])}
          /*<<+bigarray.js 658 4>>*/ break;
        case 0:
          /*<<+bigarray.js 660 4>>*/ for
          ( /*<<+bigarray.js 660 14>>*/ var i=0;i < ba.data.length;i++)
           /*<<+bigarray.js 660 43>>*/ { /*<<+bigarray.js 661 6>>*/  /*<<+bigarray.js 661 12>>*/ var
            b=
              /*<<+bigarray.js 661 14>>*/ caml_int32_bits_of_float
              ( /*<<+bigarray.js 661 39>>*/ ba.get(i));
            /*<<+bigarray.js 662 6>>*/ writer.write(32,b)}
          /*<<+bigarray.js 664 4>>*/ break;
        case 10:
          /*<<+bigarray.js 666 4>>*/ for
          ( /*<<+bigarray.js 666 14>>*/ var i=0;i < ba.data.length / 2;i++)
           /*<<+bigarray.js 666 47>>*/ { /*<<+bigarray.js 667 6>>*/  /*<<+bigarray.js 667 12>>*/ var
            j=
              /*<<+bigarray.js 667 14>>*/ ba.get(i);
            /*<<+bigarray.js 668 6>>*/ writer.write
            (32, /*<<+bigarray.js 668 23>>*/ caml_int32_bits_of_float(j[1]));
            /*<<+bigarray.js 669 6>>*/ writer.write
            (32, /*<<+bigarray.js 669 23>>*/ caml_int32_bits_of_float(j[2]))}
          /*<<+bigarray.js 671 4>>*/ break;
        case 11:
          /*<<+bigarray.js 673 4>>*/ for
          ( /*<<+bigarray.js 673 14>>*/ var i=0;i < ba.data.length / 2;i++)
           /*<<+bigarray.js 673 47>>*/ { /*<<+bigarray.js 674 6>>*/ var
             /*<<+bigarray.js 674 18>>*/ complex=
              /*<<+bigarray.js 674 20>>*/ ba.get(i),
             /*<<+bigarray.js 675 12>>*/ b=
              /*<<+bigarray.js 675 14>>*/ caml_int64_to_bytes
              ( /*<<+bigarray.js 675 34>>*/ caml_int64_bits_of_float
                (complex[1]));
            /*<<+bigarray.js 676 6>>*/ for
            ( /*<<+bigarray.js 676 17>>*/ var j=0;j < 8;j++)
             /*<<+bigarray.js 676 34>>*/ writer.write(8,b[j]);
            /*<<+bigarray.js 674 6>>*/  /*<<+bigarray.js 677 12>>*/ var
            b=
              /*<<+bigarray.js 677 14>>*/ caml_int64_to_bytes
              ( /*<<+bigarray.js 677 34>>*/ caml_int64_bits_of_float
                (complex[2]));
            /*<<+bigarray.js 678 6>>*/ for
            ( /*<<+bigarray.js 678 17>>*/ var j=0;j < 8;j++)
             /*<<+bigarray.js 678 34>>*/ writer.write(8,b[j])}
          /*<<+bigarray.js 680 4>>*/ break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8 /*<<+bigarray.js 684 0>>*/ }
     /*<<+bigarray.js 46 0>>*/ function caml_ba_get_size_per_element(kind)
     { /*<<+bigarray.js 47 2>>*/ switch(kind)
       {case 7:
        case 10:
        case 11: /*<<+bigarray.js 48 28>>*/ return 2;
        default: /*<<+bigarray.js 49 11>>*/ return 1} /*<<+bigarray.js 51 0>>*/ }
     /*<<+bigarray.js 56 0>>*/ function caml_ba_create_buffer(kind,size)
     { /*<<+bigarray.js 57 2>>*/ var
        /*<<+bigarray.js 57 8>>*/ g=joo_global_object,
       view;
       /*<<+bigarray.js 59 2>>*/ switch(kind)
       {case 0:view = g.Float32Array; /*<<+bigarray.js 60 34>>*/ break;
        case 1:view = g.Float64Array; /*<<+bigarray.js 61 34>>*/ break;
        case 2:view = g.Int8Array; /*<<+bigarray.js 62 31>>*/ break;
        case 3:view = g.Uint8Array; /*<<+bigarray.js 63 32>>*/ break;
        case 4:view = g.Int16Array; /*<<+bigarray.js 64 32>>*/ break;
        case 5:view = g.Uint16Array; /*<<+bigarray.js 65 33>>*/ break;
        case 6:view = g.Int32Array; /*<<+bigarray.js 66 32>>*/ break;
        case 7:view = g.Int32Array; /*<<+bigarray.js 67 32>>*/ break;
        case 8:view = g.Int32Array; /*<<+bigarray.js 68 32>>*/ break;
        case 9:view = g.Int32Array; /*<<+bigarray.js 69 32>>*/ break;
        case 10:view = g.Float32Array; /*<<+bigarray.js 70 34>>*/ break;
        case 11:view = g.Float64Array; /*<<+bigarray.js 71 34>>*/ break;
        case 12:view = g.Uint8Array; /*<<+bigarray.js 72 32>>*/ break
        }
       /*<<+bigarray.js 74 2>>*/ if(! view)
        /*<<+bigarray.js 74 13>>*/ caml_invalid_argument
        ("Bigarray.create: unsupported kind");
       /*<<+bigarray.js 57 2>>*/  /*<<+bigarray.js 75 11>>*/ var
       data=
        new
         view
         (size
          *
           /*<<+bigarray.js 75 29>>*/ caml_ba_get_size_per_element(kind));
       /*<<+bigarray.js 76 2>>*/ return data /*<<+bigarray.js 77 0>>*/ }
     /*<<+ieee_754.js 176 0>>*/ function caml_int32_float_of_bits(x)
     { /*<<+ieee_754.js 177 2>>*/  /*<<+ieee_754.js 177 13>>*/ var
       int32a=
        new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
       /*<<+ieee_754.js 177 2>>*/  /*<<+ieee_754.js 179 15>>*/ var
       float32a=
        new (joo_global_object.Float32Array)(int32a.buffer);
       /*<<+ieee_754.js 180 2>>*/ return float32a[0] /*<<+ieee_754.js 181 0>>*/ }
     /*<<+int64.js 368 0>>*/ function caml_int64_of_bytes(a)
     { /*<<+int64.js 369 2>>*/ return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8) /*<<+int64.js 372 0>>*/ }
     /*<<+ieee_754.js 128 0>>*/ function caml_int64_float_of_bits(x)
     { /*<<+ieee_754.js 129 2>>*/ var
        /*<<+ieee_754.js 129 9>>*/ lo=x.lo,
        /*<<+ieee_754.js 130 9>>*/ mi=x.mi,
        /*<<+ieee_754.js 131 9>>*/ hi=x.hi,
        /*<<+ieee_754.js 132 10>>*/ exp=(hi & 0x7fff) >> 4;
       /*<<+ieee_754.js 133 2>>*/ if(exp == 2047)
        /*<<+ieee_754.js 133 19>>*/ return (lo | mi | hi & 0xf) == 0
               ?hi & 0x8000?- Infinity:Infinity
               :NaN;
       /*<<+ieee_754.js 129 2>>*/ var
        /*<<+ieee_754.js 139 8>>*/ k=
         /*<<+ieee_754.js 139 10>>*/ Math.pow(2,- 24),
        /*<<+ieee_754.js 140 10>>*/ res=(lo * k + mi) * k + (hi & 0xf);
       /*<<+ieee_754.js 141 2>>*/ if(exp > 0)
        /*<<+ieee_754.js 141 15>>*/ {res += 16;
        res *=  /*<<+ieee_754.js 143 11>>*/ Math.pow(2,exp - 1027)}
      else
       res *=  /*<<+ieee_754.js 145 11>>*/ Math.pow(2,- 1026);
       /*<<+ieee_754.js 146 2>>*/ if(hi & 0x8000)res = - res;
       /*<<+ieee_754.js 147 2>>*/ return res /*<<+ieee_754.js 148 0>>*/ }
     /*<<+bigarray.js 34 0>>*/ function caml_ba_get_size(dims)
     { /*<<+bigarray.js 35 2>>*/ var
        /*<<+bigarray.js 35 13>>*/ n_dims=dims.length,
        /*<<+bigarray.js 36 11>>*/ size=1;
       /*<<+bigarray.js 37 2>>*/ for
       ( /*<<+bigarray.js 37 13>>*/ var i=0;i < n_dims;i++)
        /*<<+bigarray.js 37 35>>*/ { /*<<+bigarray.js 38 4>>*/ if(dims[i] < 0)
          /*<<+bigarray.js 39 6>>*/ caml_invalid_argument
          ("Bigarray.create: negative dimension");
        size = size * dims[i]}
       /*<<+bigarray.js 42 2>>*/ return size /*<<+bigarray.js 43 0>>*/ }
     /*<<+int64.js 354 0>>*/ function caml_int64_create_lo_hi(lo,hi)
     { /*<<+int64.js 355 2>>*/ return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff) /*<<+int64.js 359 0>>*/ }
     /*<<+int64.js 364 0>>*/ function caml_int64_hi32(v)
     { /*<<+int64.js 364 29>>*/ return  /*<<+int64.js 364 36>>*/ v.hi32() /*<<+int64.js 364 45>>*/ }
     /*<<+int64.js 361 0>>*/ function caml_int64_lo32(v)
     { /*<<+int64.js 361 29>>*/ return  /*<<+int64.js 361 36>>*/ v.lo32() /*<<+int64.js 361 45>>*/ }
     /*<<+bigarray.js 85 0>>*/  /*<<+bigarray.js 85 24>>*/ var
     caml_ba_custom_name=
      "_bigarr02";
     /*<<+bigarray.js 90 0>>*/ function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer /*<<+bigarray.js 96 0>>*/ }
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     { /*<<+bigarray.js 101 2>>*/  /*<<+bigarray.js 101 10>>*/ var ofs=0;
       /*<<+bigarray.js 102 2>>*/ if(typeof arg === "number")arg = [arg];
       /*<<+bigarray.js 103 2>>*/ if(! (arg instanceof Array))
        /*<<+bigarray.js 103 32>>*/ caml_invalid_argument
        ("bigarray.js: invalid offset");
       /*<<+bigarray.js 104 2>>*/ if(this.dims.length != arg.length)
        /*<<+bigarray.js 105 4>>*/ caml_invalid_argument
        ("Bigarray.get/set: bad number of dimensions");
       /*<<+bigarray.js 106 2>>*/ if(this.layout == 0)
        /*<<+bigarray.js 106 38>>*/ for
        ( /*<<+bigarray.js 107 15>>*/ var i=0;i < this.dims.length;i++)
         /*<<+bigarray.js 107 47>>*/ { /*<<+bigarray.js 108 6>>*/ if
          (arg[i] < 0 || arg[i] >= this.dims[i])
           /*<<+bigarray.js 109 8>>*/ caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
        /*<<+bigarray.js 112 9>>*/ for
        ( /*<<+bigarray.js 113 15>>*/ var i=this.dims.length - 1;i >= 0;i--)
         /*<<+bigarray.js 113 52>>*/ { /*<<+bigarray.js 114 6>>*/ if
          (arg[i] < 1 || arg[i] > this.dims[i])
           /*<<+bigarray.js 114 46>>*/  /*<<+bigarray.js 115 8>>*/ caml_array_bound_error
           ();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
       /*<<+bigarray.js 120 2>>*/ return ofs /*<<+bigarray.js 100 31>>*/ };
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     { /*<<+bigarray.js 124 2>>*/ switch(this.kind)
       {case 7:
          /*<<+bigarray.js 127 4>>*/ var
           /*<<+bigarray.js 127 10>>*/ l=this.data[ofs * 2 + 0],
           /*<<+bigarray.js 128 10>>*/ h=this.data[ofs * 2 + 1];
          /*<<+bigarray.js 129 4>>*/ return  /*<<+bigarray.js 129 11>>*/ caml_int64_create_lo_hi
                 (l,h);
        case 10:
        case 11:
          /*<<+bigarray.js 132 4>>*/ var
           /*<<+bigarray.js 132 10>>*/ r=this.data[ofs * 2 + 0],
           /*<<+bigarray.js 133 10>>*/ i=this.data[ofs * 2 + 1];
          /*<<+bigarray.js 134 4>>*/ return [254,r,i];
        default: /*<<+bigarray.js 136 4>>*/ return this.data[ofs]} /*<<+bigarray.js 123 28>>*/ };
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     { /*<<+bigarray.js 141 2>>*/ switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0]
         =
          /*<<+bigarray.js 144 29>>*/ caml_int64_lo32(v);
         this.data[ofs * 2 + 1]
         =
          /*<<+bigarray.js 145 29>>*/ caml_int64_hi32(v);
          /*<<+bigarray.js 146 4>>*/ break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];
         this.data[ofs * 2 + 1] = v[2];
          /*<<+bigarray.js 151 4>>*/ break;
        default:this.data[ofs] = v; /*<<+bigarray.js 154 4>>*/ break}
       /*<<+bigarray.js 156 2>>*/ return 0 /*<<+bigarray.js 140 28>>*/ };
    Ml_Bigarray.prototype.fill
    =
    function(v)
     { /*<<+bigarray.js 161 2>>*/ switch(this.kind)
       {case 7:
          /*<<+bigarray.js 164 4>>*/ var
           /*<<+bigarray.js 164 10>>*/ a=
            /*<<+bigarray.js 164 12>>*/ caml_int64_lo32(v),
           /*<<+bigarray.js 165 10>>*/ b=
            /*<<+bigarray.js 165 12>>*/ caml_int64_hi32(v);
          /*<<+bigarray.js 166 4>>*/ if(a == b)
           /*<<+bigarray.js 166 14>>*/  /*<<+bigarray.js 167 6>>*/ this.data.fill
           (a);
         else
           /*<<+bigarray.js 169 9>>*/ for
           ( /*<<+bigarray.js 170 16>>*/ var i=0;i < this.data.length;i++)
            /*<<+bigarray.js 170 45>>*/ this.data[i] = i % 2 == 0?a:b;
          /*<<+bigarray.js 174 4>>*/ break;
        case 10:
        case 11:
          /*<<+bigarray.js 177 4>>*/ var
           /*<<+bigarray.js 177 11>>*/ im=v[1],
           /*<<+bigarray.js 178 11>>*/ re=v[2];
          /*<<+bigarray.js 179 4>>*/ if(im == re)
           /*<<+bigarray.js 179 16>>*/  /*<<+bigarray.js 180 6>>*/ this.data.fill
           (im);
         else
           /*<<+bigarray.js 182 9>>*/ for
           ( /*<<+bigarray.js 183 16>>*/ var i=0;i < this.data.length;i++)
            /*<<+bigarray.js 183 45>>*/ this.data[i] = i % 2 == 0?im:re;
          /*<<+bigarray.js 187 4>>*/ break;
        default:
          /*<<+bigarray.js 189 4>>*/ this.data.fill(v);
          /*<<+bigarray.js 190 4>>*/ break} /*<<+bigarray.js 160 29>>*/ };
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     { /*<<+bigarray.js 196 2>>*/ if
       (this.layout != b.layout || this.kind != b.kind)
        /*<<+bigarray.js 196 54>>*/ { /*<<+bigarray.js 197 4>>*/ var
          /*<<+bigarray.js 197 11>>*/ k1=this.kind | this.layout << 8,
          /*<<+bigarray.js 198 11>>*/ k2=b.kind | b.layout << 8;
         /*<<+bigarray.js 199 4>>*/ return k2 - k1}
       /*<<+bigarray.js 201 2>>*/ if(this.dims.length != b.dims.length)
        /*<<+bigarray.js 201 41>>*/ return b.dims.length - this.dims.length;
       /*<<+bigarray.js 204 2>>*/ for
       ( /*<<+bigarray.js 204 13>>*/ var i=0;i < this.dims.length;i++)
        /*<<+bigarray.js 205 4>>*/ if(this.dims[i] != b.dims[i])
         /*<<+bigarray.js 206 6>>*/ return this.dims[i] < b.dims[i]?- 1:1;
       /*<<+bigarray.js 207 2>>*/ switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
          /*<<+bigarray.js 213 4>>*/ var x,y;
          /*<<+bigarray.js 214 4>>*/ for
          ( /*<<+bigarray.js 214 15>>*/ var i=0;i < this.data.length;i++)
           /*<<+bigarray.js 214 47>>*/ {x = this.data[i];
           y = b.data[i];
            /*<<+bigarray.js 217 6>>*/ if(x < y)
             /*<<+bigarray.js 218 8>>*/ return - 1;
            /*<<+bigarray.js 219 6>>*/ if(x > y)
             /*<<+bigarray.js 220 8>>*/ return 1;
            /*<<+bigarray.js 221 6>>*/ if(x != y)
             /*<<+bigarray.js 221 18>>*/ { /*<<+bigarray.js 222 8>>*/ if
              (! total)
               /*<<+bigarray.js 222 20>>*/ return NaN;
              /*<<+bigarray.js 223 8>>*/ if(x == x)
               /*<<+bigarray.js 223 20>>*/ return 1;
              /*<<+bigarray.js 224 8>>*/ if(y == y)
               /*<<+bigarray.js 224 20>>*/ return - 1}}
          /*<<+bigarray.js 227 4>>*/ break;
        case 7:
          /*<<+bigarray.js 230 4>>*/ for
          ( /*<<+bigarray.js 230 15>>*/ var i=0;i < this.data.length;i += 2)
           /*<<+bigarray.js 230 48>>*/ { /*<<+bigarray.js 232 6>>*/ if
            (this.data[i + 1] < b.data[i + 1])
             /*<<+bigarray.js 233 8>>*/ return - 1;
            /*<<+bigarray.js 234 6>>*/ if(this.data[i + 1] > b.data[i + 1])
             /*<<+bigarray.js 235 8>>*/ return 1;
            /*<<+bigarray.js 236 6>>*/ if
            (this.data[i] >>> 0 < b.data[i] >>> 0)
             /*<<+bigarray.js 237 8>>*/ return - 1;
            /*<<+bigarray.js 238 6>>*/ if
            (this.data[i] >>> 0 > b.data[i] >>> 0)
             /*<<+bigarray.js 239 8>>*/ return 1}
          /*<<+bigarray.js 241 4>>*/ break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
          /*<<+bigarray.js 250 4>>*/ for
          ( /*<<+bigarray.js 250 15>>*/ var i=0;i < this.data.length;i++)
           /*<<+bigarray.js 250 47>>*/ { /*<<+bigarray.js 251 6>>*/ if
            (this.data[i] < b.data[i])
             /*<<+bigarray.js 252 8>>*/ return - 1;
            /*<<+bigarray.js 253 6>>*/ if(this.data[i] > b.data[i])
             /*<<+bigarray.js 254 8>>*/ return 1}
          /*<<+bigarray.js 256 4>>*/ break
        }
       /*<<+bigarray.js 258 2>>*/ return 0 /*<<+bigarray.js 195 32>>*/ };
     /*<<+bigarray.js 263 0>>*/ function Ml_Bigarray_c_1_1
     (kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer /*<<+bigarray.js 268 0>>*/ }
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     { /*<<+bigarray.js 272 2>>*/ if(typeof arg !== "number")
        /*<<+bigarray.js 272 29>>*/ if
        (arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
         /*<<+bigarray.js 275 9>>*/ caml_invalid_argument
         ("Ml_Bigarray_c_1_1.offset");
       /*<<+bigarray.js 277 2>>*/ if(arg < 0 || arg >= this.dims[0])
        /*<<+bigarray.js 278 4>>*/ caml_array_bound_error();
       /*<<+bigarray.js 279 2>>*/ return arg /*<<+bigarray.js 271 37>>*/ };
    Ml_Bigarray_c_1_1.prototype.get
    =
    function(ofs)
     { /*<<+bigarray.js 283 2>>*/ return this.data[ofs] /*<<+bigarray.js 282 34>>*/ };
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v)
     {this.data[ofs] = v;
       /*<<+bigarray.js 288 2>>*/ return 0 /*<<+bigarray.js 286 34>>*/ };
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v)
     { /*<<+bigarray.js 292 2>>*/ this.data.fill(v);
       /*<<+bigarray.js 293 2>>*/ return 0 /*<<+bigarray.js 291 35>>*/ };
     /*<<+bigarray.js 304 0>>*/ function caml_ba_create_unsafe
     (kind,layout,dims,data)
     { /*<<+bigarray.js 305 2>>*/  /*<<+bigarray.js 305 23>>*/ var
       size_per_element=
         /*<<+bigarray.js 305 25>>*/ caml_ba_get_size_per_element(kind);
       /*<<+bigarray.js 306 2>>*/ if
       ( /*<<+bigarray.js 306 5>>*/ caml_ba_get_size(dims)
        *
        size_per_element
        !=
        data.length)
        /*<<+bigarray.js 306 63>>*/  /*<<+bigarray.js 307 4>>*/ caml_invalid_argument
        ("length doesn't match dims");
       /*<<+bigarray.js 309 2>>*/ if
       (layout == 0 && dims.length == 1 && size_per_element == 1)
        /*<<+bigarray.js 312 4>>*/ return new
               Ml_Bigarray_c_1_1
               (kind,layout,dims,data);
       /*<<+bigarray.js 313 2>>*/ return new
              Ml_Bigarray
              (kind,layout,dims,data) /*<<+bigarray.js 315 0>>*/ }
     /*<<+fail.js 37 0>>*/ function caml_failwith(msg)
     { /*<<+fail.js 38 2>>*/ caml_raise_with_string
       (caml_global_data.Failure,msg) /*<<+fail.js 39 0>>*/ }
     /*<<+bigarray.js 692 0>>*/ function caml_ba_deserialize(reader,sz,name)
     { /*<<+bigarray.js 693 2>>*/  /*<<+bigarray.js 693 15>>*/ var
       num_dims=
         /*<<+bigarray.js 693 17>>*/ reader.read32s();
       /*<<+bigarray.js 694 2>>*/ if(num_dims < 0 || num_dims > 16)
        /*<<+bigarray.js 695 4>>*/ caml_failwith
        ("input_value: wrong number of bigarray dimensions");
       /*<<+bigarray.js 693 2>>*/ var
        /*<<+bigarray.js 696 10>>*/ tag=
         /*<<+bigarray.js 696 12>>*/ reader.read32s(),
        /*<<+bigarray.js 697 11>>*/ kind=tag & 0xff,
        /*<<+bigarray.js 698 13>>*/ layout=tag >> 8 & 1,
        /*<<+bigarray.js 699 11>>*/ dims=[];
       /*<<+bigarray.js 700 2>>*/ if(name == "_bigarr02")
        /*<<+bigarray.js 701 4>>*/ for
        ( /*<<+bigarray.js 701 15>>*/ var i=0;i < num_dims;i++)
         /*<<+bigarray.js 701 39>>*/ { /*<<+bigarray.js 702 6>>*/  /*<<+bigarray.js 702 19>>*/ var
          size_dim=
            /*<<+bigarray.js 702 21>>*/ reader.read16u();
          /*<<+bigarray.js 703 6>>*/ if(size_dim == 0xffff)
           /*<<+bigarray.js 703 28>>*/ { /*<<+bigarray.js 704 8>>*/ var
             /*<<+bigarray.js 704 24>>*/ size_dim_hi=
              /*<<+bigarray.js 704 26>>*/ reader.read32u(),
             /*<<+bigarray.js 705 24>>*/ size_dim_lo=
              /*<<+bigarray.js 705 26>>*/ reader.read32u();
            /*<<+bigarray.js 706 8>>*/ if(size_dim_hi != 0)
             /*<<+bigarray.js 707 10>>*/ caml_failwith
             ("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
          /*<<+bigarray.js 710 6>>*/ dims.push(size_dim)}
      else
        /*<<+bigarray.js 713 4>>*/ for
        ( /*<<+bigarray.js 713 15>>*/ var i=0;i < num_dims;i++)
         /*<<+bigarray.js 713 39>>*/ dims.push
         ( /*<<+bigarray.js 713 49>>*/ reader.read32u());
       /*<<+bigarray.js 693 2>>*/ var
        /*<<+bigarray.js 714 11>>*/ size=
         /*<<+bigarray.js 714 13>>*/ caml_ba_get_size(dims),
        /*<<+bigarray.js 715 11>>*/ data=
         /*<<+bigarray.js 715 13>>*/ caml_ba_create_buffer(kind,size),
        /*<<+bigarray.js 716 9>>*/ ba=
         /*<<+bigarray.js 716 11>>*/ caml_ba_create_unsafe
         (kind,layout,dims,data);
       /*<<+bigarray.js 717 2>>*/ switch(kind)
       {case 2:
          /*<<+bigarray.js 719 4>>*/ for
          ( /*<<+bigarray.js 719 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 719 33>>*/ data[i]
          =
           /*<<+bigarray.js 720 16>>*/ reader.read8s();
          /*<<+bigarray.js 722 4>>*/ break;
        case 3:
        case 12:
          /*<<+bigarray.js 725 4>>*/ for
          ( /*<<+bigarray.js 725 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 725 33>>*/ data[i]
          =
           /*<<+bigarray.js 726 16>>*/ reader.read8u();
          /*<<+bigarray.js 728 4>>*/ break;
        case 4:
          /*<<+bigarray.js 730 4>>*/ for
          ( /*<<+bigarray.js 730 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 730 33>>*/ data[i]
          =
           /*<<+bigarray.js 731 16>>*/ reader.read16s();
          /*<<+bigarray.js 733 4>>*/ break;
        case 5:
          /*<<+bigarray.js 735 4>>*/ for
          ( /*<<+bigarray.js 735 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 735 33>>*/ data[i]
          =
           /*<<+bigarray.js 736 16>>*/ reader.read16u();
          /*<<+bigarray.js 738 4>>*/ break;
        case 6:
          /*<<+bigarray.js 740 4>>*/ for
          ( /*<<+bigarray.js 740 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 740 33>>*/ data[i]
          =
           /*<<+bigarray.js 741 16>>*/ reader.read32s();
          /*<<+bigarray.js 743 4>>*/ break;
        case 8:
        case 9:
          /*<<+bigarray.js 746 4>>*/  /*<<+bigarray.js 746 14>>*/ var
          sixty=
            /*<<+bigarray.js 746 16>>*/ reader.read8u();
          /*<<+bigarray.js 747 4>>*/ if(sixty)
           /*<<+bigarray.js 747 14>>*/ caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
          /*<<+bigarray.js 748 4>>*/ for
          ( /*<<+bigarray.js 748 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 748 33>>*/ data[i]
          =
           /*<<+bigarray.js 749 16>>*/ reader.read32s();
          /*<<+bigarray.js 751 4>>*/ break;
        case 7:
          /*<<+bigarray.js 753 4>>*/  /*<<+bigarray.js 753 10>>*/ var
          t=
           new Array(8);
          /*<<+bigarray.js 754 4>>*/ for
          ( /*<<+bigarray.js 754 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 754 33>>*/ { /*<<+bigarray.js 755 6>>*/ for
            ( /*<<+bigarray.js 755 17>>*/ var j=0;j < 8;j++)
            t[j] =  /*<<+bigarray.js 755 39>>*/ reader.read8u();
            /*<<+bigarray.js 756 6>>*/  /*<<+bigarray.js 756 16>>*/ var
            int64=
              /*<<+bigarray.js 756 18>>*/ caml_int64_of_bytes(t);
            /*<<+bigarray.js 757 6>>*/ ba.set(i,int64)}
          /*<<+bigarray.js 759 4>>*/ break;
        case 1:
          /*<<+bigarray.js 761 4>>*/  /*<<+bigarray.js 761 10>>*/ var
          t=
           new Array(8);
          /*<<+bigarray.js 762 4>>*/ for
          ( /*<<+bigarray.js 762 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 762 33>>*/ { /*<<+bigarray.js 763 6>>*/ for
            ( /*<<+bigarray.js 763 17>>*/ var j=0;j < 8;j++)
            t[j] =  /*<<+bigarray.js 763 39>>*/ reader.read8u();
            /*<<+bigarray.js 764 6>>*/  /*<<+bigarray.js 764 12>>*/ var
            f=
              /*<<+bigarray.js 764 14>>*/ caml_int64_float_of_bits
              ( /*<<+bigarray.js 764 39>>*/ caml_int64_of_bytes(t));
            /*<<+bigarray.js 765 6>>*/ ba.set(i,f)}
          /*<<+bigarray.js 767 4>>*/ break;
        case 0:
          /*<<+bigarray.js 769 4>>*/ for
          ( /*<<+bigarray.js 769 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 769 33>>*/ { /*<<+bigarray.js 770 6>>*/  /*<<+bigarray.js 770 12>>*/ var
            f=
              /*<<+bigarray.js 770 14>>*/ caml_int32_float_of_bits
              ( /*<<+bigarray.js 770 39>>*/ reader.read32s());
            /*<<+bigarray.js 771 6>>*/ ba.set(i,f)}
          /*<<+bigarray.js 773 4>>*/ break;
        case 10:
          /*<<+bigarray.js 775 4>>*/ for
          ( /*<<+bigarray.js 775 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 775 33>>*/ { /*<<+bigarray.js 776 6>>*/ var
             /*<<+bigarray.js 776 13>>*/ re=
              /*<<+bigarray.js 776 15>>*/ caml_int32_float_of_bits
              ( /*<<+bigarray.js 776 40>>*/ reader.read32s()),
             /*<<+bigarray.js 777 13>>*/ im=
              /*<<+bigarray.js 777 15>>*/ caml_int32_float_of_bits
              ( /*<<+bigarray.js 777 40>>*/ reader.read32s());
            /*<<+bigarray.js 778 6>>*/ ba.set(i,[254,re,im])}
          /*<<+bigarray.js 780 4>>*/ break;
        case 11:
          /*<<+bigarray.js 782 4>>*/  /*<<+bigarray.js 782 10>>*/ var
          t=
           new Array(8);
          /*<<+bigarray.js 783 4>>*/ for
          ( /*<<+bigarray.js 783 14>>*/ var i=0;i < size;i++)
           /*<<+bigarray.js 783 33>>*/ { /*<<+bigarray.js 784 6>>*/ for
            ( /*<<+bigarray.js 784 17>>*/ var j=0;j < 8;j++)
            t[j] =  /*<<+bigarray.js 784 39>>*/ reader.read8u();
            /*<<+bigarray.js 785 6>>*/  /*<<+bigarray.js 785 13>>*/ var
            re=
              /*<<+bigarray.js 785 15>>*/ caml_int64_float_of_bits
              ( /*<<+bigarray.js 785 40>>*/ caml_int64_of_bytes(t));
            /*<<+bigarray.js 786 6>>*/ for
            ( /*<<+bigarray.js 786 17>>*/ var j=0;j < 8;j++)
            t[j] =  /*<<+bigarray.js 786 39>>*/ reader.read8u();
            /*<<+bigarray.js 785 6>>*/  /*<<+bigarray.js 787 13>>*/ var
            im=
              /*<<+bigarray.js 787 15>>*/ caml_int64_float_of_bits
              ( /*<<+bigarray.js 787 40>>*/ caml_int64_of_bytes(t));
            /*<<+bigarray.js 788 6>>*/ ba.set(i,[254,re,im])}
          /*<<+bigarray.js 790 4>>*/ break
        }
      sz[0] = (4 + num_dims) * 4;
       /*<<+bigarray.js 793 2>>*/ return  /*<<+bigarray.js 793 9>>*/ caml_ba_create_unsafe
              (kind,layout,dims,data) /*<<+bigarray.js 794 0>>*/ }
     /*<<+bigarray.js 297 0>>*/ function caml_ba_compare(a,b,total)
     { /*<<+bigarray.js 298 2>>*/ return  /*<<+bigarray.js 298 9>>*/ a.compare
              (b,total) /*<<+bigarray.js 299 0>>*/ }
     /*<<+ints.js 94 0>>*/ function caml_mul(a,b)
     { /*<<+ints.js 95 2>>*/ return  /*<<+ints.js 95 9>>*/ Math.imul(a,b) /*<<+ints.js 96 0>>*/ }
     /*<<+hash.js 88 0>>*/ function caml_hash_mix_int(h,d)
     {d =  /*<<+hash.js 89 6>>*/ caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d =  /*<<+hash.js 91 6>>*/ caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
       /*<<+hash.js 94 2>>*/ return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0 /*<<+hash.js 95 0>>*/ }
     /*<<+hash.js 116 0>>*/ function caml_hash_mix_int64(h,v)
     {h
      =
       /*<<+hash.js 117 6>>*/ caml_hash_mix_int
       (h, /*<<+hash.js 117 27>>*/ caml_int64_lo32(v));
      h
      =
       /*<<+hash.js 118 6>>*/ caml_hash_mix_int
       (h, /*<<+hash.js 118 27>>*/ caml_int64_hi32(v));
       /*<<+hash.js 119 2>>*/ return h /*<<+hash.js 120 0>>*/ }
     /*<<+hash.js 110 0>>*/ function caml_hash_mix_float(h,v0)
     { /*<<+hash.js 111 2>>*/ return  /*<<+hash.js 111 9>>*/ caml_hash_mix_int64
              (h, /*<<+hash.js 111 32>>*/ caml_int64_bits_of_float(v0)) /*<<+hash.js 112 0>>*/ }
     /*<<+bigarray.js 808 0>>*/ function caml_ba_hash(ba)
     { /*<<+bigarray.js 809 2>>*/ var
        /*<<+bigarray.js 809 15>>*/ num_elts=
         /*<<+bigarray.js 809 17>>*/ caml_ba_get_size(ba.dims),
        /*<<+bigarray.js 810 8>>*/ h=0;
       /*<<+bigarray.js 811 2>>*/ switch(ba.kind)
       {case 2:
        case 3:
        case 12:
          /*<<+bigarray.js 815 4>>*/ if(num_elts > 256)num_elts = 256;
          /*<<+bigarray.js 816 4>>*/ var
           /*<<+bigarray.js 816 10>>*/ w=0,
           /*<<+bigarray.js 816 17>>*/ i=0;
          /*<<+bigarray.js 817 4>>*/ for(i = 0;i + 4 <= ba.data.length;i += 4)
           /*<<+bigarray.js 817 45>>*/ {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h =  /*<<+bigarray.js 819 10>>*/ caml_hash_mix_int(h,w)}
         w = 0;
          /*<<+bigarray.js 822 4>>*/ switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:
            w |= ba.data[i + 0];
            h =  /*<<+bigarray.js 826 10>>*/ caml_hash_mix_int(h,w)
           }
          /*<<+bigarray.js 828 4>>*/ break;
        case 4:
        case 5:
          /*<<+bigarray.js 831 4>>*/ if(num_elts > 128)num_elts = 128;
          /*<<+bigarray.js 832 4>>*/ var
           /*<<+bigarray.js 832 10>>*/ w=0,
           /*<<+bigarray.js 832 17>>*/ i=0;
          /*<<+bigarray.js 833 4>>*/ for(i = 0;i + 2 <= ba.data.length;i += 2)
           /*<<+bigarray.js 833 45>>*/ {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           16;
           h =  /*<<+bigarray.js 835 10>>*/ caml_hash_mix_int(h,w)}
          /*<<+bigarray.js 837 4>>*/ if((num_elts & 1) != 0)
          h =  /*<<+bigarray.js 838 10>>*/ caml_hash_mix_int(h,ba.data[i]);
          /*<<+bigarray.js 839 4>>*/ break;
        case 6:
          /*<<+bigarray.js 841 4>>*/ if(num_elts > 64)num_elts = 64;
          /*<<+bigarray.js 842 4>>*/ for
          ( /*<<+bigarray.js 842 15>>*/ var i=0;i < num_elts;i++)
          h =  /*<<+bigarray.js 842 43>>*/ caml_hash_mix_int(h,ba.data[i]);
          /*<<+bigarray.js 843 4>>*/ break;
        case 8:
        case 9:
          /*<<+bigarray.js 846 4>>*/ if(num_elts > 64)num_elts = 64;
          /*<<+bigarray.js 847 4>>*/ for
          ( /*<<+bigarray.js 847 15>>*/ var i=0;i < num_elts;i++)
          h =  /*<<+bigarray.js 847 43>>*/ caml_hash_mix_int(h,ba.data[i]);
          /*<<+bigarray.js 848 4>>*/ break;
        case 7:
          /*<<+bigarray.js 850 4>>*/ if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
          /*<<+bigarray.js 852 4>>*/ for
          ( /*<<+bigarray.js 852 15>>*/ var i=0;i < num_elts;i++)
           /*<<+bigarray.js 852 39>>*/ h
          =
           /*<<+bigarray.js 853 10>>*/ caml_hash_mix_int(h,ba.data[i]);
          /*<<+bigarray.js 855 4>>*/ break;
        case 10:num_elts *= 2;
        case 0:
          /*<<+bigarray.js 859 4>>*/ if(num_elts > 64)num_elts = 64;
          /*<<+bigarray.js 860 4>>*/ for
          ( /*<<+bigarray.js 860 15>>*/ var i=0;i < num_elts;i++)
          h =  /*<<+bigarray.js 860 43>>*/ caml_hash_mix_float(h,ba.data[i]);
          /*<<+bigarray.js 861 4>>*/ break;
        case 11:num_elts *= 2;
        case 1:
          /*<<+bigarray.js 865 4>>*/ if(num_elts > 32)num_elts = 32;
          /*<<+bigarray.js 866 4>>*/ for
          ( /*<<+bigarray.js 866 15>>*/ var i=0;i < num_elts;i++)
          h =  /*<<+bigarray.js 866 43>>*/ caml_hash_mix_float(h,ba.data[i]);
          /*<<+bigarray.js 867 4>>*/ break
        }
       /*<<+bigarray.js 869 2>>*/ return h /*<<+bigarray.js 870 0>>*/ }
     /*<<+marshal.js 164 0>>*/ function caml_int32_unmarshal(reader,size)
     {size[0] = 4;
       /*<<+marshal.js 166 2>>*/ return  /*<<+marshal.js 166 9>>*/ reader.read32s
              () /*<<+marshal.js 167 0>>*/ }
     /*<<+marshal.js 171 0>>*/ function caml_nativeint_unmarshal(reader,size)
     { /*<<+marshal.js 172 2>>*/ switch
       ( /*<<+marshal.js 172 10>>*/ reader.read8u())
       {case 1:
         size[0] = 4;
          /*<<+marshal.js 175 4>>*/ return  /*<<+marshal.js 175 11>>*/ reader.read32s
                 ();
        case 2:
          /*<<+marshal.js 177 4>>*/ caml_failwith
          ("input_value: native integer value too large");
        default:
          /*<<+marshal.js 178 11>>*/ caml_failwith
          ("input_value: ill-formed native integer")} /*<<+marshal.js 180 0>>*/ }
     /*<<+marshal.js 148 0>>*/ function caml_int64_unmarshal(reader,size)
     { /*<<+marshal.js 149 2>>*/  /*<<+marshal.js 149 8>>*/ var
       t=
        new Array(8);
       /*<<+marshal.js 150 2>>*/ for
       ( /*<<+marshal.js 150 13>>*/ var j=0;j < 8;j++)
       t[j] =  /*<<+marshal.js 150 35>>*/ reader.read8u();
      size[0] = 8;
       /*<<+marshal.js 152 2>>*/ return  /*<<+marshal.js 152 9>>*/ caml_int64_of_bytes
              (t) /*<<+marshal.js 153 0>>*/ }
     /*<<+marshal.js 157 0>>*/ function caml_int64_marshal(writer,v,sizes)
     { /*<<+marshal.js 158 2>>*/  /*<<+marshal.js 158 8>>*/ var
       b=
         /*<<+marshal.js 158 10>>*/ caml_int64_to_bytes(v);
       /*<<+marshal.js 159 2>>*/ for
       ( /*<<+marshal.js 159 13>>*/ var i=0;i < 8;i++)
        /*<<+marshal.js 159 30>>*/ writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8 /*<<+marshal.js 161 0>>*/ }
     /*<<+int64.js 219 0>>*/ function caml_int64_compare(x,y,total)
     { /*<<+int64.js 219 42>>*/ return  /*<<+int64.js 219 49>>*/ x.compare(y) /*<<+int64.js 219 62>>*/ }
     /*<<+int64.js 377 0>>*/ function caml_int64_hash(v)
     { /*<<+int64.js 378 2>>*/ return  /*<<+int64.js 378 10>>*/ v.lo32()
             ^
              /*<<+int64.js 378 23>>*/ v.hi32() /*<<+int64.js 379 0>>*/ }
     /*<<+marshal.js 186 0>>*/  /*<<+marshal.js 186 20>>*/ var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz)
         { /*<<+marshal.js 203 45>>*/ return  /*<<+marshal.js 203 52>>*/ caml_ba_deserialize
                  (reader,sz,"_bigarray") /*<<+marshal.js 203 22>>*/ },
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz)
         { /*<<+marshal.js 209 45>>*/ return  /*<<+marshal.js 209 52>>*/ caml_ba_deserialize
                  (reader,sz,"_bigarr02") /*<<+marshal.js 209 22>>*/ },
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
     /*<<+compare.js 43 0>>*/ function caml_compare_val_get_custom(a)
     { /*<<+compare.js 44 2>>*/ return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare /*<<+compare.js 45 0>>*/ }
     /*<<+compare.js 49 0>>*/ function caml_compare_val_number_custom
     (num,custom,swap,total)
     { /*<<+compare.js 50 2>>*/  /*<<+compare.js 50 11>>*/ var
       comp=
         /*<<+compare.js 50 13>>*/ caml_compare_val_get_custom(custom);
       /*<<+compare.js 51 2>>*/ if(comp)
        /*<<+compare.js 51 11>>*/ { /*<<+compare.js 52 4>>*/  /*<<+compare.js 52 10>>*/ var
         x=
          swap > 0
           ? /*<<+compare.js 52 23>>*/ comp(custom,num,total)
           : /*<<+compare.js 52 46>>*/ comp(num,custom,total);
         /*<<+compare.js 53 4>>*/ if(total && x != x)
          /*<<+compare.js 53 24>>*/ return swap;
         /*<<+compare.js 54 4>>*/ if(+ x != + x)
          /*<<+compare.js 54 17>>*/ return + x;
         /*<<+compare.js 55 4>>*/ if((x | 0) != 0)
          /*<<+compare.js 55 21>>*/ return x | 0}
       /*<<+compare.js 57 2>>*/ return swap /*<<+compare.js 58 0>>*/ }
     /*<<+mlBytes.js 827 0>>*/ function caml_is_ml_bytes(s)
     { /*<<+mlBytes.js 828 2>>*/ return s instanceof MlBytes /*<<+mlBytes.js 829 0>>*/ }
     /*<<+mlBytes.js 841 0>>*/ function caml_is_ml_string(s)
     { /*<<+mlBytes.js 842 2>>*/ return  /*<<+mlBytes.js 842 9>>*/ caml_is_ml_bytes
              (s) /*<<+mlBytes.js 843 0>>*/ }
     /*<<+compare.js 20 0>>*/ function caml_compare_val_tag(a)
     { /*<<+compare.js 21 2>>*/ if(typeof a === "number")
        /*<<+compare.js 21 29>>*/ return 1000;
      else
        /*<<+compare.js 22 7>>*/ if
        ( /*<<+compare.js 22 11>>*/ caml_is_ml_bytes(a))
         /*<<+compare.js 22 32>>*/ return 252;
       else
         /*<<+compare.js 23 7>>*/ if
         ( /*<<+compare.js 23 11>>*/ caml_is_ml_string(a))
          /*<<+compare.js 23 33>>*/ return 1252;
        else
          /*<<+compare.js 24 7>>*/ if
          (a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
           /*<<+compare.js 24 69>>*/ { /*<<+compare.js 26 4>>*/  /*<<+compare.js 26 12>>*/ var
            tag=
             a[0] | 0;
            /*<<+compare.js 29 4>>*/ return tag == 254?0:tag}
         else
           /*<<+compare.js 31 7>>*/ if(a instanceof String)
            /*<<+compare.js 31 32>>*/ return 12520;
          else
            /*<<+compare.js 32 7>>*/ if(typeof a == "string")
             /*<<+compare.js 32 33>>*/ return 12520;
           else
             /*<<+compare.js 33 7>>*/ if(a instanceof Number)
              /*<<+compare.js 33 32>>*/ return 1000;
            else
              /*<<+compare.js 34 7>>*/ if(a && a.caml_custom)
               /*<<+compare.js 34 31>>*/ return 1255;
             else
               /*<<+compare.js 35 7>>*/ if(a && a.compare)
                /*<<+compare.js 35 27>>*/ return 1256;
              else
                /*<<+compare.js 36 7>>*/ if(typeof a == "function")
                 /*<<+compare.js 36 35>>*/ return 1247;
               else
                 /*<<+compare.js 37 7>>*/ if(typeof a == "symbol")
                  /*<<+compare.js 37 33>>*/ return 1251;
       /*<<+compare.js 38 2>>*/ return 1001 /*<<+compare.js 39 0>>*/ }
     /*<<+compare.js 236 0>>*/ function caml_int_compare(a,b)
     { /*<<+compare.js 237 2>>*/ if(a < b)
        /*<<+compare.js 237 13>>*/ return - 1;
       /*<<+compare.js 237 26>>*/ if(a == b)
        /*<<+compare.js 237 38>>*/ return 0;
       /*<<+compare.js 237 48>>*/ return 1 /*<<+compare.js 238 0>>*/ }
     /*<<+mlBytes.js 522 0>>*/ function caml_bytes_compare(s1,s2)
     {s1.t
      &
      6
      &&
       /*<<+mlBytes.js 523 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<+mlBytes.js 524 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<+mlBytes.js 525 2>>*/ return s1.c < s2.c?- 1:s1.c > s2.c?1:0 /*<<+mlBytes.js 526 0>>*/ }
     /*<<+mlBytes.js 767 0>>*/ function caml_string_compare(s1,s2)
     { /*<<+mlBytes.js 768 2>>*/ return  /*<<+mlBytes.js 768 9>>*/ caml_bytes_compare
              (s1,s2) /*<<+mlBytes.js 769 0>>*/ }
     /*<<+compare.js 65 0>>*/ function caml_compare_val(a,b,total)
     { /*<<+compare.js 66 2>>*/  /*<<+compare.js 66 12>>*/ var stack=[];
       /*<<+compare.js 67 2>>*/ for(;;)
        /*<<+compare.js 67 10>>*/ { /*<<+compare.js 68 4>>*/ if
         (! (total && a === b))
          /*<<+compare.js 68 29>>*/ { /*<<+compare.js 69 6>>*/  /*<<+compare.js 69 16>>*/ var
           tag_a=
             /*<<+compare.js 69 18>>*/ caml_compare_val_tag(a);
           /*<<+compare.js 71 6>>*/ if(tag_a == 250)
            /*<<+compare.js 71 23>>*/ {a = a[1];
             /*<<+compare.js 71 35>>*/ continue}
           /*<<+compare.js 69 6>>*/  /*<<+compare.js 73 16>>*/ var
           tag_b=
             /*<<+compare.js 73 18>>*/ caml_compare_val_tag(b);
           /*<<+compare.js 75 6>>*/ if(tag_b == 250)
            /*<<+compare.js 75 23>>*/ {b = b[1];
             /*<<+compare.js 75 35>>*/ continue}
           /*<<+compare.js 78 6>>*/ if(tag_a !== tag_b)
            /*<<+compare.js 78 26>>*/ { /*<<+compare.js 79 8>>*/ if
             (tag_a == 1000)
              /*<<+compare.js 79 26>>*/ { /*<<+compare.js 80 10>>*/ if
               (tag_b == 1255)
                /*<<+compare.js 80 28>>*/ return  /*<<+compare.js 81 19>>*/ caml_compare_val_number_custom
                       (a,b,- 1,total);
               /*<<+compare.js 83 10>>*/ return - 1}
             /*<<+compare.js 85 8>>*/ if(tag_b == 1000)
              /*<<+compare.js 85 26>>*/ { /*<<+compare.js 86 10>>*/ if
               (tag_a == 1255)
                /*<<+compare.js 86 28>>*/ return  /*<<+compare.js 87 19>>*/ caml_compare_val_number_custom
                       (b,a,1,total);
               /*<<+compare.js 89 10>>*/ return 1}
             /*<<+compare.js 91 8>>*/ return tag_a < tag_b?- 1:1}
           /*<<+compare.js 93 6>>*/ switch(tag_a)
           {case 247:
              /*<<+compare.js 97 8>>*/ caml_invalid_argument
              ("compare: functional value");
              /*<<+compare.js 98 8>>*/ break;
            case 248:
              /*<<+compare.js 100 8>>*/  /*<<+compare.js 100 14>>*/ var
              x=
                /*<<+compare.js 100 16>>*/ caml_int_compare(a[2],b[2]);
              /*<<+compare.js 101 8>>*/ if(x != 0)
               /*<<+compare.js 101 20>>*/ return x | 0;
              /*<<+compare.js 102 8>>*/ break;
            case 249:
              /*<<+compare.js 105 8>>*/ caml_invalid_argument
              ("compare: functional value");
              /*<<+compare.js 106 8>>*/ break;
            case 250:
              /*<<+compare.js 109 8>>*/ caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
              /*<<+compare.js 110 8>>*/ break;
            case 251:
              /*<<+compare.js 112 8>>*/ caml_invalid_argument
              ("equal: abstract value");
              /*<<+compare.js 113 8>>*/ break;
            case 252:
              /*<<+compare.js 115 8>>*/ if(a !== b)
               /*<<+compare.js 115 21>>*/ { /*<<+compare.js 116 10>>*/  /*<<+compare.js 116 16>>*/ var
                x=
                  /*<<+compare.js 116 18>>*/ caml_bytes_compare(a,b);
                /*<<+compare.js 117 10>>*/ if(x != 0)
                 /*<<+compare.js 117 22>>*/ return x | 0}
              /*<<+compare.js 119 8>>*/ break;
            case 253:
              /*<<+compare.js 122 8>>*/ caml_invalid_argument
              ("equal: got Double_tag, should not happen");
              /*<<+compare.js 123 8>>*/ break;
            case 254:
              /*<<+compare.js 126 8>>*/ caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
              /*<<+compare.js 127 8>>*/ break;
            case 255:
              /*<<+compare.js 129 8>>*/ caml_invalid_argument
              ("equal: got Custom_tag, should not happen");
              /*<<+compare.js 130 8>>*/ break;
            case 1247:
              /*<<+compare.js 132 8>>*/ caml_invalid_argument
              ("compare: functional value");
              /*<<+compare.js 133 8>>*/ break;
            case 1255:
              /*<<+compare.js 135 8>>*/  /*<<+compare.js 135 17>>*/ var
              comp=
                /*<<+compare.js 135 19>>*/ caml_compare_val_get_custom(a);
              /*<<+compare.js 136 8>>*/ if
              (comp
               !=
                /*<<+compare.js 136 19>>*/ caml_compare_val_get_custom(b))
               /*<<+compare.js 136 50>>*/ return a.caml_custom < b.caml_custom
                      ?- 1
                      :1;
              /*<<+compare.js 139 8>>*/ if(! comp)
               /*<<+compare.js 140 10>>*/ caml_invalid_argument
               ("compare: abstract value");
              /*<<+compare.js 135 8>>*/  /*<<+compare.js 141 14>>*/ var
              x=
                /*<<+compare.js 141 16>>*/ comp(a,b,total);
              /*<<+compare.js 142 8>>*/ if(x != x)
               /*<<+compare.js 142 18>>*/ return total?- 1:x;
              /*<<+compare.js 145 8>>*/ if(x !== (x | 0))
               /*<<+compare.js 145 23>>*/ return - 1;
              /*<<+compare.js 148 8>>*/ if(x != 0)
               /*<<+compare.js 148 20>>*/ return x | 0;
              /*<<+compare.js 149 8>>*/ break;
            case 1256:
              /*<<+compare.js 151 8>>*/  /*<<+compare.js 151 14>>*/ var
              x=
                /*<<+compare.js 151 16>>*/ a.compare(b,total);
              /*<<+compare.js 152 8>>*/ if(x != x)
               /*<<+compare.js 152 19>>*/ return total?- 1:x;
              /*<<+compare.js 155 8>>*/ if(x !== (x | 0))
               /*<<+compare.js 155 23>>*/ return - 1;
              /*<<+compare.js 158 8>>*/ if(x != 0)
               /*<<+compare.js 158 20>>*/ return x | 0;
              /*<<+compare.js 159 8>>*/ break;
            case 1000:
             a = + a;
             b = + b;
              /*<<+compare.js 163 8>>*/ if(a < b)
               /*<<+compare.js 163 19>>*/ return - 1;
              /*<<+compare.js 164 8>>*/ if(a > b)
               /*<<+compare.js 164 19>>*/ return 1;
              /*<<+compare.js 165 8>>*/ if(a != b)
               /*<<+compare.js 165 20>>*/ { /*<<+compare.js 166 10>>*/ if
                (! total)
                 /*<<+compare.js 166 22>>*/ return NaN;
                /*<<+compare.js 167 10>>*/ if(a == a)
                 /*<<+compare.js 167 22>>*/ return 1;
                /*<<+compare.js 168 10>>*/ if(b == b)
                 /*<<+compare.js 168 22>>*/ return - 1}
              /*<<+compare.js 170 8>>*/ break;
            case 1001:
              /*<<+compare.js 185 8>>*/ if(a < b)
               /*<<+compare.js 185 19>>*/ return - 1;
              /*<<+compare.js 186 8>>*/ if(a > b)
               /*<<+compare.js 186 19>>*/ return 1;
              /*<<+compare.js 187 8>>*/ if(a != b)
               /*<<+compare.js 187 20>>*/ { /*<<+compare.js 188 10>>*/ if
                (! total)
                 /*<<+compare.js 188 22>>*/ return NaN;
                /*<<+compare.js 189 10>>*/ if(a == a)
                 /*<<+compare.js 189 22>>*/ return 1;
                /*<<+compare.js 190 10>>*/ if(b == b)
                 /*<<+compare.js 190 22>>*/ return - 1}
              /*<<+compare.js 192 8>>*/ break;
            case 1251:
              /*<<+compare.js 194 8>>*/ if(a !== b)
               /*<<+compare.js 194 20>>*/ { /*<<+compare.js 195 10>>*/ if
                (! total)
                 /*<<+compare.js 195 22>>*/ return NaN;
                /*<<+compare.js 196 10>>*/ return 1}
              /*<<+compare.js 198 8>>*/ break;
            case 1252:
              /*<<+compare.js 200 8>>*/ var
               /*<<+compare.js 200 14>>*/ a=
                /*<<+compare.js 200 16>>*/ caml_jsbytes_of_string(a),
               /*<<+compare.js 201 14>>*/ b=
                /*<<+compare.js 201 16>>*/ caml_jsbytes_of_string(b);
              /*<<+compare.js 202 8>>*/ if(a !== b)
               /*<<+compare.js 202 20>>*/ { /*<<+compare.js 203 10>>*/ if
                (a < b)
                 /*<<+compare.js 203 20>>*/ return - 1;
                /*<<+compare.js 204 10>>*/ if(a > b)
                 /*<<+compare.js 204 20>>*/ return 1}
              /*<<+compare.js 206 8>>*/ break;
            case 12520:
              /*<<+compare.js 208 8>>*/ var
               /*<<+compare.js 208 14>>*/ a=
                /*<<+compare.js 208 16>>*/ a.toString(),
               /*<<+compare.js 209 14>>*/ b=
                /*<<+compare.js 209 16>>*/ b.toString();
              /*<<+compare.js 210 8>>*/ if(a !== b)
               /*<<+compare.js 210 20>>*/ { /*<<+compare.js 211 10>>*/ if
                (a < b)
                 /*<<+compare.js 211 20>>*/ return - 1;
                /*<<+compare.js 212 10>>*/ if(a > b)
                 /*<<+compare.js 212 20>>*/ return 1}
              /*<<+compare.js 214 8>>*/ break;
            case 246:
            case 254:
            default:
              /*<<+compare.js 218 8>>*/ if(a.length != b.length)
               /*<<+compare.js 218 34>>*/ return a.length < b.length?- 1:1;
              /*<<+compare.js 219 8>>*/ if(a.length > 1)
               /*<<+compare.js 219 26>>*/ stack.push(a,b,1);
              /*<<+compare.js 220 8>>*/ break}}
         /*<<+compare.js 223 4>>*/ if(stack.length == 0)
          /*<<+compare.js 223 27>>*/ return 0;
         /*<<+compare.js 224 4>>*/  /*<<+compare.js 224 10>>*/ var
         i=
           /*<<+compare.js 224 12>>*/ stack.pop();
        b =  /*<<+compare.js 225 8>>*/ stack.pop();
        a =  /*<<+compare.js 226 8>>*/ stack.pop();
         /*<<+compare.js 227 4>>*/ if(i + 1 < a.length)
          /*<<+compare.js 227 26>>*/ stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]} /*<<+compare.js 231 0>>*/ }
     /*<<+compare.js 234 0>>*/ function caml_compare(a,b)
     { /*<<+compare.js 234 31>>*/ return  /*<<+compare.js 234 38>>*/ caml_compare_val
              (a,b,true) /*<<+compare.js 234 69>>*/ }
     /*<<+mlBytes.js 503 0>>*/ function caml_create_bytes(len)
     { /*<<+mlBytes.js 504 2>>*/ if(len < 0)
        /*<<+mlBytes.js 504 15>>*/ caml_invalid_argument("Bytes.create");
       /*<<+mlBytes.js 505 2>>*/ return new MlBytes(len?2:9,"",len) /*<<+mlBytes.js 506 0>>*/ }
     /*<<+mlBytes.js 814 0>>*/ function caml_jsstring_of_string(s)
     { /*<<+mlBytes.js 815 2>>*/ return  /*<<+mlBytes.js 815 9>>*/ s.toUtf16() /*<<+mlBytes.js 816 0>>*/ }
     /*<<+fs.js 23 0>>*/ if
     (joo_global_object.process && joo_global_object.process.cwd)
      /*<<+fs.js 24 2>>*/  /*<<+fs.js 24 23>>*/ var
      caml_current_dir=
        /*<<+fs.js 24 25>>*/  /*<<+fs.js 24 25>>*/ joo_global_object.process.cwd
         ().replace
        (/\\/g,"/");
    else
      /*<<+fs.js 26 2>>*/  /*<<+fs.js 26 23>>*/ var
      caml_current_dir=
       "/static";
     /*<<+fs.js 27 0>>*/ if
     ( /*<<+fs.js 27 3>>*/ caml_current_dir.slice(- 1) !== "/")
     caml_current_dir += "/";
     /*<<+fs.js 40 0>>*/ function caml_make_path(name)
     {name =  /*<<+fs.js 41 7>>*/ caml_jsstring_of_string(name);
       /*<<+fs.js 42 2>>*/ if( /*<<+fs.js 42 5>>*/ name.charCodeAt(0) != 47)
       name = caml_current_dir + name;
       /*<<+fs.js 44 2>>*/ var
        /*<<+fs.js 44 11>>*/ comp= /*<<+fs.js 44 13>>*/ name.split("/"),
        /*<<+fs.js 45 12>>*/ ncomp=[];
       /*<<+fs.js 46 2>>*/ for
       ( /*<<+fs.js 46 12>>*/ var i=0;i < comp.length;i++)
        /*<<+fs.js 46 36>>*/ switch(comp[i])
        {case "..":
           /*<<+fs.js 48 15>>*/ if(ncomp.length > 1)
            /*<<+fs.js 48 34>>*/ ncomp.pop();
           /*<<+fs.js 48 47>>*/ break;
         case ".": /*<<+fs.js 49 14>>*/ break;
         case "":
           /*<<+fs.js 50 13>>*/ if(ncomp.length == 0)
            /*<<+fs.js 50 35>>*/ ncomp.push("");
           /*<<+fs.js 50 51>>*/ break;
         default:
           /*<<+fs.js 51 13>>*/ ncomp.push(comp[i]);
           /*<<+fs.js 51 33>>*/ break}
      ncomp.orig = name;
       /*<<+fs.js 55 2>>*/ return ncomp /*<<+fs.js 56 0>>*/ }
     /*<<+mlBytes.js 516 0>>*/ function caml_bytes_of_array(a)
     { /*<<+mlBytes.js 517 2>>*/ return new MlBytes(4,a,a.length) /*<<+mlBytes.js 518 0>>*/ }
     /*<<+mlBytes.js 83 0>>*/ function caml_utf8_of_utf16(s)
     { /*<<+mlBytes.js 84 2>>*/ for
       (var
          /*<<+mlBytes.js 84 13>>*/ b="",
          /*<<+mlBytes.js 84 21>>*/ t=b,
         c,
         d,
          /*<<+mlBytes.js 84 34>>*/ i=0,
          /*<<+mlBytes.js 84 41>>*/ l=s.length;
        i
        <
        l;
        i++)
        /*<<+mlBytes.js 84 65>>*/ {c
        =
         /*<<+mlBytes.js 85 8>>*/ s.charCodeAt(i);
         /*<<+mlBytes.js 86 4>>*/ if(c < 0x80)
          /*<<+mlBytes.js 86 18>>*/ { /*<<+mlBytes.js 87 6>>*/ for
           ( /*<<+mlBytes.js 87 17>>*/ var j=i + 1;
            j
            <
            l
            &&
            (c =  /*<<+mlBytes.js 87 42>>*/ s.charCodeAt(j))
            <
            0x80;
            j++)
            /*<<+mlBytes.js 87 71>>*/ ;
           /*<<+mlBytes.js 88 6>>*/ if(j - i > 512)
            /*<<+mlBytes.js 88 23>>*/ { /*<<+mlBytes.js 88 25>>*/ t.substr
             (0,1);
            b += t;
            t = "";
            b +=  /*<<+mlBytes.js 88 62>>*/ s.slice(i,j)}
          else
           t +=  /*<<+mlBytes.js 89 16>>*/ s.slice(i,j);
           /*<<+mlBytes.js 90 6>>*/ if(j == l)
            /*<<+mlBytes.js 90 18>>*/ break;
          i = j}
         /*<<+mlBytes.js 93 4>>*/ if(c < 0x800)
          /*<<+mlBytes.js 93 19>>*/ {t
          +=
           /*<<+mlBytes.js 94 11>>*/ String.fromCharCode(0xc0 | c >> 6);
          t +=  /*<<+mlBytes.js 95 11>>*/ String.fromCharCode(0x80 | c & 0x3f)}
        else
          /*<<+mlBytes.js 96 11>>*/ if(c < 0xd800 || c >= 0xdfff)
           /*<<+mlBytes.js 96 42>>*/ t
          +=
           /*<<+mlBytes.js 97 11>>*/ String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
           /*<<+mlBytes.js 100 11>>*/ if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d =  /*<<+mlBytes.js 101 20>>*/ s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
            /*<<+mlBytes.js 101 65>>*/ t += "\xef\xbf\xbd";
          else
            /*<<+mlBytes.js 104 11>>*/ {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
             /*<<+mlBytes.js 107 11>>*/ String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
         /*<<+mlBytes.js 112 4>>*/ if(t.length > 1024)
          /*<<+mlBytes.js 112 25>>*/ { /*<<+mlBytes.js 112 26>>*/ t.substr
           (0,1);
          b += t;
          t = ""}}
       /*<<+mlBytes.js 114 2>>*/ return b + t /*<<+mlBytes.js 115 0>>*/ }
     /*<<+mlBytes.js 402 0>>*/ function caml_bytes_of_utf16_jsstring(s)
     { /*<<+mlBytes.js 403 2>>*/  /*<<+mlBytes.js 403 10>>*/ var tag=9;
       /*<<+mlBytes.js 404 2>>*/ if
       (!  /*<<+mlBytes.js 404 7>>*/ jsoo_is_ascii(s))
       tag = 8,s =  /*<<+mlBytes.js 405 41>>*/ caml_utf8_of_utf16(s);
       /*<<+mlBytes.js 406 2>>*/ return new MlBytes(tag,s,s.length) /*<<+mlBytes.js 407 0>>*/ }
     /*<<+mlBytes.js 821 0>>*/ function caml_string_of_jsstring(s)
     { /*<<+mlBytes.js 822 2>>*/ return  /*<<+mlBytes.js 822 9>>*/ caml_bytes_of_utf16_jsstring
              (s) /*<<+mlBytes.js 823 0>>*/ }
     /*<<+sys.js 22 0>>*/ function caml_raise_sys_error(msg)
     { /*<<+sys.js 23 2>>*/ caml_raise_with_string
       (caml_global_data.Sys_error,msg) /*<<+sys.js 24 0>>*/ }
     /*<<+fs.js 139 0>>*/ function caml_raise_no_such_file(name)
     {name =  /*<<+fs.js 140 9>>*/ caml_jsbytes_of_string(name);
       /*<<+fs.js 141 2>>*/ caml_raise_sys_error
       (name + ": No such file or directory") /*<<+fs.js 142 0>>*/ }
     /*<<+mlBytes.js 650 0>>*/ function caml_ml_bytes_length(s)
     { /*<<+mlBytes.js 650 35>>*/ return s.l /*<<+mlBytes.js 650 46>>*/ }
     /*<<+fs.js 35 0>>*/ function MlFile(){ /*<<+fs.js 35 20>>*/ }
     /*<<+fs_fake.js 122 0>>*/ function MlFakeFile(content)
     {this.data = content /*<<+fs_fake.js 124 0>>*/ }
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     { /*<<+fs_fake.js 127 2>>*/  /*<<+fs_fake.js 127 10>>*/ var
       old=
        this.data;
      this.data =  /*<<+fs_fake.js 128 14>>*/ caml_create_bytes(len | 0);
       /*<<+fs_fake.js 129 2>>*/ caml_blit_bytes(old,0,this.data,0,len) /*<<+fs_fake.js 126 32>>*/ };
    MlFakeFile.prototype.length
    =
    function()
     { /*<<+fs_fake.js 132 2>>*/ return  /*<<+fs_fake.js 132 9>>*/ caml_ml_bytes_length
              (this.data) /*<<+fs_fake.js 131 30>>*/ };
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     { /*<<+fs_fake.js 135 2>>*/  /*<<+fs_fake.js 135 11>>*/ var
       clen=
         /*<<+fs_fake.js 135 13>>*/ this.length();
       /*<<+fs_fake.js 136 2>>*/ if(offset + len >= clen)
        /*<<+fs_fake.js 136 27>>*/ { /*<<+fs_fake.js 137 4>>*/ var
          /*<<+fs_fake.js 137 16>>*/ new_str=
           /*<<+fs_fake.js 137 18>>*/ caml_create_bytes(offset + len),
          /*<<+fs_fake.js 138 17>>*/ old_data=this.data;
        this.data = new_str;
         /*<<+fs_fake.js 140 4>>*/ caml_blit_bytes
         (old_data,0,this.data,0,clen)}
       /*<<+fs_fake.js 142 2>>*/ caml_blit_string
       (buf,pos,this.data,offset,len);
       /*<<+fs_fake.js 143 2>>*/ return 0 /*<<+fs_fake.js 134 29>>*/ };
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     { /*<<+fs_fake.js 146 2>>*/  /*<<+fs_fake.js 146 11>>*/ var
       clen=
         /*<<+fs_fake.js 146 13>>*/ this.length();
       /*<<+fs_fake.js 147 2>>*/ caml_blit_bytes(this.data,offset,buf,pos,len);
       /*<<+fs_fake.js 148 2>>*/ return 0 /*<<+fs_fake.js 145 28>>*/ };
    MlFakeFile.prototype.read_one
    =
    function(offset)
     { /*<<+fs_fake.js 151 2>>*/ return  /*<<+fs_fake.js 151 9>>*/ caml_bytes_get
              (this.data,offset) /*<<+fs_fake.js 150 32>>*/ };
    MlFakeFile.prototype.close = function(){ /*<<+fs_fake.js 153 29>>*/ };
    MlFakeFile.prototype.constructor = MlFakeFile;
     /*<<+fs_fake.js 26 0>>*/ function MlFakeDevice(root,f)
     {this.content = {};
      this.root = root;
      this.lookupFun = f /*<<+fs_fake.js 30 0>>*/ }
    MlFakeDevice.prototype.nm
    =
    function(name)
     { /*<<+fs_fake.js 32 2>>*/ return this.root + name /*<<+fs_fake.js 31 28>>*/ };
    MlFakeDevice.prototype.lookup
    =
    function(name)
     { /*<<+fs_fake.js 35 2>>*/ if(! this.content[name] && this.lookupFun)
        /*<<+fs_fake.js 35 44>>*/ { /*<<+fs_fake.js 36 4>>*/  /*<<+fs_fake.js 36 12>>*/ var
         res=
           /*<<+fs_fake.js 36 14>>*/ this.lookupFun
           ( /*<<+fs_fake.js 36 29>>*/ caml_string_of_jsbytes(this.root),
             /*<<+fs_fake.js 36 64>>*/ caml_string_of_jsbytes(name));
         /*<<+fs_fake.js 37 4>>*/ if(res !== 0)
         this.content[name]
         =
         new
          MlFakeFile
          ( /*<<+fs_fake.js 37 52>>*/ caml_bytes_of_string(res[1]))} /*<<+fs_fake.js 34 32>>*/ };
    MlFakeDevice.prototype.exists
    =
    function(name)
     { /*<<+fs_fake.js 42 2>>*/ if(name == "")
        /*<<+fs_fake.js 42 17>>*/ return 1;
       /*<<+fs_fake.js 44 2>>*/ var
        /*<<+fs_fake.js 44 17>>*/ name_slash=name + "/",
        /*<<+fs_fake.js 45 8>>*/ r=new RegExp("^" + name_slash);
       /*<<+fs_fake.js 46 2>>*/ for(var n in this.content)
        /*<<+fs_fake.js 46 29>>*/ if( /*<<+fs_fake.js 47 8>>*/ n.match(r))
         /*<<+fs_fake.js 47 20>>*/ return 1;
       /*<<+fs_fake.js 50 2>>*/ this.lookup(name);
       /*<<+fs_fake.js 51 2>>*/ return this.content[name]?1:0 /*<<+fs_fake.js 40 32>>*/ };
    MlFakeDevice.prototype.readdir
    =
    function(name)
     { /*<<+fs_fake.js 54 2>>*/ var
        /*<<+fs_fake.js 54 17>>*/ name_slash=name == ""?"":name + "/",
        /*<<+fs_fake.js 55 8>>*/ r=new RegExp("^" + name_slash + "([^/]*)"),
        /*<<+fs_fake.js 56 11>>*/ seen={},
        /*<<+fs_fake.js 57 8>>*/ a=[];
       /*<<+fs_fake.js 58 2>>*/ for(var n in this.content)
        /*<<+fs_fake.js 58 29>>*/ { /*<<+fs_fake.js 59 4>>*/  /*<<+fs_fake.js 59 10>>*/ var
         m=
           /*<<+fs_fake.js 59 12>>*/ n.match(r);
         /*<<+fs_fake.js 60 4>>*/ if(m && ! seen[m[1]])
          /*<<+fs_fake.js 60 25>>*/ {seen[m[1]] = true;
           /*<<+fs_fake.js 60 45>>*/ a.push(m[1])}}
       /*<<+fs_fake.js 62 2>>*/ return a /*<<+fs_fake.js 53 33>>*/ };
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     { /*<<+fs_fake.js 65 2>>*/ var
        /*<<+fs_fake.js 65 17>>*/ name_slash=name == ""?"":name + "/",
        /*<<+fs_fake.js 66 8>>*/ r=new RegExp("^" + name_slash + "([^/]*)"),
        /*<<+fs_fake.js 67 8>>*/ a=[];
       /*<<+fs_fake.js 68 2>>*/ for(var n in this.content)
        /*<<+fs_fake.js 68 29>>*/ { /*<<+fs_fake.js 69 4>>*/  /*<<+fs_fake.js 69 10>>*/ var
         m=
           /*<<+fs_fake.js 69 12>>*/ n.match(r);
         /*<<+fs_fake.js 70 4>>*/ if(m) /*<<+fs_fake.js 70 10>>*/ return 1}
       /*<<+fs_fake.js 72 2>>*/ return 0 /*<<+fs_fake.js 64 32>>*/ };
    MlFakeDevice.prototype.unlink
    =
    function(name)
     { /*<<+fs_fake.js 75 2>>*/  /*<<+fs_fake.js 75 9>>*/ var
       ok=
        this.content[name]?true:false;
      delete this.content[name];
       /*<<+fs_fake.js 77 2>>*/ return ok /*<<+fs_fake.js 74 32>>*/ };
    MlFakeDevice.prototype.open
    =
    function(name,f)
     { /*<<+fs_fake.js 80 2>>*/ if(f.rdonly && f.wronly)
        /*<<+fs_fake.js 81 4>>*/ caml_raise_sys_error
        ( /*<<+fs_fake.js 81 25>>*/ this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
       /*<<+fs_fake.js 82 2>>*/ if(f.text && f.binary)
        /*<<+fs_fake.js 83 4>>*/ caml_raise_sys_error
        ( /*<<+fs_fake.js 83 25>>*/ this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
       /*<<+fs_fake.js 84 2>>*/ this.lookup(name);
       /*<<+fs_fake.js 85 2>>*/ if(this.content[name])
        /*<<+fs_fake.js 85 26>>*/ { /*<<+fs_fake.js 86 4>>*/ if
         ( /*<<+fs_fake.js 86 8>>*/ this.is_dir(name))
          /*<<+fs_fake.js 86 27>>*/ caml_raise_sys_error
          ( /*<<+fs_fake.js 86 48>>*/ this.nm(name) + " : is a directory");
         /*<<+fs_fake.js 87 4>>*/ if(f.create && f.excl)
          /*<<+fs_fake.js 87 28>>*/ caml_raise_sys_error
          ( /*<<+fs_fake.js 87 49>>*/ this.nm(name) + " : file already exists");
         /*<<+fs_fake.js 88 4>>*/  /*<<+fs_fake.js 88 13>>*/ var
         file=
          this.content[name];
         /*<<+fs_fake.js 89 4>>*/ if(f.truncate)
          /*<<+fs_fake.js 89 19>>*/ file.truncate();
         /*<<+fs_fake.js 90 4>>*/ return file}
      else
        /*<<+fs_fake.js 91 9>>*/ if(f.create)
         /*<<+fs_fake.js 91 23>>*/ {this.content[name]
         =
         new MlFakeFile( /*<<+fs_fake.js 92 40>>*/ caml_create_bytes(0));
          /*<<+fs_fake.js 93 4>>*/ return this.content[name]}
       else
         /*<<+fs_fake.js 94 9>>*/  /*<<+fs_fake.js 95 4>>*/ caml_raise_no_such_file
         ( /*<<+fs_fake.js 95 29>>*/ this.nm(name)) /*<<+fs_fake.js 79 30>>*/ };
    MlFakeDevice.prototype.register
    =
    function(name,content)
     { /*<<+fs_fake.js 100 2>>*/ if(this.content[name])
        /*<<+fs_fake.js 100 25>>*/ caml_raise_sys_error
        ( /*<<+fs_fake.js 100 46>>*/ this.nm(name) + " : file already exists");
       /*<<+fs_fake.js 101 2>>*/ if
       ( /*<<+fs_fake.js 101 5>>*/ caml_is_ml_bytes(content))
       this.content[name] = new MlFakeFile(content);
       /*<<+fs_fake.js 103 2>>*/ if
       ( /*<<+fs_fake.js 103 5>>*/ caml_is_ml_string(content))
       this.content[name]
       =
       new
        MlFakeFile
        ( /*<<+fs_fake.js 104 40>>*/ caml_bytes_of_string(content));
      else
        /*<<+fs_fake.js 105 7>>*/ if(content instanceof Array)
        this.content[name]
        =
        new
         MlFakeFile
         ( /*<<+fs_fake.js 106 40>>*/ caml_bytes_of_array(content));
       else
         /*<<+fs_fake.js 107 7>>*/ if(typeof content === "string")
         this.content[name]
         =
         new
          MlFakeFile
          ( /*<<+fs_fake.js 108 40>>*/ caml_bytes_of_jsbytes(content));
        else
          /*<<+fs_fake.js 109 7>>*/ if(content.toString)
           /*<<+fs_fake.js 109 28>>*/ { /*<<+fs_fake.js 110 4>>*/  /*<<+fs_fake.js 110 14>>*/ var
            bytes=
              /*<<+fs_fake.js 110 16>>*/ caml_bytes_of_string
              ( /*<<+fs_fake.js 110 37>>*/ caml_string_of_jsstring
                ( /*<<+fs_fake.js 110 61>>*/ content.toString()));
           this.content[name] = new MlFakeFile(bytes)}
         else
           /*<<+fs_fake.js 113 7>>*/ caml_raise_sys_error
           ( /*<<+fs_fake.js 113 28>>*/ this.nm(name)
            +
            " : registering file with invalid content type") /*<<+fs_fake.js 99 33>>*/ };
    MlFakeDevice.prototype.constructor = MlFakeDevice;
     /*<<+mlBytes.js 760 0>>*/ function caml_ml_string_length(s)
     { /*<<+mlBytes.js 761 2>>*/ return  /*<<+mlBytes.js 761 9>>*/ caml_ml_bytes_length
              (s) /*<<+mlBytes.js 762 0>>*/ }
     /*<<+mlBytes.js 746 0>>*/ function caml_string_unsafe_get(s,i)
     { /*<<+mlBytes.js 747 2>>*/ return  /*<<+mlBytes.js 747 9>>*/ caml_bytes_unsafe_get
              (s,i) /*<<+mlBytes.js 748 0>>*/ }
     /*<<+mlBytes.js 478 0>>*/ function caml_array_of_string(s)
     { /*<<+mlBytes.js 479 2>>*/ var
        /*<<+mlBytes.js 479 8>>*/ l=
         /*<<+mlBytes.js 479 10>>*/ caml_ml_string_length(s),
        /*<<+mlBytes.js 480 8>>*/ a=new Array(l),
        /*<<+mlBytes.js 481 8>>*/ i=0;
       /*<<+mlBytes.js 482 2>>*/ for(;i < l;i++)
       a[i] =  /*<<+mlBytes.js 482 28>>*/ caml_string_unsafe_get(s,i);
       /*<<+mlBytes.js 483 2>>*/ return a /*<<+mlBytes.js 484 0>>*/ }
     /*<<+mlBytes.js 470 0>>*/ function caml_array_of_bytes(s)
     { /*<<+mlBytes.js 471 2>>*/ if(s.t != 4)
        /*<<+mlBytes.js 471 28>>*/ caml_convert_bytes_to_array(s);
       /*<<+mlBytes.js 472 2>>*/ return s.c /*<<+mlBytes.js 473 0>>*/ }
     /*<<+fs_node.js 107 0>>*/ function MlNodeFile(fd)
     {this.fs =  /*<<+fs_node.js 108 12>>*/ require("fs");
      this.fd = fd /*<<+fs_node.js 110 0>>*/ }
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     { /*<<+fs_node.js 114 2>>*/ try
       { /*<<+fs_node.js 115 4>>*/ this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err)
       { /*<<+fs_node.js 117 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 117 25>>*/ err.toString())} /*<<+fs_node.js 113 32>>*/ };
    MlNodeFile.prototype.length
    =
    function()
     { /*<<+fs_node.js 121 2>>*/ try
       { /*<<+fs_node.js 122 4>>*/ return  /*<<+fs_node.js 122 11>>*/ this.fs.fstatSync
                (this.fd).size}
      catch(err)
       { /*<<+fs_node.js 124 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 124 25>>*/ err.toString())} /*<<+fs_node.js 120 30>>*/ };
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     { /*<<+fs_node.js 128 2>>*/  /*<<+fs_node.js 128 8>>*/ var
       a=
         /*<<+fs_node.js 128 10>>*/ caml_array_of_string(buf);
       /*<<+fs_node.js 129 2>>*/ if
       (! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
       /*<<+fs_node.js 128 2>>*/  /*<<+fs_node.js 131 13>>*/ var
       buffer=
         /*<<+fs_node.js 131 15>>*/ joo_global_object.Buffer.from(a);
       /*<<+fs_node.js 132 2>>*/ try
       { /*<<+fs_node.js 133 4>>*/ this.fs.writeSync
         (this.fd,buffer,buf_offset,len,offset)}
      catch(err)
       { /*<<+fs_node.js 135 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 135 25>>*/ err.toString())}
       /*<<+fs_node.js 137 2>>*/ return 0 /*<<+fs_node.js 127 29>>*/ };
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     { /*<<+fs_node.js 140 2>>*/  /*<<+fs_node.js 140 8>>*/ var
       a=
         /*<<+fs_node.js 140 10>>*/ caml_array_of_bytes(buf);
       /*<<+fs_node.js 141 2>>*/ if
       (! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
       /*<<+fs_node.js 140 2>>*/  /*<<+fs_node.js 143 13>>*/ var
       buffer=
         /*<<+fs_node.js 143 15>>*/ joo_global_object.Buffer.from(a);
       /*<<+fs_node.js 144 2>>*/ try
       { /*<<+fs_node.js 145 4>>*/ this.fs.readSync
         (this.fd,buffer,buf_offset,len,offset)}
      catch(err)
       { /*<<+fs_node.js 147 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 147 25>>*/ err.toString())}
       /*<<+fs_node.js 149 2>>*/ for
       ( /*<<+fs_node.js 149 12>>*/ var i=0;i < len;i++)
        /*<<+fs_node.js 149 30>>*/  /*<<+fs_node.js 150 4>>*/ caml_bytes_set
        (buf,buf_offset + i,buffer[buf_offset + i]);
       /*<<+fs_node.js 152 2>>*/ return 0 /*<<+fs_node.js 139 28>>*/ };
    MlNodeFile.prototype.read_one
    =
    function(offset)
     { /*<<+fs_node.js 155 2>>*/ var
        /*<<+fs_node.js 155 8>>*/ a=new (joo_global_object.Uint8Array)(1),
        /*<<+fs_node.js 156 13>>*/ buffer=
         /*<<+fs_node.js 156 15>>*/ joo_global_object.Buffer.from(a);
       /*<<+fs_node.js 157 2>>*/ try
       { /*<<+fs_node.js 158 4>>*/ this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err)
       { /*<<+fs_node.js 160 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 160 25>>*/ err.toString())}
       /*<<+fs_node.js 162 2>>*/ return buffer[0] /*<<+fs_node.js 154 32>>*/ };
    MlNodeFile.prototype.close
    =
    function()
     { /*<<+fs_node.js 165 2>>*/ try
       { /*<<+fs_node.js 166 4>>*/ this.fs.closeSync(this.fd)}
      catch(err)
       { /*<<+fs_node.js 168 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 168 25>>*/ err.toString())} /*<<+fs_node.js 164 29>>*/ };
    MlNodeFile.prototype.constructor = MlNodeFile;
     /*<<+fs_node.js 32 0>>*/ function MlNodeDevice(root)
     {this.fs =  /*<<+fs_node.js 33 12>>*/ require("fs");
      this.root = root /*<<+fs_node.js 35 0>>*/ }
    MlNodeDevice.prototype.nm
    =
    function(name)
     { /*<<+fs_node.js 37 2>>*/ return this.root + name /*<<+fs_node.js 36 28>>*/ };
    MlNodeDevice.prototype.exists
    =
    function(name)
     { /*<<+fs_node.js 40 2>>*/ try
       { /*<<+fs_node.js 41 4>>*/ return  /*<<+fs_node.js 41 11>>*/ this.fs.existsSync
                 ( /*<<+fs_node.js 41 30>>*/ this.nm(name))
                ?1
                :0}
      catch(err)
       { /*<<+fs_node.js 43 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 43 25>>*/ err.toString())} /*<<+fs_node.js 39 32>>*/ };
    MlNodeDevice.prototype.readdir
    =
    function(name)
     { /*<<+fs_node.js 47 2>>*/ try
       { /*<<+fs_node.js 48 4>>*/ return  /*<<+fs_node.js 48 11>>*/ this.fs.readdirSync
                ( /*<<+fs_node.js 48 31>>*/ this.nm(name))}
      catch(err)
       { /*<<+fs_node.js 50 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 50 25>>*/ err.toString())} /*<<+fs_node.js 46 33>>*/ };
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     { /*<<+fs_node.js 54 2>>*/ try
       { /*<<+fs_node.js 55 4>>*/ return  /*<<+fs_node.js 55 11>>*/  /*<<+fs_node.js 55 11>>*/ this.fs.statSync
                  ( /*<<+fs_node.js 55 28>>*/ this.nm(name)).isDirectory
                 ()
                ?1
                :0}
      catch(err)
       { /*<<+fs_node.js 57 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 57 25>>*/ err.toString())} /*<<+fs_node.js 53 32>>*/ };
    MlNodeDevice.prototype.unlink
    =
    function(name)
     { /*<<+fs_node.js 61 2>>*/ try
       { /*<<+fs_node.js 62 4>>*/  /*<<+fs_node.js 62 10>>*/ var
         b=
           /*<<+fs_node.js 62 12>>*/ this.fs.existsSync
            ( /*<<+fs_node.js 62 31>>*/ this.nm(name))
           ?1
           :0;
         /*<<+fs_node.js 63 4>>*/ this.fs.unlinkSync
         ( /*<<+fs_node.js 63 23>>*/ this.nm(name))}
      catch(err)
       { /*<<+fs_node.js 65 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 65 25>>*/ err.toString())}
       /*<<+fs_node.js 67 2>>*/ return b /*<<+fs_node.js 60 32>>*/ };
    MlNodeDevice.prototype.open
    =
    function(name,f)
     { /*<<+fs_node.js 70 2>>*/ var
        /*<<+fs_node.js 70 13>>*/ consts=
         /*<<+fs_node.js 70 15>>*/ require("constants"),
        /*<<+fs_node.js 71 10>>*/ res=0;
       /*<<+fs_node.js 72 2>>*/ for(var key in f)
        /*<<+fs_node.js 72 19>>*/ switch(key)
        {case "rdonly":
          res |= consts.O_RDONLY; /*<<+fs_node.js 74 45>>*/ break;
         case "wronly":
          res |= consts.O_WRONLY; /*<<+fs_node.js 75 45>>*/ break;
         case "append":
          res |= consts.O_WRONLY | consts.O_APPEND;
           /*<<+fs_node.js 78 6>>*/ break;
         case "create":res |= consts.O_CREAT; /*<<+fs_node.js 79 48>>*/ break;
         case "truncate":
          res |= consts.O_TRUNC; /*<<+fs_node.js 80 48>>*/ break;
         case "excl":res |= consts.O_EXCL; /*<<+fs_node.js 81 48>>*/ break;
         case "binary":
          res |= consts.O_BINARY; /*<<+fs_node.js 82 48>>*/ break;
         case "text":res |= consts.O_TEXT; /*<<+fs_node.js 83 48>>*/ break;
         case "nonblock":
          res |= consts.O_NONBLOCK; /*<<+fs_node.js 84 48>>*/ break
         }
       /*<<+fs_node.js 87 2>>*/ try
       { /*<<+fs_node.js 88 4>>*/  /*<<+fs_node.js 88 11>>*/ var
         fd=
           /*<<+fs_node.js 88 13>>*/ this.fs.openSync
           ( /*<<+fs_node.js 88 30>>*/ this.nm(name),res);
         /*<<+fs_node.js 89 4>>*/ return new MlNodeFile(fd)}
      catch(err)
       { /*<<+fs_node.js 91 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 91 25>>*/ err.toString())} /*<<+fs_node.js 69 30>>*/ };
    MlNodeDevice.prototype.rename
    =
    function(o,n)
     { /*<<+fs_node.js 96 2>>*/ try
       { /*<<+fs_node.js 97 4>>*/ this.fs.renameSync
         ( /*<<+fs_node.js 97 23>>*/ this.nm(o),
           /*<<+fs_node.js 97 35>>*/ this.nm(n))}
      catch(err)
       { /*<<+fs_node.js 99 4>>*/ caml_raise_sys_error
         ( /*<<+fs_node.js 99 25>>*/ err.toString())} /*<<+fs_node.js 95 32>>*/ };
    MlNodeDevice.prototype.constructor = MlNodeDevice;
     /*<<+fs.js 31 0>>*/  /*<<+fs.js 31 14>>*/ var
     caml_root=
       /*<<+fs.js 31 16>>*/ caml_current_dir.match(/[^\/]*\//)[0];
     /*<<+fs_node.js 21 0>>*/ function fs_node_supported()
     { /*<<+fs_node.js 22 2>>*/ return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser" /*<<+fs_node.js 27 0>>*/ }
     /*<<+fs.js 60 0>>*/  /*<<+fs.js 60 21>>*/ var jsoo_mount_point=[];
     /*<<+fs.js 61 0>>*/ if( /*<<+fs.js 61 4>>*/ fs_node_supported())
      /*<<+fs.js 61 25>>*/  /*<<+fs.js 62 2>>*/ jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
      /*<<+fs.js 63 7>>*/  /*<<+fs.js 64 2>>*/ jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
     /*<<+fs.js 66 0>>*/ jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
     /*<<+fs.js 81 0>>*/ function resolve_fs_device(name)
     { /*<<+fs.js 82 2>>*/ var
        /*<<+fs.js 82 11>>*/ path= /*<<+fs.js 82 13>>*/ caml_make_path(name),
        /*<<+fs.js 83 11>>*/ name= /*<<+fs.js 83 13>>*/ path.join("/"),
        /*<<+fs.js 84 17>>*/ name_slash=name + "/",
       res;
       /*<<+fs.js 86 2>>*/ for
       ( /*<<+fs.js 86 12>>*/ var i=0;i < jsoo_mount_point.length;i++)
        /*<<+fs.js 86 51>>*/ { /*<<+fs.js 87 4>>*/  /*<<+fs.js 87 10>>*/ var
         m=
          jsoo_mount_point[i];
         /*<<+fs.js 88 4>>*/ if
         ( /*<<+fs.js 88 7>>*/ name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest: /*<<+fs.js 90 46>>*/ name.substring(m.path.length,name.length)}}
       /*<<+fs.js 92 2>>*/ return res /*<<+fs.js 93 0>>*/ }
     /*<<+fs.js 242 0>>*/ function caml_create_file(name,content)
     { /*<<+fs.js 243 2>>*/ var
        /*<<+fs.js 243 11>>*/ name=
        typeof name == "string"
         ? /*<<+fs.js 243 39>>*/ caml_string_of_jsbytes(name)
         :name,
        /*<<+fs.js 244 14>>*/ content=
        typeof content == "string"
         ? /*<<+fs.js 244 45>>*/ caml_string_of_jsbytes(content)
         :content,
        /*<<+fs.js 245 11>>*/ root=
         /*<<+fs.js 245 13>>*/ resolve_fs_device(name);
       /*<<+fs.js 246 2>>*/ if(! root.device.register)
        /*<<+fs.js 246 29>>*/ caml_failwith("cannot register file");
       /*<<+fs.js 247 2>>*/ root.device.register(root.rest,content);
       /*<<+fs.js 248 2>>*/ return 0 /*<<+fs.js 249 0>>*/ }
     /*<<+mlBytes.js 587 0>>*/ function caml_fill_bytes(s,i,l,c)
     { /*<<+mlBytes.js 588 2>>*/ if(l > 0)
        /*<<+mlBytes.js 588 13>>*/ if
        (i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
         /*<<+mlBytes.js 589 77>>*/ if(c == 0)
          /*<<+mlBytes.js 590 18>>*/ {s.c = "";s.t = 2}
        else
          /*<<+mlBytes.js 593 13>>*/ {s.c
          =
           /*<<+mlBytes.js 594 14>>*/ caml_str_repeat
           (l, /*<<+mlBytes.js 594 34>>*/ String.fromCharCode(c));
          s.t = l == s.l?0:2}
       else
         /*<<+mlBytes.js 597 11>>*/ { /*<<+mlBytes.js 598 6>>*/ if(s.t != 4)
           /*<<+mlBytes.js 598 32>>*/ caml_convert_bytes_to_array(s);
          /*<<+mlBytes.js 599 6>>*/ for(l += i;i < l;i++)s.c[i] = c}
       /*<<+mlBytes.js 602 2>>*/ return 0 /*<<+mlBytes.js 603 0>>*/ }
     /*<<+ieee_754.js 369 0>>*/ function caml_float_of_string(s)
     { /*<<+ieee_754.js 370 2>>*/ var res;
      s =  /*<<+ieee_754.js 371 6>>*/ caml_jsbytes_of_string(s);
      res = + s;
       /*<<+ieee_754.js 373 2>>*/ if(s.length > 0 && res === res)
        /*<<+ieee_754.js 373 39>>*/ return res;
      s =  /*<<+ieee_754.js 374 6>>*/ s.replace(/_/g,"");
      res = + s;
       /*<<+ieee_754.js 376 2>>*/ if
       (s.length
        >
        0
        &&
        res
        ===
        res
        ||
         /*<<+ieee_754.js 376 43>>*/ /^[+-]?nan$/i.test(s))
        /*<<+ieee_754.js 376 66>>*/ return res;
       /*<<+ieee_754.js 370 2>>*/  /*<<+ieee_754.js 377 8>>*/ var
       m=
         /*<<+ieee_754.js 377 10>>*/ /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec
         (s);
       /*<<+ieee_754.js 379 2>>*/ if(m)
        /*<<+ieee_754.js 379 7>>*/ { /*<<+ieee_754.js 380 4>>*/ var
          /*<<+ieee_754.js 380 11>>*/ m3=
           /*<<+ieee_754.js 380 13>>*/ m[3].replace(/0+$/,""),
          /*<<+ieee_754.js 381 17>>*/ mantissa=
           /*<<+ieee_754.js 381 19>>*/ parseInt(m[1] + m[2] + m3,16),
          /*<<+ieee_754.js 382 17>>*/ exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa *  /*<<+ieee_754.js 383 21>>*/ Math.pow(2,exponent);
         /*<<+ieee_754.js 384 4>>*/ return res}
       /*<<+ieee_754.js 386 2>>*/ if
       ( /*<<+ieee_754.js 386 5>>*/ /^\+?inf(inity)?$/i.test(s))
        /*<<+ieee_754.js 386 34>>*/ return Infinity;
       /*<<+ieee_754.js 387 2>>*/ if
       ( /*<<+ieee_754.js 387 5>>*/ /^-inf(inity)?$/i.test(s))
        /*<<+ieee_754.js 387 32>>*/ return - Infinity;
       /*<<+ieee_754.js 388 2>>*/ caml_failwith("float_of_string") /*<<+ieee_754.js 389 0>>*/ }
     /*<<+format.js 22 0>>*/ function caml_parse_format(fmt)
     {fmt =  /*<<+format.js 23 8>>*/ caml_jsbytes_of_string(fmt);
       /*<<+format.js 24 2>>*/  /*<<+format.js 24 10>>*/ var len=fmt.length;
       /*<<+format.js 25 2>>*/ if(len > 31)
        /*<<+format.js 25 16>>*/ caml_invalid_argument
        ("format_int: format too long");
       /*<<+format.js 24 2>>*/  /*<<+format.js 26 8>>*/ var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
       /*<<+format.js 30 2>>*/ for
       ( /*<<+format.js 30 13>>*/ var i=0;i < len;i++)
        /*<<+format.js 30 32>>*/ { /*<<+format.js 31 4>>*/  /*<<+format.js 31 10>>*/ var
         c=
           /*<<+format.js 31 12>>*/ fmt.charAt(i);
         /*<<+format.js 32 4>>*/ switch(c)
         {case "-":f.justify = "-"; /*<<+format.js 34 23>>*/ break;
          case "+":
          case " ":f.signstyle = c; /*<<+format.js 36 23>>*/ break;
          case "0":f.filler = "0"; /*<<+format.js 38 22>>*/ break;
          case "#":f.alternate = true; /*<<+format.js 40 26>>*/ break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
            /*<<+format.js 44 6>>*/ while
            (c
             =
              /*<<+format.js 44 15>>*/ fmt.charCodeAt(i)
             -
             48,
             c
             >=
             0
             &&
             c
             <=
             9)
             /*<<+format.js 44 57>>*/ {f.width = f.width * 10 + c;i++}
           i--;
            /*<<+format.js 48 6>>*/ break;
          case ".":
           f.prec = 0;
           i++;
            /*<<+format.js 52 6>>*/ while
            (c
             =
              /*<<+format.js 52 15>>*/ fmt.charCodeAt(i)
             -
             48,
             c
             >=
             0
             &&
             c
             <=
             9)
             /*<<+format.js 52 57>>*/ {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10; /*<<+format.js 59 19>>*/ break;
          case "x":f.base = 16; /*<<+format.js 61 19>>*/ break;
          case "X":
           f.base = 16;f.uppercase = true; /*<<+format.js 63 39>>*/ break;
          case "o":f.base = 8; /*<<+format.js 65 18>>*/ break;
          case "e":
          case "f":
          case "g":
           f.signedconv = true;f.conv = c; /*<<+format.js 67 39>>*/ break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv =  /*<<+format.js 70 15>>*/ c.toLowerCase();
            /*<<+format.js 70 33>>*/ break
          }}
       /*<<+format.js 73 2>>*/ return f /*<<+format.js 74 0>>*/ }
     /*<<+format.js 78 0>>*/ function caml_finish_formatting(f,rawbuffer)
     { /*<<+format.js 79 2>>*/ if(f.uppercase)
       rawbuffer =  /*<<+format.js 79 31>>*/ rawbuffer.toUpperCase();
       /*<<+format.js 80 2>>*/  /*<<+format.js 80 10>>*/ var
       len=
        rawbuffer.length;
       /*<<+format.js 82 2>>*/ if
       (f.signedconv && (f.sign < 0 || f.signstyle != "-"))
       len++;
       /*<<+format.js 83 2>>*/ if(f.alternate)
        /*<<+format.js 83 19>>*/ { /*<<+format.js 84 4>>*/ if(f.base == 8)
         len += 1;
         /*<<+format.js 85 4>>*/ if(f.base == 16)len += 2}
       /*<<+format.js 80 2>>*/  /*<<+format.js 88 13>>*/ var buffer="";
       /*<<+format.js 89 2>>*/ if(f.justify == "+" && f.filler == " ")
        /*<<+format.js 90 4>>*/ for
        ( /*<<+format.js 90 15>>*/ var i=len;i < f.width;i++)
        buffer += " ";
       /*<<+format.js 91 2>>*/ if(f.signedconv)
        /*<<+format.js 91 20>>*/ if(f.sign < 0)
        buffer += "-";
       else
         /*<<+format.js 93 9>>*/ if(f.signstyle != "-")buffer += f.signstyle;
       /*<<+format.js 95 2>>*/ if(f.alternate && f.base == 8)buffer += "0";
       /*<<+format.js 96 2>>*/ if(f.alternate && f.base == 16)buffer += "0x";
       /*<<+format.js 97 2>>*/ if(f.justify == "+" && f.filler == "0")
        /*<<+format.js 98 4>>*/ for
        ( /*<<+format.js 98 15>>*/ var i=len;i < f.width;i++)
        buffer += "0";
      buffer += rawbuffer;
       /*<<+format.js 100 2>>*/ if(f.justify == "-")
        /*<<+format.js 101 4>>*/ for
        ( /*<<+format.js 101 15>>*/ var i=len;i < f.width;i++)
        buffer += " ";
       /*<<+format.js 102 2>>*/ return  /*<<+format.js 102 9>>*/ caml_string_of_jsbytes
              (buffer) /*<<+format.js 103 0>>*/ }
     /*<<+ieee_754.js 303 0>>*/ function caml_format_float(fmt,x)
     { /*<<+ieee_754.js 304 2>>*/ function toFixed(x,dp)
       { /*<<+ieee_754.js 305 4>>*/ if
         ( /*<<+ieee_754.js 305 8>>*/ Math.abs(x) < 1.0)
          /*<<+ieee_754.js 305 27>>*/ return  /*<<+ieee_754.js 306 13>>*/ x.toFixed
                 (dp);
        else
          /*<<+ieee_754.js 307 11>>*/ { /*<<+ieee_754.js 308 6>>*/  /*<<+ieee_754.js 308 12>>*/ var
           e=
             /*<<+ieee_754.js 308 14>>*/ parseInt
             ( /*<<+ieee_754.js 308 23>>*/  /*<<+ieee_754.js 308 23>>*/ x.toString
                 ().split
                ("+")
               [1]);
           /*<<+ieee_754.js 309 6>>*/ if(e > 20)
            /*<<+ieee_754.js 309 18>>*/ {e -= 20;
            x /=  /*<<+ieee_754.js 311 13>>*/ Math.pow(10,e);
            x +=  /*<<+ieee_754.js 312 13>>*/ new Array(e + 1).join("0");
             /*<<+ieee_754.js 313 8>>*/ if(dp > 0)
              /*<<+ieee_754.js 313 19>>*/ x
             =
             x
             +
             "."
             +
              /*<<+ieee_754.js 314 24>>*/ new Array(dp + 1).join("0");
             /*<<+ieee_754.js 316 8>>*/ return x}
          else
            /*<<+ieee_754.js 318 11>>*/ return  /*<<+ieee_754.js 318 18>>*/ x.toFixed
                   (dp)} /*<<+ieee_754.js 320 2>>*/ }
       /*<<+ieee_754.js 321 2>>*/ var
       s,
        /*<<+ieee_754.js 321 11>>*/ f=
         /*<<+ieee_754.js 321 13>>*/ caml_parse_format(fmt),
        /*<<+ieee_754.js 322 11>>*/ prec=f.prec < 0?6:f.prec;
       /*<<+ieee_754.js 323 2>>*/ if(x < 0 || x == 0 && 1 / x == - Infinity)
        /*<<+ieee_754.js 323 45>>*/ {f.sign = - 1;x = - x}
       /*<<+ieee_754.js 324 2>>*/ if( /*<<+ieee_754.js 324 6>>*/ isNaN(x))
        /*<<+ieee_754.js 324 16>>*/ {s = "nan";f.filler = " "}
      else
        /*<<+ieee_754.js 325 7>>*/ if
        (!  /*<<+ieee_754.js 325 12>>*/ isFinite(x))
         /*<<+ieee_754.js 325 25>>*/ {s = "inf";f.filler = " "}
       else
         /*<<+ieee_754.js 327 4>>*/ switch(f.conv)
         {case "e":
            /*<<+ieee_754.js 329 6>>*/ var
             /*<<+ieee_754.js 329 12>>*/ s=
              /*<<+ieee_754.js 329 14>>*/ x.toExponential(prec),
             /*<<+ieee_754.js 331 12>>*/ i=s.length;
            /*<<+ieee_754.js 332 6>>*/ if
            ( /*<<+ieee_754.js 332 10>>*/ s.charAt(i - 3) == "e")
            s
            =
             /*<<+ieee_754.js 333 12>>*/ s.slice(0,i - 1)
            +
            "0"
            +
             /*<<+ieee_754.js 333 39>>*/ s.slice(i - 1);
            /*<<+ieee_754.js 334 6>>*/ break;
          case "f":
           s =  /*<<+ieee_754.js 336 10>>*/ toFixed(x,prec);
            /*<<+ieee_754.js 336 28>>*/ break;
          case "g":
           prec = prec?prec:1;
           s =  /*<<+ieee_754.js 339 10>>*/ x.toExponential(prec - 1);
            /*<<+ieee_754.js 340 6>>*/ var
             /*<<+ieee_754.js 340 12>>*/ j=
              /*<<+ieee_754.js 340 14>>*/ s.indexOf("e"),
             /*<<+ieee_754.js 341 14>>*/ exp=
             +
              /*<<+ieee_754.js 341 17>>*/ s.slice(j + 1);
            /*<<+ieee_754.js 342 6>>*/ if
            (exp
             <
             -
             4
             ||
             x
             >=
             1e21
             ||
              /*<<+ieee_754.js 342 35>>*/ x.toFixed(0).length
             >
             prec)
             /*<<+ieee_754.js 342 63>>*/ { /*<<+ieee_754.js 344 8>>*/  /*<<+ieee_754.js 344 14>>*/ var
              i=
               j - 1;
              /*<<+ieee_754.js 344 23>>*/ while
              ( /*<<+ieee_754.js 344 30>>*/ s.charAt(i) == "0")
              i--;
              /*<<+ieee_754.js 345 8>>*/ if
              ( /*<<+ieee_754.js 345 12>>*/ s.charAt(i) == ".")
              i--;
             s
             =
              /*<<+ieee_754.js 346 12>>*/ s.slice(0,i + 1)
             +
              /*<<+ieee_754.js 346 32>>*/ s.slice(j);
             i = s.length;
              /*<<+ieee_754.js 348 8>>*/ if
              ( /*<<+ieee_754.js 348 12>>*/ s.charAt(i - 3) == "e")
              s
              =
               /*<<+ieee_754.js 349 14>>*/ s.slice(0,i - 1)
              +
              "0"
              +
               /*<<+ieee_754.js 349 41>>*/ s.slice(i - 1);
              /*<<+ieee_754.js 350 8>>*/ break}
           else
             /*<<+ieee_754.js 351 13>>*/ { /*<<+ieee_754.js 352 8>>*/  /*<<+ieee_754.js 352 14>>*/ var
              p=
               prec;
              /*<<+ieee_754.js 353 8>>*/ if(exp < 0)
               /*<<+ieee_754.js 353 21>>*/ {p -= exp + 1;
               s =  /*<<+ieee_754.js 353 41>>*/ x.toFixed(p)}
             else
               /*<<+ieee_754.js 354 13>>*/ while
               (s
                =
                 /*<<+ieee_754.js 354 24>>*/ x.toFixed(p),
                s.length
                >
                prec
                +
                1)
               p--;
              /*<<+ieee_754.js 355 8>>*/ if(p)
               /*<<+ieee_754.js 355 15>>*/ { /*<<+ieee_754.js 357 10>>*/  /*<<+ieee_754.js 357 16>>*/ var
                i=
                 s.length - 1;
                /*<<+ieee_754.js 357 32>>*/ while
                ( /*<<+ieee_754.js 357 39>>*/ s.charAt(i) == "0")
                i--;
                /*<<+ieee_754.js 358 10>>*/ if
                ( /*<<+ieee_754.js 358 14>>*/ s.charAt(i) == ".")
                i--;
               s =  /*<<+ieee_754.js 359 14>>*/ s.slice(0,i + 1)}}
            /*<<+ieee_754.js 362 6>>*/ break
          }
       /*<<+ieee_754.js 364 2>>*/ return  /*<<+ieee_754.js 364 9>>*/ caml_finish_formatting
              (f,s) /*<<+ieee_754.js 365 0>>*/ }
     /*<<+ints.js 21 0>>*/ function caml_format_int(fmt,i)
     { /*<<+ints.js 22 2>>*/ if
       ( /*<<+ints.js 22 6>>*/ caml_jsbytes_of_string(fmt) == "%d")
        /*<<+ints.js 22 43>>*/ return  /*<<+ints.js 22 50>>*/ caml_string_of_jsbytes
               ("" + i);
       /*<<+ints.js 23 2>>*/  /*<<+ints.js 23 8>>*/ var
       f=
         /*<<+ints.js 23 10>>*/ caml_parse_format(fmt);
       /*<<+ints.js 24 2>>*/ if(i < 0)
        /*<<+ints.js 24 13>>*/ if(f.signedconv)
         /*<<+ints.js 24 33>>*/ {f.sign = - 1;i = - i}
       else
        i >>>= 0;
       /*<<+ints.js 23 2>>*/  /*<<+ints.js 25 8>>*/ var
       s=
         /*<<+ints.js 25 10>>*/ i.toString(f.base);
       /*<<+ints.js 26 2>>*/ if(f.prec >= 0)
        /*<<+ints.js 26 19>>*/ {f.filler = " ";
         /*<<+ints.js 28 4>>*/  /*<<+ints.js 28 10>>*/ var
         n=
          f.prec - s.length;
         /*<<+ints.js 29 4>>*/ if(n > 0)
         s =  /*<<+ints.js 29 19>>*/ caml_str_repeat(n,"0") + s}
       /*<<+ints.js 31 2>>*/ return  /*<<+ints.js 31 9>>*/ caml_finish_formatting
              (f,s) /*<<+ints.js 32 0>>*/ }
     /*<<+obj.js 117 0>>*/  /*<<+obj.js 117 20>>*/ var caml_oo_last_id=0;
     /*<<+obj.js 128 0>>*/ function caml_fresh_oo_id()
     { /*<<+obj.js 129 2>>*/ return caml_oo_last_id++ /*<<+obj.js 130 0>>*/ }
     /*<<+fs.js 228 0>>*/ function caml_fs_init()
     { /*<<+fs.js 229 2>>*/  /*<<+fs.js 229 9>>*/ var
       tmp=
        joo_global_object.caml_fs_tmp;
       /*<<+fs.js 230 2>>*/ if(tmp)
        /*<<+fs.js 230 9>>*/ for
        ( /*<<+fs.js 231 14>>*/ var i=0;i < tmp.length;i++)
         /*<<+fs.js 231 39>>*/  /*<<+fs.js 232 6>>*/ caml_create_file
         (tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
       /*<<+fs.js 237 2>>*/ return 0 /*<<+fs.js 238 0>>*/ }
     /*<<+compare.js 247 0>>*/ function caml_greaterequal(x,y)
     { /*<<+compare.js 247 36>>*/ return +
             ( /*<<+compare.js 247 45>>*/ caml_compare_val(x,y,false) >= 0) /*<<+compare.js 247 80>>*/ }
     /*<<+hash.js 124 0>>*/ function caml_hash_mix_jsbytes(h,s)
     { /*<<+hash.js 125 2>>*/ var  /*<<+hash.js 125 10>>*/ len=s.length,i,w;
       /*<<+hash.js 126 2>>*/ for(i = 0;i + 4 <= len;i += 4)
        /*<<+hash.js 126 36>>*/ {w
        =
         /*<<+hash.js 127 8>>*/ s.charCodeAt(i)
        |
         /*<<+hash.js 128 9>>*/ s.charCodeAt(i + 1)
        <<
        8
        |
         /*<<+hash.js 129 9>>*/ s.charCodeAt(i + 2)
        <<
        16
        |
         /*<<+hash.js 130 9>>*/ s.charCodeAt(i + 3)
        <<
        24;
        h =  /*<<+hash.js 131 8>>*/ caml_hash_mix_int(h,w)}
      w = 0;
       /*<<+hash.js 134 2>>*/ switch(len & 3)
       {case 3:w =  /*<<+hash.js 135 15>>*/ s.charCodeAt(i + 2) << 16;
        case 2:w |=  /*<<+hash.js 136 15>>*/ s.charCodeAt(i + 1) << 8;
        case 1:
         w |=  /*<<+hash.js 138 9>>*/ s.charCodeAt(i);
         h =  /*<<+hash.js 139 8>>*/ caml_hash_mix_int(h,w)
        }
      h ^= len;
       /*<<+hash.js 143 2>>*/ return h /*<<+hash.js 144 0>>*/ }
     /*<<+hash.js 188 0>>*/ function caml_hash_mix_string(h,v)
     { /*<<+hash.js 189 2>>*/ return  /*<<+hash.js 189 9>>*/ caml_hash_mix_jsbytes
              (h, /*<<+hash.js 189 34>>*/ caml_jsbytes_of_string(v)) /*<<+hash.js 190 0>>*/ }
     /*<<+hash.js 148 0>>*/ function caml_hash_mix_bytes_arr(h,s)
     { /*<<+hash.js 149 2>>*/ var  /*<<+hash.js 149 10>>*/ len=s.length,i,w;
       /*<<+hash.js 150 2>>*/ for(i = 0;i + 4 <= len;i += 4)
        /*<<+hash.js 150 36>>*/ {w
        =
        s[i]
        |
        s[i + 1]
        <<
        8
        |
        s[i + 2]
        <<
        16
        |
        s[i + 3]
        <<
        24;
        h =  /*<<+hash.js 155 8>>*/ caml_hash_mix_int(h,w)}
      w = 0;
       /*<<+hash.js 158 2>>*/ switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h =  /*<<+hash.js 162 8>>*/ caml_hash_mix_int(h,w)
        }
      h ^= len;
       /*<<+hash.js 166 2>>*/ return h /*<<+hash.js 167 0>>*/ }
     /*<<+hash.js 173 0>>*/ function caml_hash_mix_bytes(h,v)
     { /*<<+hash.js 174 2>>*/ switch(v.t & 6)
       {default: /*<<+hash.js 176 4>>*/ caml_convert_string_to_bytes(v);case 0:
         h =  /*<<+hash.js 178 8>>*/ caml_hash_mix_jsbytes(h,v.c);
          /*<<+hash.js 179 4>>*/ break;
        case 2:h =  /*<<+hash.js 181 8>>*/ caml_hash_mix_bytes_arr(h,v.c)
        }
       /*<<+hash.js 183 2>>*/ return h /*<<+hash.js 184 0>>*/ }
     /*<<+hash.js 99 0>>*/ function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h =  /*<<+hash.js 101 6>>*/ caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h =  /*<<+hash.js 103 6>>*/ caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
       /*<<+hash.js 105 2>>*/ return h /*<<+hash.js 106 0>>*/ }
     /*<<+hash.js 198 0>>*/ function caml_hash(count,limit,seed,obj)
     { /*<<+hash.js 199 2>>*/ var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
       /*<<+hash.js 201 2>>*/ if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
       /*<<+hash.js 205 2>>*/ while(rd < wr && num > 0)
        /*<<+hash.js 205 29>>*/ {v = queue[rd++];
         /*<<+hash.js 207 4>>*/ if(v && v.caml_custom)
         { /*<<+hash.js 207 27>>*/ if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
            /*<<+hash.js 208 80>>*/ { /*<<+hash.js 209 8>>*/  /*<<+hash.js 209 15>>*/ var
             hh=
               /*<<+hash.js 209 17>>*/ caml_custom_ops[v.caml_custom].hash(v);
            h =  /*<<+hash.js 210 12>>*/ caml_hash_mix_int(h,hh);
            num--}}
        else
          /*<<+hash.js 214 9>>*/ if(v instanceof Array && v[0] === (v[0] | 0))
           /*<<+hash.js 214 54>>*/ switch(v[0])
           {case 248:
             h =  /*<<+hash.js 218 12>>*/ caml_hash_mix_int(h,v[2]);
             num--;
              /*<<+hash.js 220 8>>*/ break;
            case 250:queue[--rd] = v[1]; /*<<+hash.js 224 8>>*/ break;
            default:
              /*<<+hash.js 226 8>>*/  /*<<+hash.js 226 16>>*/ var
              tag=
               v.length - 1 << 10 | v[0];
             h =  /*<<+hash.js 227 12>>*/ caml_hash_mix_int(h,tag);
              /*<<+hash.js 228 8>>*/ for(i = 1,len = v.length;i < len;i++)
               /*<<+hash.js 228 50>>*/ { /*<<+hash.js 229 10>>*/ if(wr >= sz)
                 /*<<+hash.js 229 24>>*/ break;
               queue[wr++] = v[i]}
              /*<<+hash.js 232 8>>*/ break}
         else
           /*<<+hash.js 234 11>>*/ if
           ( /*<<+hash.js 234 15>>*/ caml_is_ml_bytes(v))
            /*<<+hash.js 234 36>>*/ {h
            =
             /*<<+hash.js 235 10>>*/ caml_hash_mix_bytes(h,v);
            num--}
          else
            /*<<+hash.js 237 11>>*/ if
            ( /*<<+hash.js 237 15>>*/ caml_is_ml_string(v))
             /*<<+hash.js 237 37>>*/ {h
             =
              /*<<+hash.js 238 10>>*/ caml_hash_mix_string(h,v);
             num--}
           else
             /*<<+hash.js 240 11>>*/ if(typeof v === "string")
              /*<<+hash.js 240 38>>*/ {h
              =
               /*<<+hash.js 241 10>>*/ caml_hash_mix_jsbytes(h,v);
              num--}
            else
              /*<<+hash.js 243 11>>*/ if(v === (v | 0))
               /*<<+hash.js 243 28>>*/ {h
               =
                /*<<+hash.js 245 10>>*/ caml_hash_mix_int(h,v + v + 1);
               num--}
             else
               /*<<+hash.js 247 11>>*/ if(v === + v)
                /*<<+hash.js 247 25>>*/ {h
                =
                 /*<<+hash.js 249 10>>*/ caml_hash_mix_float(h,v);
                num--}}
      h =  /*<<+hash.js 253 6>>*/ caml_hash_mix_final(h);
       /*<<+hash.js 254 2>>*/ return h & 0x3FFFFFFF /*<<+hash.js 255 0>>*/ }
     /*<<+ieee_754.js 81 0>>*/ function caml_hexstring_of_float(x,prec,style)
     { /*<<+ieee_754.js 82 2>>*/ if(!  /*<<+ieee_754.js 82 7>>*/ isFinite(x))
        /*<<+ieee_754.js 82 20>>*/ { /*<<+ieee_754.js 83 4>>*/ if
         ( /*<<+ieee_754.js 83 8>>*/ isNaN(x))
          /*<<+ieee_754.js 83 18>>*/ return  /*<<+ieee_754.js 83 25>>*/ caml_string_of_jsstring
                 ("nan");
         /*<<+ieee_754.js 84 4>>*/ return  /*<<+ieee_754.js 84 11>>*/ caml_string_of_jsstring
                (x > 0?"infinity":"-infinity")}
       /*<<+ieee_754.js 86 2>>*/  /*<<+ieee_754.js 86 11>>*/ var
       sign=
        x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
       /*<<+ieee_754.js 87 2>>*/ if(sign)x = - x;
       /*<<+ieee_754.js 86 2>>*/  /*<<+ieee_754.js 88 10>>*/ var exp=0;
       /*<<+ieee_754.js 89 2>>*/ if(x == 0)
        /*<<+ieee_754.js 89 14>>*/ ;
      else
        /*<<+ieee_754.js 90 7>>*/ if(x < 1)
         /*<<+ieee_754.js 90 18>>*/ while(x < 1 && exp > - 1022)
          /*<<+ieee_754.js 91 34>>*/ {x *= 2;exp--}
       else
         /*<<+ieee_754.js 92 9>>*/ while(x >= 2)
          /*<<+ieee_754.js 93 19>>*/ {x /= 2;exp++}
       /*<<+ieee_754.js 86 2>>*/ var
        /*<<+ieee_754.js 95 15>>*/ exp_sign=exp < 0?"":"+",
        /*<<+ieee_754.js 96 15>>*/ sign_str="";
       /*<<+ieee_754.js 97 2>>*/ if(sign)
       sign_str = "-";
      else
        /*<<+ieee_754.js 98 7>>*/ switch(style)
        {case 43:sign_str = "+"; /*<<+ieee_754.js 100 39>>*/ break;
         case 32:sign_str = " "; /*<<+ieee_754.js 101 39>>*/ break;
         default: /*<<+ieee_754.js 102 13>>*/ break}
       /*<<+ieee_754.js 105 2>>*/ if(prec >= 0 && prec < 13)
        /*<<+ieee_754.js 105 30>>*/ { /*<<+ieee_754.js 107 4>>*/  /*<<+ieee_754.js 107 12>>*/ var
         cst=
           /*<<+ieee_754.js 107 14>>*/ Math.pow(2,prec * 4);
        x =  /*<<+ieee_754.js 108 8>>*/ Math.round(x * cst) / cst}
       /*<<+ieee_754.js 86 2>>*/  /*<<+ieee_754.js 110 12>>*/ var
       x_str=
         /*<<+ieee_754.js 110 14>>*/ x.toString(16);
       /*<<+ieee_754.js 111 2>>*/ if(prec >= 0)
        /*<<+ieee_754.js 111 15>>*/ { /*<<+ieee_754.js 112 4>>*/  /*<<+ieee_754.js 112 12>>*/ var
         idx=
           /*<<+ieee_754.js 112 14>>*/ x_str.indexOf(".");
         /*<<+ieee_754.js 113 4>>*/ if(idx < 0)
          /*<<+ieee_754.js 113 14>>*/ x_str
         +=
         "."
         +
          /*<<+ieee_754.js 114 21>>*/ caml_str_repeat(prec,"0");
        else
          /*<<+ieee_754.js 116 9>>*/ { /*<<+ieee_754.js 117 6>>*/  /*<<+ieee_754.js 117 15>>*/ var
           size=
            idx + 1 + prec;
           /*<<+ieee_754.js 118 6>>*/ if(x_str.length < size)
           x_str
           +=
            /*<<+ieee_754.js 119 17>>*/ caml_str_repeat
            (size - x_str.length,"0");
          else
           x_str =  /*<<+ieee_754.js 121 16>>*/ x_str.substr(0,size)}}
       /*<<+ieee_754.js 124 2>>*/ return  /*<<+ieee_754.js 124 9>>*/ caml_string_of_jsstring
              (sign_str
               +
               "0x"
               +
               x_str
               +
               "p"
               +
               exp_sign
               +
                /*<<+ieee_754.js 124 77>>*/ exp.toString(10)) /*<<+ieee_754.js 125 0>>*/ }
     /*<<+int64.js 235 0>>*/ function caml_int64_is_zero(x)
     { /*<<+int64.js 235 33>>*/ return +  /*<<+int64.js 235 41>>*/ x.isZero() /*<<+int64.js 235 53>>*/ }
     /*<<+int64.js 266 0>>*/ function caml_int64_of_int32(x)
     { /*<<+int64.js 267 2>>*/ return new
              MlInt64
              (x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff) /*<<+int64.js 268 0>>*/ }
     /*<<+int64.js 271 0>>*/ function caml_int64_to_int32(x)
     { /*<<+int64.js 271 35>>*/ return  /*<<+int64.js 271 42>>*/ x.toInt() /*<<+int64.js 271 52>>*/ }
     /*<<+int64.js 238 0>>*/ function caml_int64_is_negative(x)
     { /*<<+int64.js 238 37>>*/ return +  /*<<+int64.js 238 45>>*/ x.isNeg() /*<<+int64.js 238 56>>*/ }
     /*<<+int64.js 222 0>>*/ function caml_int64_neg(x)
     { /*<<+int64.js 222 30>>*/ return  /*<<+int64.js 222 37>>*/ x.neg() /*<<+int64.js 222 45>>*/ }
     /*<<+int64.js 291 0>>*/ function caml_int64_format(fmt,x)
     { /*<<+int64.js 292 2>>*/  /*<<+int64.js 292 8>>*/ var
       f=
         /*<<+int64.js 292 10>>*/ caml_parse_format(fmt);
       /*<<+int64.js 293 2>>*/ if
       (f.signedconv &&  /*<<+int64.js 293 22>>*/ caml_int64_is_negative(x))
        /*<<+int64.js 293 49>>*/ {f.sign = - 1;
        x =  /*<<+int64.js 294 21>>*/ caml_int64_neg(x)}
       /*<<+int64.js 292 2>>*/ var
        /*<<+int64.js 296 13>>*/ buffer="",
        /*<<+int64.js 297 12>>*/ wbase=
         /*<<+int64.js 297 14>>*/ caml_int64_of_int32(f.base),
        /*<<+int64.js 298 12>>*/ cvtbl="0123456789abcdef";
       /*<<+int64.js 299 2>>*/ do
        /*<<+int64.js 299 5>>*/ { /*<<+int64.js 300 4>>*/  /*<<+int64.js 300 10>>*/ var
         p=
           /*<<+int64.js 300 12>>*/ x.udivmod(wbase);
        x = p.quotient;
        buffer
        =
         /*<<+int64.js 302 13>>*/ cvtbl.charAt
         ( /*<<+int64.js 302 26>>*/ caml_int64_to_int32(p.modulus))
        +
        buffer}
      while
       (!  /*<<+int64.js 303 13>>*/ caml_int64_is_zero(x));
       /*<<+int64.js 304 2>>*/ if(f.prec >= 0)
        /*<<+int64.js 304 19>>*/ {f.filler = " ";
         /*<<+int64.js 306 4>>*/  /*<<+int64.js 306 10>>*/ var
         n=
          f.prec - buffer.length;
         /*<<+int64.js 307 4>>*/ if(n > 0)
         buffer =  /*<<+int64.js 307 24>>*/ caml_str_repeat(n,"0") + buffer}
       /*<<+int64.js 309 2>>*/ return  /*<<+int64.js 309 9>>*/ caml_finish_formatting
              (f,buffer) /*<<+int64.js 310 0>>*/ }
     /*<<+ints.js 36 0>>*/ function caml_parse_sign_and_base(s)
     { /*<<+ints.js 37 2>>*/ var
        /*<<+ints.js 37 8>>*/ i=0,
        /*<<+ints.js 37 17>>*/ len=
         /*<<+ints.js 37 19>>*/ caml_ml_string_length(s),
        /*<<+ints.js 37 50>>*/ base=10,
        /*<<+ints.js 37 61>>*/ sign=1;
       /*<<+ints.js 38 2>>*/ if(len > 0)
        /*<<+ints.js 38 15>>*/ switch
        ( /*<<+ints.js 39 12>>*/ caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1; /*<<+ints.js 40 29>>*/ break;
         case 43:i++;sign = 1; /*<<+ints.js 41 28>>*/ break
         }
       /*<<+ints.js 44 2>>*/ if
       (i
        +
        1
        <
        len
        &&
         /*<<+ints.js 44 21>>*/ caml_string_unsafe_get(s,i)
        ==
        48)
        /*<<+ints.js 45 4>>*/ switch
        ( /*<<+ints.js 45 12>>*/ caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2; /*<<+ints.js 46 42>>*/ break;
         case 111:
         case 79:base = 8;i += 2; /*<<+ints.js 47 42>>*/ break;
         case 98:
         case 66:base = 2;i += 2; /*<<+ints.js 48 42>>*/ break;
         case 117:
         case 85:i += 2; /*<<+ints.js 49 31>>*/ break
         }
       /*<<+ints.js 51 2>>*/ return [i,sign,base] /*<<+ints.js 52 0>>*/ }
     /*<<+ints.js 55 0>>*/ function caml_parse_digit(c)
     { /*<<+ints.js 56 2>>*/ if(c >= 48 && c <= 57)
        /*<<+ints.js 56 27>>*/ return c - 48;
       /*<<+ints.js 57 2>>*/ if(c >= 65 && c <= 90)
        /*<<+ints.js 57 27>>*/ return c - 55;
       /*<<+ints.js 58 2>>*/ if(c >= 97 && c <= 122)
        /*<<+ints.js 58 27>>*/ return c - 87;
       /*<<+ints.js 59 2>>*/ return - 1 /*<<+ints.js 60 0>>*/ }
     /*<<+ints.js 65 0>>*/ function caml_int_of_string(s)
     { /*<<+ints.js 66 2>>*/ var
        /*<<+ints.js 66 8>>*/ r=
         /*<<+ints.js 66 10>>*/ caml_parse_sign_and_base(s),
        /*<<+ints.js 67 8>>*/ i=r[0],
        /*<<+ints.js 67 21>>*/ sign=r[1],
        /*<<+ints.js 67 34>>*/ base=r[2],
        /*<<+ints.js 68 10>>*/ len=
         /*<<+ints.js 68 12>>*/ caml_ml_string_length(s),
        /*<<+ints.js 69 16>>*/ threshold=- 1 >>> 0,
        /*<<+ints.js 70 8>>*/ c=
        i < len? /*<<+ints.js 70 20>>*/ caml_string_unsafe_get(s,i):0,
        /*<<+ints.js 71 8>>*/ d= /*<<+ints.js 71 10>>*/ caml_parse_digit(c);
       /*<<+ints.js 72 2>>*/ if(d < 0 || d >= base)
        /*<<+ints.js 72 26>>*/ caml_failwith("int_of_string");
       /*<<+ints.js 66 2>>*/  /*<<+ints.js 73 10>>*/ var res=d;
       /*<<+ints.js 74 2>>*/ for(i++;i < len;i++)
        /*<<+ints.js 74 22>>*/ {c
        =
         /*<<+ints.js 75 8>>*/ caml_string_unsafe_get(s,i);
         /*<<+ints.js 76 4>>*/ if(c == 95) /*<<+ints.js 76 17>>*/ continue;
        d =  /*<<+ints.js 77 8>>*/ caml_parse_digit(c);
         /*<<+ints.js 78 4>>*/ if(d < 0 || d >= base)
          /*<<+ints.js 78 28>>*/ break;
        res = base * res + d;
         /*<<+ints.js 80 4>>*/ if(res > threshold)
          /*<<+ints.js 80 25>>*/ caml_failwith("int_of_string")}
       /*<<+ints.js 82 2>>*/ if(i != len)
        /*<<+ints.js 82 16>>*/ caml_failwith("int_of_string");
      res = sign * res;
       /*<<+ints.js 87 2>>*/ if(base == 10 && (res | 0) != res)
        /*<<+ints.js 89 4>>*/ caml_failwith("int_of_string");
       /*<<+ints.js 90 2>>*/ return res | 0 /*<<+ints.js 91 0>>*/ }
     /*<<+jslib_js_of_ocaml.js 32 0>>*/ function caml_js_from_array(a)
     { /*<<+jslib_js_of_ocaml.js 33 2>>*/ return  /*<<+jslib_js_of_ocaml.js 33 9>>*/ a.slice
              (1) /*<<+jslib_js_of_ocaml.js 34 0>>*/ }
     /*<<+jslib_js_of_ocaml.js 77 0>>*/ function caml_js_call(f,o,args)
     { /*<<+jslib_js_of_ocaml.js 77 36>>*/ return  /*<<+jslib_js_of_ocaml.js 77 43>>*/ f.apply
              (o,
                /*<<+jslib_js_of_ocaml.js 77 54>>*/ caml_js_from_array(args)) /*<<+jslib_js_of_ocaml.js 77 81>>*/ }
     /*<<+jslib.js 46 0>>*/  /*<<+jslib.js 46 20>>*/ var
     caml_js_regexps=
      {amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};
     /*<<+jslib.js 47 0>>*/ function caml_js_html_escape(s)
     { /*<<+jslib.js 48 2>>*/ if
       (!  /*<<+jslib.js 48 7>>*/ caml_js_regexps.all.test(s))
        /*<<+jslib.js 48 36>>*/ return s;
       /*<<+jslib.js 49 2>>*/ return  /*<<+jslib.js 49 9>>*/  /*<<+jslib.js 49 9>>*/  /*<<+jslib.js 49 9>>*/ s.replace
                (caml_js_regexps.amp,"&amp;").replace
               (caml_js_regexps.lt,"&lt;").replace
              (caml_js_regexps.quot,"&quot;") /*<<+jslib.js 52 0>>*/ }
     /*<<+jslib_js_of_ocaml.js 135 0>>*/ function caml_js_wrap_callback(f)
     { /*<<+jslib_js_of_ocaml.js 136 2>>*/ return function()
       { /*<<+jslib_js_of_ocaml.js 137 4>>*/  /*<<+jslib_js_of_ocaml.js 137 12>>*/ var
         len=
          arguments.length;
         /*<<+jslib_js_of_ocaml.js 138 4>>*/ if(len > 0)
          /*<<+jslib_js_of_ocaml.js 138 15>>*/ { /*<<+jslib_js_of_ocaml.js 139 6>>*/  /*<<+jslib_js_of_ocaml.js 139 15>>*/ var
           args=
            new Array(len);
           /*<<+jslib_js_of_ocaml.js 140 6>>*/ for
           ( /*<<+jslib_js_of_ocaml.js 140 17>>*/ var i=0;i < len;i++)
           args[i] = arguments[i];
           /*<<+jslib_js_of_ocaml.js 141 6>>*/ return  /*<<+jslib_js_of_ocaml.js 141 13>>*/ caml_call_gen
                  (f,args)}
        else
          /*<<+jslib_js_of_ocaml.js 142 11>>*/ return  /*<<+jslib_js_of_ocaml.js 143 13>>*/ caml_call_gen
                 (f,[undefined]) /*<<+jslib_js_of_ocaml.js 136 9>>*/ } /*<<+jslib_js_of_ocaml.js 146 0>>*/ }
     /*<<+compare.js 253 0>>*/ function caml_lessequal(x,y)
     { /*<<+compare.js 253 33>>*/ return +
             ( /*<<+compare.js 253 42>>*/ caml_compare_val(x,y,false) <= 0) /*<<+compare.js 253 77>>*/ }
     /*<<+compare.js 256 0>>*/ function caml_lessthan(x,y)
     { /*<<+compare.js 256 32>>*/ return +
             ( /*<<+compare.js 256 41>>*/ caml_compare_val(x,y,false) < 0) /*<<+compare.js 256 75>>*/ }
     /*<<+lexing.js 20 0>>*/ function caml_lex_array(s)
     {s =  /*<<+lexing.js 21 6>>*/ caml_jsbytes_of_string(s);
       /*<<+lexing.js 22 2>>*/ var
        /*<<+lexing.js 22 8>>*/ l=s.length / 2,
        /*<<+lexing.js 23 8>>*/ a=new Array(l);
       /*<<+lexing.js 24 2>>*/ for
       ( /*<<+lexing.js 24 13>>*/ var i=0;i < l;i++)
       a[i]
       =
       ( /*<<+lexing.js 25 12>>*/ s.charCodeAt(2 * i)
        |
         /*<<+lexing.js 25 35>>*/ s.charCodeAt(2 * i + 1)
        <<
        8)
       <<
       16
       >>
       16;
       /*<<+lexing.js 26 2>>*/ return a /*<<+lexing.js 27 0>>*/ }
     /*<<+lexing.js 31 0>>*/ function caml_lex_engine(tbl,start_state,lexbuf)
     { /*<<+lexing.js 32 2>>*/ var
        /*<<+lexing.js 32 17>>*/ lex_buffer=2,
        /*<<+lexing.js 33 21>>*/ lex_buffer_len=3,
        /*<<+lexing.js 34 20>>*/ lex_start_pos=5,
        /*<<+lexing.js 35 19>>*/ lex_curr_pos=6,
        /*<<+lexing.js 36 19>>*/ lex_last_pos=7,
        /*<<+lexing.js 37 22>>*/ lex_last_action=8,
        /*<<+lexing.js 38 22>>*/ lex_eof_reached=9,
        /*<<+lexing.js 39 15>>*/ lex_base=1,
        /*<<+lexing.js 40 18>>*/ lex_backtrk=2,
        /*<<+lexing.js 41 18>>*/ lex_default=3,
        /*<<+lexing.js 42 16>>*/ lex_trans=4,
        /*<<+lexing.js 43 16>>*/ lex_check=5;
       /*<<+lexing.js 45 2>>*/ if(! tbl.lex_default)
        /*<<+lexing.js 45 24>>*/ {tbl.lex_base
        =
         /*<<+lexing.js 46 22>>*/ caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk
        =
         /*<<+lexing.js 47 22>>*/ caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check
        =
         /*<<+lexing.js 48 22>>*/ caml_lex_array(tbl[lex_check]);
        tbl.lex_trans
        =
         /*<<+lexing.js 49 22>>*/ caml_lex_array(tbl[lex_trans]);
        tbl.lex_default
        =
         /*<<+lexing.js 50 22>>*/ caml_lex_array(tbl[lex_default])}
       /*<<+lexing.js 32 2>>*/ var
       c,
        /*<<+lexing.js 53 15>>*/ state=start_state,
        /*<<+lexing.js 55 13>>*/ buffer=
         /*<<+lexing.js 55 15>>*/ caml_array_of_bytes(lexbuf[lex_buffer]);
       /*<<+lexing.js 57 2>>*/ if(state >= 0)
        /*<<+lexing.js 57 18>>*/ {lexbuf[lex_last_pos]
        =
        lexbuf[lex_start_pos]
        =
        lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
        /*<<+lexing.js 61 9>>*/ state = - state - 1;
       /*<<+lexing.js 65 2>>*/ for(;;)
        /*<<+lexing.js 65 10>>*/ { /*<<+lexing.js 67 4>>*/  /*<<+lexing.js 67 13>>*/ var
         base=
          tbl.lex_base[state];
         /*<<+lexing.js 68 4>>*/ if(base < 0)
          /*<<+lexing.js 68 18>>*/ return - base - 1;
         /*<<+lexing.js 67 4>>*/  /*<<+lexing.js 70 16>>*/ var
         backtrk=
          tbl.lex_backtrk[state];
         /*<<+lexing.js 71 4>>*/ if(backtrk >= 0)
          /*<<+lexing.js 71 22>>*/ {lexbuf[lex_last_pos]
          =
          lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
         /*<<+lexing.js 76 4>>*/ if
         (lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
          /*<<+lexing.js 76 55>>*/ if(lexbuf[lex_eof_reached] == 0)
           /*<<+lexing.js 78 8>>*/ return - state - 1;
         else
          c = 256;
        else
          /*<<+lexing.js 81 9>>*/ {c = buffer[lexbuf[lex_curr_pos]];
          lexbuf[lex_curr_pos]++}
         /*<<+lexing.js 87 4>>*/ if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
         /*<<+lexing.js 92 4>>*/ if(state < 0)
          /*<<+lexing.js 92 19>>*/ {lexbuf[lex_curr_pos]
          =
          lexbuf[lex_last_pos];
           /*<<+lexing.js 94 6>>*/ if(lexbuf[lex_last_action] == - 1)
            /*<<+lexing.js 95 8>>*/ caml_failwith("lexing: empty token");
          else
            /*<<+lexing.js 97 8>>*/ return lexbuf[lex_last_action]}
        else
          /*<<+lexing.js 98 9>>*/ if(c == 256)lexbuf[lex_eof_reached] = 0} /*<<+lexing.js 105 0>>*/ }
     /*<<+jslib_js_of_ocaml.js 45 0>>*/ function caml_list_of_js_array(a)
     { /*<<+jslib_js_of_ocaml.js 46 2>>*/  /*<<+jslib_js_of_ocaml.js 46 8>>*/ var
       l=
        0;
       /*<<+jslib_js_of_ocaml.js 47 2>>*/ for
       ( /*<<+jslib_js_of_ocaml.js 47 11>>*/ var i=a.length - 1;i >= 0;i--)
        /*<<+jslib_js_of_ocaml.js 47 36>>*/ { /*<<+jslib_js_of_ocaml.js 48 4>>*/  /*<<+jslib_js_of_ocaml.js 48 10>>*/ var
         e=
          a[i];
        l = [0,e,l]}
       /*<<+jslib_js_of_ocaml.js 51 2>>*/ return l /*<<+jslib_js_of_ocaml.js 52 0>>*/ }
     /*<<+array.js 105 0>>*/ function caml_make_vect(len,init)
     { /*<<+array.js 106 2>>*/ if(len < 0)
        /*<<+array.js 106 15>>*/ caml_array_bound_error();
       /*<<+array.js 107 2>>*/ var
        /*<<+array.js 107 10>>*/ len=len + 1 | 0,
        /*<<+array.js 108 8>>*/ b=new Array(len);
      b[0] = 0;
       /*<<+array.js 110 2>>*/ for
       ( /*<<+array.js 110 13>>*/ var i=1;i < len;i++)
       b[i] = init;
       /*<<+array.js 111 2>>*/ return b /*<<+array.js 112 0>>*/ }
     /*<<+mlBytes.js 510 0>>*/ function caml_string_of_array(a)
     { /*<<+mlBytes.js 511 2>>*/ return  /*<<+mlBytes.js 511 9>>*/ caml_string_of_jsbytes
              ( /*<<+mlBytes.js 511 32>>*/ caml_subarray_to_jsbytes
                (a,0,a.length)) /*<<+mlBytes.js 512 0>>*/ }
     /*<<+md5.js 42 0>>*/  /*<<+md5.js 42 19>>*/ var
     caml_md5_bytes=
       /*<<+md5.js 42 21>>*/ function()
        { /*<<+md5.js 43 2>>*/ function add(x,y)
          { /*<<+md5.js 43 24>>*/ return x + y | 0 /*<<+md5.js 43 44>>*/ }
          /*<<+md5.js 44 2>>*/ function xx(q,a,b,x,s,t)
          {a
           =
            /*<<+md5.js 45 8>>*/ add
            ( /*<<+md5.js 45 12>>*/ add(a,q), /*<<+md5.js 45 23>>*/ add(x,t));
            /*<<+md5.js 46 4>>*/ return  /*<<+md5.js 46 11>>*/ add
                   (a << s | a >>> 32 - s,b) /*<<+md5.js 47 2>>*/ }
          /*<<+md5.js 48 2>>*/ function ff(a,b,c,d,x,s,t)
          { /*<<+md5.js 49 4>>*/ return  /*<<+md5.js 49 11>>*/ xx
                   (b & c | ~ b & d,a,b,x,s,t) /*<<+md5.js 50 2>>*/ }
          /*<<+md5.js 51 2>>*/ function gg(a,b,c,d,x,s,t)
          { /*<<+md5.js 52 4>>*/ return  /*<<+md5.js 52 11>>*/ xx
                   (b & d | c & ~ d,a,b,x,s,t) /*<<+md5.js 53 2>>*/ }
          /*<<+md5.js 54 2>>*/ function hh(a,b,c,d,x,s,t)
          { /*<<+md5.js 54 31>>*/ return  /*<<+md5.js 54 38>>*/ xx
                   (b ^ c ^ d,a,b,x,s,t) /*<<+md5.js 54 68>>*/ }
          /*<<+md5.js 55 2>>*/ function ii(a,b,c,d,x,s,t)
          { /*<<+md5.js 55 31>>*/ return  /*<<+md5.js 55 38>>*/ xx
                   (c ^ (b | ~ d),a,b,x,s,t) /*<<+md5.js 55 73>>*/ }
          /*<<+md5.js 57 2>>*/ function md5(buffer,length)
          { /*<<+md5.js 58 4>>*/  /*<<+md5.js 58 10>>*/ var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
            /*<<+md5.js 60 4>>*/ for
            (i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
            /*<<+md5.js 58 4>>*/  /*<<+md5.js 65 10>>*/ var
            w=
             [0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
            /*<<+md5.js 67 4>>*/ for(i = 0;i < buffer.length;i += 16)
             /*<<+md5.js 67 43>>*/ { /*<<+md5.js 68 6>>*/ var
               /*<<+md5.js 68 12>>*/ a=w[0],
               /*<<+md5.js 68 22>>*/ b=w[1],
               /*<<+md5.js 68 32>>*/ c=w[2],
               /*<<+md5.js 68 42>>*/ d=w[3];
             a
             =
              /*<<+md5.js 70 10>>*/ ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d
             =
              /*<<+md5.js 71 10>>*/ ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c
             =
              /*<<+md5.js 72 10>>*/ ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b
             =
              /*<<+md5.js 73 10>>*/ ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a
             =
              /*<<+md5.js 74 10>>*/ ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d
             =
              /*<<+md5.js 75 10>>*/ ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c
             =
              /*<<+md5.js 76 10>>*/ ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b
             =
              /*<<+md5.js 77 10>>*/ ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a
             =
              /*<<+md5.js 78 10>>*/ ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d
             =
              /*<<+md5.js 79 10>>*/ ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c
             =
              /*<<+md5.js 80 10>>*/ ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b
             =
              /*<<+md5.js 81 10>>*/ ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a
             =
              /*<<+md5.js 82 10>>*/ ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d
             =
              /*<<+md5.js 83 10>>*/ ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c
             =
              /*<<+md5.js 84 10>>*/ ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b
             =
              /*<<+md5.js 85 10>>*/ ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a
             =
              /*<<+md5.js 87 10>>*/ gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d
             =
              /*<<+md5.js 88 10>>*/ gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c
             =
              /*<<+md5.js 89 10>>*/ gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b
             =
              /*<<+md5.js 90 10>>*/ gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a
             =
              /*<<+md5.js 91 10>>*/ gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d
             =
              /*<<+md5.js 92 10>>*/ gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c
             =
              /*<<+md5.js 93 10>>*/ gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b
             =
              /*<<+md5.js 94 10>>*/ gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a
             =
              /*<<+md5.js 95 10>>*/ gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d
             =
              /*<<+md5.js 96 10>>*/ gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c
             =
              /*<<+md5.js 97 10>>*/ gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b
             =
              /*<<+md5.js 98 10>>*/ gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a
             =
              /*<<+md5.js 99 10>>*/ gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d
             =
              /*<<+md5.js 100 10>>*/ gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c
             =
              /*<<+md5.js 101 10>>*/ gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b
             =
              /*<<+md5.js 102 10>>*/ gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a
             =
              /*<<+md5.js 104 10>>*/ hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d
             =
              /*<<+md5.js 105 10>>*/ hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c
             =
              /*<<+md5.js 106 10>>*/ hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b
             =
              /*<<+md5.js 107 10>>*/ hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a
             =
              /*<<+md5.js 108 10>>*/ hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d
             =
              /*<<+md5.js 109 10>>*/ hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c
             =
              /*<<+md5.js 110 10>>*/ hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b
             =
              /*<<+md5.js 111 10>>*/ hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a
             =
              /*<<+md5.js 112 10>>*/ hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d
             =
              /*<<+md5.js 113 10>>*/ hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c
             =
              /*<<+md5.js 114 10>>*/ hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b
             =
              /*<<+md5.js 115 10>>*/ hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a
             =
              /*<<+md5.js 116 10>>*/ hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d
             =
              /*<<+md5.js 117 10>>*/ hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c
             =
              /*<<+md5.js 118 10>>*/ hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b
             =
              /*<<+md5.js 119 10>>*/ hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a
             =
              /*<<+md5.js 121 10>>*/ ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d
             =
              /*<<+md5.js 122 10>>*/ ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c
             =
              /*<<+md5.js 123 10>>*/ ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b
             =
              /*<<+md5.js 124 10>>*/ ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a
             =
              /*<<+md5.js 125 10>>*/ ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d
             =
              /*<<+md5.js 126 10>>*/ ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c
             =
              /*<<+md5.js 127 10>>*/ ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b
             =
              /*<<+md5.js 128 10>>*/ ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a
             =
              /*<<+md5.js 129 10>>*/ ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d
             =
              /*<<+md5.js 130 10>>*/ ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c
             =
              /*<<+md5.js 131 10>>*/ ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b
             =
              /*<<+md5.js 132 10>>*/ ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a
             =
              /*<<+md5.js 133 10>>*/ ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d
             =
              /*<<+md5.js 134 10>>*/ ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c
             =
              /*<<+md5.js 135 10>>*/ ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b
             =
              /*<<+md5.js 136 10>>*/ ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] =  /*<<+md5.js 138 13>>*/ add(a,w[0]);
             w[1] =  /*<<+md5.js 139 13>>*/ add(b,w[1]);
             w[2] =  /*<<+md5.js 140 13>>*/ add(c,w[2]);
             w[3] =  /*<<+md5.js 141 13>>*/ add(d,w[3])}
            /*<<+md5.js 58 4>>*/  /*<<+md5.js 144 10>>*/ var t=new Array(16);
            /*<<+md5.js 145 4>>*/ for
            ( /*<<+md5.js 145 15>>*/ var i=0;i < 4;i++)
             /*<<+md5.js 146 6>>*/ for
             ( /*<<+md5.js 146 17>>*/ var j=0;j < 4;j++)
             t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
            /*<<+md5.js 148 4>>*/ return t /*<<+md5.js 149 2>>*/ }
          /*<<+md5.js 151 2>>*/ return function(s,ofs,len)
          { /*<<+md5.js 154 4>>*/  /*<<+md5.js 154 12>>*/ var buf=[];
            /*<<+md5.js 155 4>>*/ switch(s.t & 6)
            {default: /*<<+md5.js 157 6>>*/ caml_convert_string_to_bytes(s);case 0:
               /*<<+md5.js 159 6>>*/  /*<<+md5.js 159 12>>*/ var b=s.c;
               /*<<+md5.js 160 6>>*/ for
               ( /*<<+md5.js 160 17>>*/ var i=0;i < len;i += 4)
                /*<<+md5.js 160 37>>*/ { /*<<+md5.js 161 8>>*/  /*<<+md5.js 161 14>>*/ var
                 j=
                  i + ofs;
                buf[i >> 2]
                =
                 /*<<+md5.js 163 10>>*/ b.charCodeAt(j)
                |
                 /*<<+md5.js 163 29>>*/ b.charCodeAt(j + 1)
                <<
                8
                |
                 /*<<+md5.js 164 11>>*/ b.charCodeAt(j + 2)
                <<
                16
                |
                 /*<<+md5.js 164 39>>*/ b.charCodeAt(j + 3)
                <<
                24}
               /*<<+md5.js 166 6>>*/ for(;i < len;i++)
               buf[i >> 2]
               |=
                /*<<+md5.js 166 40>>*/ b.charCodeAt(i + ofs)
               <<
               8
               *
               (i & 3);
               /*<<+md5.js 167 6>>*/ break;
             case 4:
               /*<<+md5.js 169 6>>*/  /*<<+md5.js 169 12>>*/ var a=s.c;
               /*<<+md5.js 170 6>>*/ for
               ( /*<<+md5.js 170 17>>*/ var i=0;i < len;i += 4)
                /*<<+md5.js 170 37>>*/ { /*<<+md5.js 171 8>>*/  /*<<+md5.js 171 14>>*/ var
                 j=
                  i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
               /*<<+md5.js 174 6>>*/ for(;i < len;i++)
               buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
            /*<<+md5.js 176 4>>*/ return  /*<<+md5.js 176 11>>*/ caml_string_of_array
                   ( /*<<+md5.js 176 32>>*/ md5(buf,len)) /*<<+md5.js 151 9>>*/ } /*<<+md5.js 42 21>>*/ }
       ();
     /*<<+md5.js 36 0>>*/ function caml_md5_string(s,ofs,len)
     { /*<<+md5.js 37 2>>*/ return  /*<<+md5.js 37 9>>*/ caml_md5_bytes
              ( /*<<+md5.js 37 24>>*/ caml_bytes_of_string(s),ofs,len) /*<<+md5.js 38 0>>*/ }
     /*<<+io.js 24 0>>*/ function caml_sys_close(fd)
     {delete caml_global_data.fds[fd];
       /*<<+io.js 26 2>>*/ return 0 /*<<+io.js 27 0>>*/ }
     /*<<+io.js 98 0>>*/  /*<<+io.js 98 21>>*/ var
     caml_ml_channels=
      new Array();
     /*<<+io.js 337 0>>*/ function caml_ml_flush(chanid)
     { /*<<+io.js 338 2>>*/  /*<<+io.js 338 11>>*/ var
       chan=
        caml_ml_channels[chanid];
       /*<<+io.js 339 2>>*/ if(! chan.opened)
        /*<<+io.js 339 20>>*/ caml_raise_sys_error
        ("Cannot flush a closed channel");
       /*<<+io.js 340 2>>*/ if(! chan.buffer || chan.buffer == "")
        /*<<+io.js 340 40>>*/ return 0;
       /*<<+io.js 341 2>>*/ if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
        /*<<+io.js 343 46>>*/ { /*<<+io.js 344 4>>*/  /*<<+io.js 344 15>>*/ var
         output=
          caml_global_data.fds[chan.fd].output;
         /*<<+io.js 345 4>>*/ switch(output.length)
         {case 2:
            /*<<+io.js 346 12>>*/ output(chanid,chan.buffer);
            /*<<+io.js 346 39>>*/ break;
          default: /*<<+io.js 347 13>>*/ output(chan.buffer)}}
      chan.buffer = "";
       /*<<+io.js 351 2>>*/ return 0 /*<<+io.js 352 0>>*/ }
     /*<<+io.js 172 0>>*/ function caml_ml_close_channel(chanid)
     { /*<<+io.js 173 2>>*/  /*<<+io.js 173 11>>*/ var
       chan=
        caml_ml_channels[chanid];
       /*<<+io.js 174 2>>*/ caml_ml_flush(chanid);
      chan.opened = false;
       /*<<+io.js 176 2>>*/ chan.file.close();
       /*<<+io.js 177 2>>*/ caml_sys_close(chan.fd);
       /*<<+io.js 178 2>>*/ return 0 /*<<+io.js 179 0>>*/ }
     /*<<+io.js 212 0>>*/ function caml_ml_refill_input(chan)
     { /*<<+io.js 213 2>>*/ var
        /*<<+io.js 213 10>>*/ str= /*<<+io.js 213 12>>*/ chan.refill(),
        /*<<+io.js 214 14>>*/ str_len=
         /*<<+io.js 214 16>>*/ caml_ml_string_length(str);
       /*<<+io.js 215 2>>*/ if(str_len == 0)chan.refill = null;
       /*<<+io.js 216 2>>*/ chan.file.write
       ( /*<<+io.js 216 18>>*/ chan.file.length(),str,0,str_len);
       /*<<+io.js 217 2>>*/ return str_len /*<<+io.js 218 0>>*/ }
     /*<<+io.js 231 0>>*/ function caml_ml_input(chanid,s,i,l)
     { /*<<+io.js 232 2>>*/ var
        /*<<+io.js 232 11>>*/ chan=caml_ml_channels[chanid],
        /*<<+io.js 233 9>>*/ l2=
         /*<<+io.js 233 11>>*/ chan.file.length()
        -
        chan.offset;
       /*<<+io.js 234 2>>*/ if(l2 == 0 && chan.refill != null)
       l2 =  /*<<+io.js 234 43>>*/ caml_ml_refill_input(chan);
       /*<<+io.js 235 2>>*/ if(l2 < l)l = l2;
       /*<<+io.js 236 2>>*/ chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
       /*<<+io.js 238 2>>*/ return l /*<<+io.js 239 0>>*/ }
     /*<<+io.js 31 0>>*/ function caml_std_output(chanid,s)
     { /*<<+io.js 32 2>>*/ var
        /*<<+io.js 32 11>>*/ chan=caml_ml_channels[chanid],
        /*<<+io.js 33 10>>*/ str=
         /*<<+io.js 33 12>>*/ caml_string_of_jsbytes(s),
        /*<<+io.js 34 11>>*/ slen=
         /*<<+io.js 34 13>>*/ caml_ml_string_length(str);
       /*<<+io.js 35 2>>*/ chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
       /*<<+io.js 37 2>>*/ return 0 /*<<+io.js 38 0>>*/ }
     /*<<+jslib.js 115 0>>*/ function js_print_stderr(s)
     { /*<<+jslib.js 116 2>>*/ var
        /*<<+jslib.js 116 8>>*/ s=
         /*<<+jslib.js 116 10>>*/ caml_utf16_of_utf8(s),
        /*<<+jslib.js 117 8>>*/ g=joo_global_object;
       /*<<+jslib.js 118 2>>*/ if
       (g.process && g.process.stdout && g.process.stdout.write)
        /*<<+jslib.js 118 63>>*/  /*<<+jslib.js 119 4>>*/ g.process.stderr.write
        (s);
      else
        /*<<+jslib.js 120 9>>*/ { /*<<+jslib.js 123 4>>*/ if
         ( /*<<+jslib.js 123 7>>*/ s.charCodeAt(s.length - 1) == 10)
         s =  /*<<+jslib.js 124 10>>*/ s.substr(0,s.length - 1);
         /*<<+jslib.js 125 4>>*/  /*<<+jslib.js 125 10>>*/ var v=g.console;
        v && v.error &&  /*<<+jslib.js 126 20>>*/ v.error(s)} /*<<+jslib.js 128 0>>*/ }
     /*<<+jslib.js 99 0>>*/ function js_print_stdout(s)
     { /*<<+jslib.js 100 2>>*/ var
        /*<<+jslib.js 100 8>>*/ s=
         /*<<+jslib.js 100 10>>*/ caml_utf16_of_utf8(s),
        /*<<+jslib.js 101 8>>*/ g=joo_global_object;
       /*<<+jslib.js 102 2>>*/ if
       (g.process && g.process.stdout && g.process.stdout.write)
        /*<<+jslib.js 102 63>>*/  /*<<+jslib.js 103 4>>*/ g.process.stdout.write
        (s);
      else
        /*<<+jslib.js 104 9>>*/ { /*<<+jslib.js 107 4>>*/ if
         ( /*<<+jslib.js 107 7>>*/ s.charCodeAt(s.length - 1) == 10)
         s =  /*<<+jslib.js 108 10>>*/ s.substr(0,s.length - 1);
         /*<<+jslib.js 109 4>>*/  /*<<+jslib.js 109 10>>*/ var v=g.console;
        v && v.log &&  /*<<+jslib.js 110 19>>*/ v.log(s)} /*<<+jslib.js 112 0>>*/ }
     /*<<+io.js 47 0>>*/ function caml_sys_open_internal
     (idx,output,file,flags)
     { /*<<+io.js 48 2>>*/ if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
       /*<<+io.js 50 2>>*/  /*<<+io.js 50 11>>*/ var info={};
      info.file = file;
      info.offset = flags.append? /*<<+io.js 52 29>>*/ file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
       /*<<+io.js 56 2>>*/ if
       (! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
       /*<<+io.js 58 2>>*/ return idx /*<<+io.js 59 0>>*/ }
     /*<<+io.js 60 0>>*/ function caml_sys_open(name,flags,_perms)
     { /*<<+io.js 61 2>>*/  /*<<+io.js 61 8>>*/ var f={};
       /*<<+io.js 62 2>>*/ while(flags)
        /*<<+io.js 62 14>>*/ { /*<<+io.js 63 4>>*/ switch(flags[1])
         {case 0:f.rdonly = 1; /*<<+io.js 64 25>>*/ break;
          case 1:f.wronly = 1; /*<<+io.js 65 25>>*/ break;
          case 2:f.append = 1; /*<<+io.js 66 25>>*/ break;
          case 3:f.create = 1; /*<<+io.js 67 25>>*/ break;
          case 4:f.truncate = 1; /*<<+io.js 68 27>>*/ break;
          case 5:f.excl = 1; /*<<+io.js 69 24>>*/ break;
          case 6:f.binary = 1; /*<<+io.js 70 25>>*/ break;
          case 7:f.text = 1; /*<<+io.js 71 23>>*/ break;
          case 8:f.nonblock = 1; /*<<+io.js 72 27>>*/ break
          }
        flags = flags[2]}
       /*<<+io.js 76 2>>*/ if(f.rdonly && f.wronly)
        /*<<+io.js 77 4>>*/ caml_raise_sys_error
        ( /*<<+io.js 77 25>>*/ caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
       /*<<+io.js 78 2>>*/ if(f.text && f.binary)
        /*<<+io.js 79 4>>*/ caml_raise_sys_error
        ( /*<<+io.js 79 25>>*/ caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
       /*<<+io.js 61 2>>*/ var
        /*<<+io.js 80 11>>*/ root=
         /*<<+io.js 80 13>>*/ resolve_fs_device(name),
        /*<<+io.js 81 11>>*/ file=
         /*<<+io.js 81 13>>*/ root.device.open(root.rest,f),
        /*<<+io.js 82 10>>*/ idx=
        caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
       /*<<+io.js 83 2>>*/ return  /*<<+io.js 83 9>>*/ caml_sys_open_internal
              (idx + 1,caml_std_output,file,f) /*<<+io.js 84 0>>*/ }
     /*<<+io.js 85 0>>*/ caml_sys_open_internal
     (0,
      caml_std_output,
      new MlFakeFile( /*<<+io.js 85 57>>*/ caml_create_bytes(0)));
     /*<<+io.js 86 0>>*/ caml_sys_open_internal
     (1,
      js_print_stdout,
      new MlFakeFile( /*<<+io.js 86 57>>*/ caml_create_bytes(0)));
     /*<<+io.js 87 0>>*/ caml_sys_open_internal
     (2,
      js_print_stderr,
      new MlFakeFile( /*<<+io.js 87 57>>*/ caml_create_bytes(0)));
     /*<<+io.js 132 0>>*/ function caml_ml_open_descriptor_in(fd)
     { /*<<+io.js 133 2>>*/  /*<<+io.js 133 11>>*/ var
       data=
        caml_global_data.fds[fd];
       /*<<+io.js 134 2>>*/ if(data.flags.wronly)
        /*<<+io.js 134 24>>*/ caml_raise_sys_error
        ("fd " + fd + " is writeonly");
       /*<<+io.js 133 2>>*/  /*<<+io.js 136 14>>*/ var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
       /*<<+io.js 145 2>>*/ return channel.fd /*<<+io.js 146 0>>*/ }
     /*<<+io.js 115 0>>*/ function caml_ml_open_descriptor_out(fd)
     { /*<<+io.js 116 2>>*/  /*<<+io.js 116 11>>*/ var
       data=
        caml_global_data.fds[fd];
       /*<<+io.js 117 2>>*/ if(data.flags.rdonly)
        /*<<+io.js 117 24>>*/ caml_raise_sys_error
        ("fd " + fd + " is readonly");
       /*<<+io.js 116 2>>*/  /*<<+io.js 118 14>>*/ var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
       /*<<+io.js 127 2>>*/ return channel.fd /*<<+io.js 128 0>>*/ }
     /*<<+io.js 102 0>>*/ function caml_ml_out_channels_list()
     { /*<<+io.js 103 2>>*/  /*<<+io.js 103 8>>*/ var l=0;
       /*<<+io.js 104 2>>*/ for
       ( /*<<+io.js 104 12>>*/ var c=0;c < caml_ml_channels.length;c++)
        /*<<+io.js 104 50>>*/ if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
       /*<<+io.js 108 2>>*/ return l /*<<+io.js 109 0>>*/ }
     /*<<+mlBytes.js 794 0>>*/ function caml_string_of_bytes(s)
     { /*<<+mlBytes.js 794 35>>*/ return s /*<<+mlBytes.js 794 44>>*/ }
     /*<<+io.js 360 0>>*/ function caml_ml_output_bytes
     (chanid,buffer,offset,len)
     { /*<<+io.js 361 2>>*/  /*<<+io.js 361 11>>*/ var
       chan=
        caml_ml_channels[chanid];
       /*<<+io.js 362 2>>*/ if(! chan.opened)
        /*<<+io.js 362 20>>*/ caml_raise_sys_error
        ("Cannot output to a closed channel");
       /*<<+io.js 361 2>>*/ var bytes;
       /*<<+io.js 364 2>>*/ if
       (offset
        ==
        0
        &&
         /*<<+io.js 364 20>>*/ caml_ml_bytes_length(buffer)
        ==
        len)
       bytes = buffer;
      else
        /*<<+io.js 366 7>>*/ {bytes
        =
         /*<<+io.js 367 12>>*/ caml_create_bytes(len);
         /*<<+io.js 368 4>>*/ caml_blit_bytes(buffer,offset,bytes,0,len)}
       /*<<+io.js 361 2>>*/ var
        /*<<+io.js 370 13>>*/ string=
         /*<<+io.js 370 15>>*/ caml_string_of_bytes(bytes),
        /*<<+io.js 371 15>>*/ jsstring=
         /*<<+io.js 371 17>>*/ caml_jsbytes_of_string(string),
        /*<<+io.js 372 9>>*/ id=
         /*<<+io.js 372 11>>*/ jsstring.lastIndexOf("\n");
       /*<<+io.js 373 2>>*/ if(id < 0)
       chan.buffer += jsstring;
      else
        /*<<+io.js 375 7>>*/ {chan.buffer
        +=
         /*<<+io.js 376 17>>*/ jsstring.substr(0,id + 1);
         /*<<+io.js 377 4>>*/ caml_ml_flush(chanid);
        chan.buffer +=  /*<<+io.js 378 19>>*/ jsstring.substr(id + 1)}
       /*<<+io.js 380 2>>*/ return 0 /*<<+io.js 381 0>>*/ }
     /*<<+io.js 385 0>>*/ function caml_ml_output(chanid,buffer,offset,len)
     { /*<<+io.js 386 2>>*/ return  /*<<+io.js 386 9>>*/ caml_ml_output_bytes
              (chanid,
                /*<<+io.js 386 37>>*/ caml_bytes_of_string(buffer),
               offset,
               len) /*<<+io.js 387 0>>*/ }
     /*<<+io.js 392 0>>*/ function caml_ml_output_char(chanid,c)
     { /*<<+io.js 393 2>>*/  /*<<+io.js 393 8>>*/ var
       s=
         /*<<+io.js 393 10>>*/ caml_string_of_jsbytes
         ( /*<<+io.js 393 33>>*/ String.fromCharCode(c));
       /*<<+io.js 394 2>>*/ caml_ml_output(chanid,s,0,1);
       /*<<+io.js 395 2>>*/ return 0 /*<<+io.js 396 0>>*/ }
     /*<<+io.js 93 0>>*/ function caml_ml_set_channel_name()
     { /*<<+io.js 94 2>>*/ return 0 /*<<+io.js 95 0>>*/ }
     /*<<+ints.js 107 0>>*/ function caml_mod(x,y)
     { /*<<+ints.js 108 2>>*/ if(y == 0)
        /*<<+ints.js 108 14>>*/ caml_raise_zero_divide();
       /*<<+ints.js 109 2>>*/ return x % y /*<<+ints.js 110 0>>*/ }
     /*<<+compare.js 244 0>>*/ function caml_notequal(x,y)
     { /*<<+compare.js 244 32>>*/ return +
             ( /*<<+compare.js 244 41>>*/ caml_compare_val(x,y,false) != 0) /*<<+compare.js 244 76>>*/ }
     /*<<+obj.js 83 0>>*/ function caml_obj_make_forward(b,v)
     {b[0] = 250;
      b[1] = v;
       /*<<+obj.js 86 2>>*/ return 0 /*<<+obj.js 87 0>>*/ }
     /*<<+obj.js 31 0>>*/ function caml_obj_tag(x)
     { /*<<+obj.js 32 2>>*/ if(x instanceof Array && x[0] == x[0] >>> 0)
        /*<<+obj.js 33 4>>*/ return x[0];
      else
        /*<<+obj.js 34 7>>*/ if( /*<<+obj.js 34 11>>*/ caml_is_ml_bytes(x))
         /*<<+obj.js 35 4>>*/ return 252;
       else
         /*<<+obj.js 36 7>>*/ if( /*<<+obj.js 36 11>>*/ caml_is_ml_string(x))
          /*<<+obj.js 37 4>>*/ return 252;
        else
          /*<<+obj.js 38 7>>*/ if
          (x instanceof Function || typeof x == "function")
           /*<<+obj.js 39 4>>*/ return 247;
         else
           /*<<+obj.js 40 7>>*/ if(x && x.caml_custom)
            /*<<+obj.js 41 4>>*/ return 255;
          else
            /*<<+obj.js 43 4>>*/ return 1000 /*<<+obj.js 44 0>>*/ }
     /*<<+stdlib.js 68 0>>*/ function caml_register_global(n,v,name_opt)
     { /*<<+stdlib.js 69 2>>*/ if(name_opt && joo_global_object.toplevelReloc)
       n =  /*<<+stdlib.js 70 8>>*/ joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
       /*<<+stdlib.js 72 2>>*/ if(name_opt)caml_global_data[name_opt] = v /*<<+stdlib.js 73 0>>*/ }
     /*<<+stdlib.js 48 0>>*/  /*<<+stdlib.js 48 22>>*/ var
     caml_named_values=
      {};
     /*<<+stdlib.js 52 0>>*/ function caml_register_named_value(nm,v)
     {caml_named_values[ /*<<+stdlib.js 53 20>>*/ caml_jsbytes_of_string(nm)]
      =
      v;
       /*<<+stdlib.js 54 2>>*/ return 0 /*<<+stdlib.js 55 0>>*/ }
     /*<<+mlBytes.js 531 0>>*/ function caml_bytes_equal(s1,s2)
     { /*<<+mlBytes.js 532 2>>*/ if(s1 === s2)
        /*<<+mlBytes.js 532 16>>*/ return 1;
      s1.t
      &
      6
      &&
       /*<<+mlBytes.js 533 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<+mlBytes.js 534 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<+mlBytes.js 535 2>>*/ return s1.c == s2.c?1:0 /*<<+mlBytes.js 536 0>>*/ }
     /*<<+mlBytes.js 774 0>>*/ function caml_string_equal(s1,s2)
     { /*<<+mlBytes.js 775 2>>*/ return  /*<<+mlBytes.js 775 9>>*/ caml_bytes_equal
              (s1,s2) /*<<+mlBytes.js 776 0>>*/ }
     /*<<+mlBytes.js 206 0>>*/ function caml_string_bound_error()
     { /*<<+mlBytes.js 207 2>>*/ caml_invalid_argument("index out of bounds") /*<<+mlBytes.js 208 0>>*/ }
     /*<<+mlBytes.js 219 0>>*/ function caml_string_get(s,i)
     { /*<<+mlBytes.js 220 2>>*/ if
       (i >>> 0 >=  /*<<+mlBytes.js 220 17>>*/ caml_ml_string_length(s))
        /*<<+mlBytes.js 220 43>>*/ caml_string_bound_error();
       /*<<+mlBytes.js 221 2>>*/ return  /*<<+mlBytes.js 221 9>>*/ caml_string_unsafe_get
              (s,i) /*<<+mlBytes.js 222 0>>*/ }
     /*<<+mlBytes.js 540 0>>*/ function caml_string_notequal(s1,s2)
     { /*<<+mlBytes.js 540 40>>*/ return 1
             -
              /*<<+mlBytes.js 540 49>>*/ caml_string_equal(s1,s2) /*<<+mlBytes.js 540 76>>*/ }
     /*<<+sys.js 177 0>>*/ function caml_sys_const_backend_type()
     { /*<<+sys.js 178 2>>*/ return [0,
               /*<<+sys.js 178 13>>*/ caml_string_of_jsbytes("js_of_ocaml")] /*<<+sys.js 179 0>>*/ }
     /*<<+sys.js 166 0>>*/ function caml_sys_const_max_wosize()
     { /*<<+sys.js 166 40>>*/ return 0x7FFFFFFF / 4 | 0 /*<<+sys.js 166 66>>*/ }
     /*<<+sys.js 183 0>>*/ function caml_sys_get_config()
     { /*<<+sys.js 184 2>>*/ return [0,
               /*<<+sys.js 184 13>>*/ caml_string_of_jsbytes("Unix"),
              32,
              0] /*<<+sys.js 185 0>>*/ }
     /*<<+fail.js 62 0>>*/ function caml_raise_not_found()
     { /*<<+fail.js 63 2>>*/ caml_raise_constant(caml_global_data.Not_found) /*<<+fail.js 63 51>>*/ }
     /*<<+sys.js 48 0>>*/ function caml_sys_getenv(name)
     { /*<<+sys.js 49 2>>*/ var
        /*<<+sys.js 49 8>>*/ g=joo_global_object,
        /*<<+sys.js 50 8>>*/ n=
         /*<<+sys.js 50 10>>*/ caml_jsstring_of_string(name);
       /*<<+sys.js 52 2>>*/ if
       (g.process && g.process.env && g.process.env[n] != undefined)
        /*<<+sys.js 55 4>>*/ return  /*<<+sys.js 55 11>>*/ caml_string_of_jsstring
               (g.process.env[n]);
       /*<<+sys.js 56 2>>*/ if
       (joo_global_object.jsoo_static_env
        &&
        joo_global_object.jsoo_static_env[n])
        /*<<+sys.js 58 4>>*/ return  /*<<+sys.js 58 11>>*/ caml_string_of_jsstring
               (joo_global_object.jsoo_static_env[n]);
       /*<<+sys.js 59 2>>*/ caml_raise_not_found() /*<<+sys.js 60 0>>*/ }
     /*<<+sys.js 148 0>>*/ function caml_sys_random_seed()
     { /*<<+sys.js 149 2>>*/ var
        /*<<+sys.js 149 10>>*/ now=
         /*<<+sys.js 149 12>>*/ new Date().getTime(),
        /*<<+sys.js 150 8>>*/ x=
        now
        ^
        0xffffffff
        *
         /*<<+sys.js 150 25>>*/ Math.random();
       /*<<+sys.js 151 2>>*/ return [0,x] /*<<+sys.js 152 0>>*/ }
     /*<<+jslib.js 83 0>>*/ function caml_trampoline(res)
     { /*<<+jslib.js 84 2>>*/  /*<<+jslib.js 84 8>>*/ var c=1;
       /*<<+jslib.js 85 2>>*/ while(res && res.joo_tramp)
        /*<<+jslib.js 85 29>>*/ {res
        =
         /*<<+jslib.js 86 10>>*/ res.joo_tramp.apply(null,res.joo_args);
        c++}
       /*<<+jslib.js 89 2>>*/ return res /*<<+jslib.js 90 0>>*/ }
     /*<<+jslib.js 93 0>>*/ function caml_trampoline_return(f,args)
     { /*<<+jslib.js 94 2>>*/ return {joo_tramp:f,joo_args:args} /*<<+jslib.js 95 0>>*/ }
     /*<<+fail.js 24 0>>*/ function caml_return_exn_constant(tag)
     { /*<<+fail.js 24 42>>*/ return tag /*<<+fail.js 24 54>>*/ }
     /*<<+stdlib.js 59 0>>*/ function caml_named_value(nm)
     { /*<<+stdlib.js 60 2>>*/ return caml_named_values[nm] /*<<+stdlib.js 61 0>>*/ }
     /*<<+jslib.js 141 0>>*/ function caml_wrap_exception(e)
     { /*<<+jslib.js 142 2>>*/ if(e instanceof Array)
        /*<<+jslib.js 142 25>>*/ return e;
       /*<<+jslib.js 144 2>>*/ if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
         /*<<+jslib.js 147 8>>*/ e.message.match(/maximum call stack/i))
        /*<<+jslib.js 148 4>>*/ return  /*<<+jslib.js 148 11>>*/ caml_return_exn_constant
               (caml_global_data.Stack_overflow);
       /*<<+jslib.js 150 2>>*/ if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
         /*<<+jslib.js 153 8>>*/ e.message.match(/too much recursion/i))
        /*<<+jslib.js 154 4>>*/ return  /*<<+jslib.js 154 11>>*/ caml_return_exn_constant
               (caml_global_data.Stack_overflow);
       /*<<+jslib.js 156 2>>*/ if
       (e instanceof joo_global_object.Error
        &&
         /*<<+jslib.js 156 45>>*/ caml_named_value("jsError"))
        /*<<+jslib.js 157 4>>*/ return [0,
                /*<<+jslib.js 157 14>>*/ caml_named_value("jsError"),
               e];
       /*<<+jslib.js 159 2>>*/ return [0,
              caml_global_data.Failure,
               /*<<+jslib.js 159 37>>*/ caml_string_of_jsstring
               ( /*<<+jslib.js 159 62>>*/ String(e))] /*<<+jslib.js 160 0>>*/ }
     /*<<+unix.js 2 0>>*/ function unix_gettimeofday()
     { /*<<+unix.js 3 2>>*/ return  /*<<+unix.js 3 9>>*/ new Date().getTime()
             /
             1000 /*<<+unix.js 4 0>>*/ }
     /*<<+sys.js 207 0>>*/ function unix_inet_addr_of_string()
     { /*<<+sys.js 207 38>>*/ return 0 /*<<+sys.js 207 47>>*/ }
     /*<<?>>*/ function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
     /*<<?>>*/ function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
     /*<<?>>*/ function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
     /*<<?>>*/ function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
     /*<<?>>*/ function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    caml_create_file
     ("/static/buildings_init.json",
      '{\n    "buildings": [\n        {\n            "name": "House",\n            "cost": 50,\n            "maintenance": 0,\n            "output": {},\n            "tax": 10,\n            "defense": 1,\n            "resource_dependency": [],\n            "population_dependency": 0,\n            "housing": 5,\n            "is_final_building": false\n        },\n        {\n            "name": "Nice Apartment",\n            "cost": 150,\n            "maintenance": 0,\n            "output": {},\n            "tax": 20,\n            "defense": 2,\n            "resource_dependency": [\n                {\n                    "amount": 5,\n                    "name": "electricity"\n                }\n            ],\n            "population_dependency": 0,\n            "housing": 10,\n            "is_final_building": false\n        },\n        {\n            "name": "Oats Plantation",\n            "cost": 50,\n            "maintenance": 0,\n            "output": {\n                "amount": 20,\n                "name": "food"\n            },\n            "tax": 3,\n            "defense": 1,\n            "resource_dependency": [],\n            "population_dependency": 3,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "Coal Mine",\n            "cost": 200,\n            "maintenance": 0,\n            "output": {\n                "amount": 15,\n                "name": "coal"\n            },\n            "tax": 0,\n            "defense": 0,\n            "resource_dependency": [],\n            "population_dependency": 3,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "Power Plant",\n            "cost": 200,\n            "maintenance": 5,\n            "output": {\n                "amount": 30,\n                "name": "electricity"\n            },\n            "tax": 0,\n            "defense": 3,\n            "resource_dependency": [\n                {\n                    "amount": 10,\n                    "name": "coal"\n                }\n            ],\n            "population_dependency": 5,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "Mine",\n            "cost": 200,\n            "maintenance": 0,\n            "output": {\n                "amount": 5,\n                "name": "iron"\n            },\n            "tax": 0,\n            "defense": 5,\n            "resource_dependency": [\n                {\n                    "amount": 5,\n                    "name": "electricity"\n                }\n            ],\n            "population_dependency": 5,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "Steel Mill",\n            "cost": 50,\n            "maintenance": 5,\n            "output": {\n                "amount": 5,\n                "name": "steel"\n            },\n            "tax": 0,\n            "defense": 0,\n            "resource_dependency": [\n                {\n                    "amount": 5,\n                    "name": "electricity"\n                },\n                {\n                    "amount": 5,\n                    "name": "iron"\n                },\n                {\n                    "amount": 5,\n                    "name": "coal"\n                }\n            ],\n            "population_dependency": 10,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "Canned Oats Factory",\n            "cost": 50,\n            "maintenance": 10,\n            "output": {\n                "amount": 30,\n                "name": "food"\n            },\n            "tax": 0,\n            "defense": 0,\n            "resource_dependency": [\n                {\n                    "amount": 5,\n                    "name": "electricity"\n                },\n                {\n                    "amount": 10,\n                    "name": "food"\n                }\n            ],\n            "population_dependency": 7,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "Steel Market",\n            "cost": 200,\n            "maintenance": 5,\n            "output": {\n                "amount": 75,\n                "name": "money"\n            },\n            "tax": 0,\n            "defense": 0,\n            "resource_dependency": [\n                {\n                    "amount": 5,\n                    "name": "steel"\n                }\n            ],\n            "population_dependency": 5,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "Iron Market",\n            "cost": 100,\n            "maintenance": 3,\n            "output": {\n                "amount": 25,\n                "name": "money"\n            },\n            "tax": 1,\n            "defense": 0,\n            "resource_dependency": [\n                {\n                    "amount": 5,\n                    "name": "iron"\n                }\n            ],\n            "population_dependency": 5,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "Canned Oats Market",\n            "cost": 150,\n            "maintenance": 5,\n            "output": {\n                "amount": 30,\n                "name": "money"\n            },\n            "tax": 1,\n            "defense": 0,\n            "resource_dependency": [\n                {\n                    "amount": 5,\n                    "name": "food"\n                }\n            ],\n            "population_dependency": 5,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "Barrack",\n            "cost": 200,\n            "maintenance": 5,\n            "output": {\n                "amount": 0,\n                "name": "money"\n            },\n            "tax": 0,\n            "defense": 25,\n            "resource_dependency": [\n                {\n                    "amount": 5,\n                    "name": "electricity"\n                }\n            ],\n            "population_dependency": 10,\n            "housing": 0,\n            "is_final_building": false\n        },\n        {\n            "name": "The Wonder",\n            "cost": 20000,\n            "maintenance": 0,\n            "output": {\n                "amount": 50,\n                "name": "money"\n            },\n            "tax": 0,\n            "defense": 100,\n            "resource_dependency": [],\n            "population_dependency": 50,\n            "housing": 0,\n            "is_final_building": true\n        }\n    ]\n}');
    caml_create_file
     ("/static/events_init.json",
      '{\n    "easy": [\n        {\n            "text": "The camel farmers have collected 50 extra units of oat for harvest season.",\n            "resource": [\n                {\n                    "amount": 10,\n                    "name": "food"\n                }\n            ],\n            "defense": 0\n        },\n        {\n            "text": "Kind camel citizens has donated 100 units of money for national defense.",\n            "resource": [\n                {\n                    "amount": 100,\n                    "name": "money"\n                }\n            ],\n            "defense": 0\n        },\n        {\n            "text": "An Earthquake has caused power plant leaks and the city lost 50 units of electricity.",\n            "resource": [\n                {\n                    "amount": -20,\n                    "name": "electricity"\n                }\n            ],\n            "defense": 0\n        }\n    ],\n    "medium": [\n        {\n            "text": "Camel miners have found 60 units of iron in an ancient underground ruin. ",\n            "resource": [\n                {\n                    "amount": 60,\n                    "name": "iron"\n                }\n            ],\n            "defense": 0\n        },\n        {\n            "text": "Python hackers have stolen 500 units of money from the treasury.",\n            "resource": [\n                {\n                    "amount": -500,\n                    "name": "money"\n                }\n            ],\n            "defense": 0\n        },\n        {\n            "text": "The planatation was raided by hungry alpacas and 300 units of oats were damaged.",\n            "resource": [\n                {\n                    "amount": -300,\n                    "name": "food"\n                }\n            ],\n            "defense": 0\n        }\n    ],\n    "hard": [\n        {\n            "text": "The king of Llama Land has offered 2000 units of money and 100 units of oats to camel city. ",\n            "resource": [\n                {\n                    "amount": 2000,\n                    "name": "money"\n                },\n                {\n                    "amount": 1000,\n                    "name": "oat"\n                }\n            ],\n            "defense": 0\n        },\n        {\n            "text": "A hurricane has swept the city, building defense dropped by 2 units, 1000 units of iron and 1000 units of oats were lost. ",\n            "resource": [\n                {\n                    "amount": -1000,\n                    "name": "iron"\n                },\n                {\n                    "amount": -1000,\n                    "name": "oat"\n                }\n            ],\n            "defense": 1\n        },\n        {\n            "text": "The imperials have planned a large-scale invasion, building defense dropped by 2 units and 2000 units of money were stolen from the treasury. ",\n            "resource": [\n                {\n                    "amount": -2000,\n                    "name": "money"\n                }\n            ],\n            "defense": 2\n        }\n    ]\n}\n');
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     mode=[0,0,[0,7,0]],
     dummy_pos=[0,caml_string_of_jsbytes(""),0,0,-1],
     zero_pos=[0,caml_string_of_jsbytes(""),1,0,0],
     opt=[0,103],
     ocaml_lex_tables=
      [0,
       caml_string_of_jsbytes
        ("\0\0\xec\xff\xed\xff\x03\0\xef\xff\x10\0\xf2\xff\xf3\xff\xf4\xff\xf5\xff\0\0\x1f\0\xf9\xffU\0\x01\0\0\0\0\0\x01\0\0\0\x01\0\x02\0\xff\xff\0\0\0\0\x03\0\xfe\xff\x01\0\x04\0\xfd\xff\x0b\0\xfc\xff\x03\0\x01\0\x03\0\x02\0\x03\0\0\0\xfb\xff\x15\0a\0\n\0\x16\0\x14\0\x10\0\x16\0\f\0\b\0\xfa\xffw\0\x81\0\x8b\0\xa1\0\xab\0\xb5\0\xc1\0\xd1\0\xf0\xff\x0b\0&\0\xfc\xffA\0\xfe\xff\xff\xffn\0\xfc\xff\xa3\0\xfe\xff\xff\xff\xea\0\xf7\xff\xf8\xff0\x01\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xffG\x01~\x01\x95\x01\xf9\xff'\0\xfd\xff\xfe\xff&\0\xbb\x01\xd2\x01\xf8\x01\x0f\x02\xff\xff\xdc\0\xfd\xff\xff\xff\xf5\0'\x02m\x02\x0e\x01X\x02\xa4\x02\xbb\x02\xe1\x02\r\0\xfc\xff\xfd\xff\xfe\xff\xff\xff\x0e\0\xfd\xff\xfe\xff\xff\xff\x1e\0\xfd\xff\xfe\xff\xff\xff\x0f\0\xfd\xff\xfe\xff\xff\xff\x11\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\x13\0\xfc\xff\xfd\xff\xfe\xff\x0f\0\xff\xff\x10\0\xff\xff\b\x01\x05\0\xfd\xff\x17\0\xfe\xff\x14\0\xff\xff.\0\xfd\xff\xfe\xff*\x004\x005\0\xff\xff5\x000\0[\0\\\0\xff\xff\x1b\x01\xfa\xff\xfb\xff\x89\0h\0Y\0X\0j\0\xff\xff\x8f\0\x89\0\xb1\0\xfe\xff\xb7\0\xa8\0\xa6\0\xb7\0\x02\0\xfd\xff\xb1\0\xac\0\xbb\0\x04\0\xfc\xff5\x02\xfb\xff\xfc\xff\xfd\xffg\x01\xff\xff\xf8\x02\xfe\xff\x06\x03\x1e\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff(\x032\x03J\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff=\x03T\x03l\x03\xf9\xff\xfa\xff\xfb\xff\xf4\0x\x03\x8e\x03\xb3\0\xc2\0\x0f\0\xff\xff\xbe\0\xbc\0\xbb\0\xc1\0\xb7\0\xb3\0\xfe\xff\xbf\0\xc9\0\xc8\0\xc4\0\xcb\0\xc1\0\xbd\0\xfd\xff\x9d\x03_\x03\xae\x03\xc4\x03\xce\x03\xd8\x03\xe4\x03\xef\x03<\0\xfd\xff\xfe\xff\xff\xff\f\x04\xfc\xff\xfd\xffW\x04\xff\xff\x91\x04\xfc\xff\xfd\xff\xdd\x04\xff\xff\xe5\0\xfd\xff\xfe\xff\xff\xff\xe7\0\xfd\xff\xfe\xff\xff\xff\x02\0\xff\xff\x12\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\"\x01\xfd\xff\xfe\xff\xff\xff\0\0\xff\xff\x03\0\xfe\xff\xff\xff&\x01\xfc\xff\xfd\xff\xfe\xff\xff\xffx\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\xd0\0\xfd\xff\xfe\xff\xff\xff\xd3\0\xfd\xff\xfe\xff\xff\xff\xbd\0\xff\xff\x8f\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\r\x01\xfd\xff\xfe\xff\xff\xff_\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff2\x01\xfd\xff\xfe\xff\xff\xff\x1a\x01\xfd\xff\xfe\xff\xff\xff\xe9\0\xfd\xff\xfe\xff\xff\xff\xde\0\xfd\xff\xfe\xff\xff\xffO\x05\xed\xff\xee\xff\n\0\xf0\xff,\x01\xf3\xff\xf4\xff\xf5\xff\xf6\xff=\x01\x02\x04\xf9\xff-\x05\xd1\0\xe4\0\xd3\0\xe8\0\xe1\0\xdf\0\xf0\0\xff\xff\xeb\0\xea\0\b\x01\xfe\xff\x04\x01\x17\x01\xfd\xff6\x01\xfc\xff\x1f\x01\x1d\x01 \x01'\x011\x01-\x01\xfb\xff9\x01R\x01P\x01N\x01T\x01J\x01V\x01\xfa\xffn\x05\f\x04{\x05\x9b\x05\xa5\x05\xb1\x05\xbb\x05\xc5\x05\xf1\xff\xc7\x01M\x02\xfd\xff\xff\xff\x9a\x02\xde\x05\xd1\x05\x9b\x02\xef\x055\x06L\x06r\x06\x10\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x98\x06\xfc\xff\xfd\xff\xe3\x06\xff\xffU\x07\xf4\xff\xf5\xff\x0b\0\xf7\xffL\x02\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\x1f\x02\xf3\x053\x07d\x01s\x01h\x01\x85\x01v\x01\x9a\x01\xab\x01\xff\xff\xad\x01\xb0\x01\xbf\x01\xb9\x01\xbb\x01\xfd\x01\xe6\x01\xe6\x01\xea\x01\xf7\x01\xed\x01\xea\x01\t\x02\x13\x02\x13\x02\x0f\x02\x15\x02\x0b\x02\x07\x02\x8e\x06\x98\x06t\x07\xaa\x07\xb4\x07\xbe\x07\xc8\x07\xd2\x07\xf8\xffx\x02\xa7\x02\xfd\xff\xff\xff\xd8\x02R\x07\xdc\x07\xec\x02\xf4\x07:\bQ\bw\bL\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x9d\b\xfc\xff\xfd\xff\xe8\b\xff\xff\x87\x02x\x02\xfd\xffd\x02\xfe\xff\xb6\x02\xff\xff\x0b\x02\xff\xff\xcc\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff.\x02\xff\xff\xb2\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x17\0\xff\xff\xb7\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\xbb\x02\xfd\xff\xfe\xff\xff\xffy\x02\xfd\xff\xfe\xff\xff\xff\xb8\x02\xfc\xff\xfd\xff\xfe\xff\x13\0\xff\xff\x8c\x01\x92\x01\xff\xff\x96\x01\x97\x01\x9a\x01\xa8\x01\xaa\x01\xab\x01\xac\x01\xad\x01\xb5\x01\xb8\x01\xb9\x01\xbb\x01\xbf\x01\xc1\x01\xc3\x01\xc4\x01\xc5\x01\xc8\x01\xcb\x01\xdf\x01\xe1\x01\xe4\x01\xf9\x01\xfb\x01\x02\x02\x04\x02\x0b\x02\f\x02\r\x02\0\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\t\0\xff\xff\t\0\xff\xff\xff\xff\x0e\0\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x01\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\0\0\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\b\0\xff\xff\b\0\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\x01\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\x009\0<\0\0\0<\0\0\0\0\0A\0\0\0A\0\0\0\0\0F\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0T\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0^\0\0\0\0\0a\0\xff\xff\xff\xffa\0\xff\xff\xff\xff\xff\xff\xff\xffh\0\0\0\0\0\0\0\0\0m\0\0\0\0\0\0\0q\0\0\0\0\0\0\0u\0\0\0\0\0\0\0y\0\0\0\0\0\0\0\0\0\0\0~\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\x8a\0\0\0\x8e\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x9a\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xb2\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xbb\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc2\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc9\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xeb\0\0\0\0\0\0\0\xef\0\0\0\0\0\xff\xff\0\0\xf4\0\0\0\0\0\xff\xff\0\0\xf9\0\0\0\0\0\0\0\xfd\0\0\0\0\0\0\0\xff\xff\0\0\x03\x01\0\0\0\0\0\0\0\0\b\x01\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\x11\x01\0\0\0\0\0\0\0\0\x16\x01\0\0\0\0\0\0\0\0\0\0\x1c\x01\0\0\0\0\0\0 \x01\0\0\0\0\0\0\xff\xff\0\0&\x01\0\0\0\0\0\0\0\0+\x01\0\0\0\0\0\0/\x01\0\0\0\0\0\0\0\x004\x01\0\0\0\0\0\x008\x01\0\0\0\0\0\0<\x01\0\0\0\0\0\0@\x01\0\0\0\0\0\0C\x01\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0y\x01}\x01\0\0\0\0\x80\x01\xff\xff\xff\xff\x80\x01\xff\xff\xff\xff\xff\xff\xff\xff\x87\x01\0\0\0\0\0\0\0\0\x8c\x01\0\0\0\0\xff\xff\0\0\x90\x01\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xc1\x01\xc5\x01\0\0\0\0\xc8\x01\xff\xff\xff\xff\xc8\x01\xff\xff\xff\xff\xff\xff\xff\xff\xcf\x01\0\0\0\0\0\0\0\0\xd4\x01\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xdc\x01\0\0\xff\xff\0\0\xe2\x01\0\0\0\0\0\0\0\0\xff\xff\0\0\xe9\x01\0\0\0\0\0\0\0\0\xff\xff\0\0\xf0\x01\0\0\0\0\0\0\0\0\xf5\x01\0\0\0\0\0\0\xf9\x01\0\0\0\0\0\0\xfc\x01\0\0\0\0\0\0\xff\xff\0\0\x02\x02\x04\x02\0\0\x05\x02\x06\x02\x07\x02\b\x02\t\x02\n\x02\x0b\x02\f\x02\r\x02\x0e\x02\x0f\x02\x10\x02\x11\x02\x12\x02\x13\x02\x14\x02\x15\x02\x16\x02\x17\x02\x18\x02\x19\x02\x1a\x02\x1b\x02\x1c\x02\x1d\x02\x1e\x02\x1f\x02 \x02!\x02\x03\x02"),
       caml_string_of_jsbytes
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\x03\0\x03\0\x86\0\0\0\x03\0\0\0\x86\0E\x01\x92\x01\xff\xff\0\0E\x01\x92\x01\0\0\0\0\0\0\0\0\x7f\0\x8b\0\0\0\x03\0\0\0\f\0\x03\0\xaa\0\x86\0\xaf\0\0\0\x07\0\x0b\x01E\x01\x92\x01\x0e\x01\r\x001\0\x05\0\n\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\x008\0v\0\x06\0\x81\0\x82\x009\0\xed\x01\x89\0\0\x021\0\0\x000\0\x8a\0j\0>\0\x0e\0n\0i\0\0\x001\0\x0f\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1e\x000\0\b\0r\0\xd1\0\xec\0\0\x01\r\x01\x1d\0\x16\0\xff\xff0\x000\0\x11\0\x15\0\x19\0 \0!\0#\0\x17\0\x1b\0\x10\0\x1f\0\x1c\0\"\0\x13\0\x18\0\x12\0\x1a\0\x14\0$\0)\0%\x000\0\t\0*\0+\0,\0-\0.\0/\0=\0U\x000\0&\0'\0'\0'\0'\0'\0'\0'\0'\0'\x001\0C\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0V\0\x8f\0\xff\xff(\0\x90\0\x91\0\x92\x007\0\x94\x007\0\x95\x000\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff0\0\x96\0\x97\0\xa1\0B\0\x9e\x005\0\x9f\x005\0\xa0\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xa5\x003\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa2\0\xa3\0\xa6\0]\0\xff\xff\x02\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xffM\0g\0l\0t\0\x84\0\x86\0\x87\0\x80\0\x8b\0\x86\0\xa4\0]\0\xab\0M\0\xa7\0\xa8\0\xa9\0\xac\0p\0\xad\0\xae\0\xd2\0\xe2\0\xd0\0\xd3\0\xd4\0;\0S\0\x86\0\xd5\0\xd6\0\xd7\0\xd8\0\xda\0\x8d\0\xdb\0]\0\xdc\0\xdd\0{\0\xde\0\xdf\0\xe0\0\x88\0_\0\xe1\0#\x01A\x01\xea\0\x9b\0\x05\x01a\x01\xfa\0\xff\xff\xfe\x009\x01=\x01_\x01M\0,\x01\\\x01X\x01\t\x01\x1d\x01L\0|\0!\x01\x12\x01K\0b\0\x13\x01U\x01V\x01W\x01x\x01Y\x01J\0\xe1\x005\x01y\x01I\0Z\x01H\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0b\0q\x01z\0[\x01@\0\x04\x01]\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\x9c\0p\x01^\x01`\x01b\x01c\x011\x01O\0O\0O\0O\0O\0O\0d\x01\x9d\0e\x01N\0N\0N\0N\0N\0N\0\xb7\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\x18\x01p\x01\xff\xff\x19\x01f\x01g\x01i\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0j\x01k\x010\x01(\x01l\x01m\x01n\x01P\0P\0P\0P\0P\0P\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0o\x01\x1b\x01\xff\xff\xab\x01\x1f\x01\xaa\x01\x17\x01Q\0Q\0Q\0Q\0Q\0Q\0\\\0\xa8\x01?\x01P\0P\0P\0P\0P\0P\0\xf8\0\xa5\x01\xfc\0\xa2\x01;\x01E\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0\xff\xffQ\0Q\0Q\0Q\0Q\0Q\0W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0'\x01*\x01\xff\xff\xa3\x01\xa4\x01x\0\x02\x01X\0X\0X\0X\0X\0X\0\xa6\x017\x01\x99\0W\0W\0W\0W\0W\0W\0\x07\x01\xa7\x01\xa4\x01\xa9\x01\x10\x01\xa4\x01Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\x003\x01X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0a\0\x89\x01\xa4\x01\xac\x01\xb9\x01\x88\x01\xad\x01Z\0Z\0Z\0Z\0Z\0Z\0a\0\xb3\0\xae\x01Y\0Y\0Y\0Y\0Y\0Y\0.\x01\xaf\x01\xb0\x01\xb4\0\xa4\x01\xb8\x01\xb5\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0|\x01Z\0Z\0Z\0Z\0Z\0Z\0\xc0\x01\xb2\x01\x15\x01\xb3\x01a\0\xc1\x01\xb4\x01\xb5\x01\xb6\x01\xb7\x01\xa4\x01\xd8\x01\xff\xffa\0\xb8\x01\xd8\x01\xd1\x01a\0\xdf\x01a\0\xd0\x01\xe6\x01\x03\x02a\0\xdb\x01%\x01\xd8\x01\xd9\x01\x03\x02\xdc\x01\xd8\x01a\0\x03\x02\x03\x02\xd8\x01a\0\x03\x02a\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xd8\x01\x03\x02~\x01\x03\x02\x03\x02\x03\x02\x03\x02c\0c\0c\0c\0c\0c\0a\0\x03\x02\xda\x01\xfa\x01\x03\x02\x03\x02a\0\x03\x02|\x01|\x01a\0\x03\x02\xdd\x01\x03\x02\xfd\x01\x03\x02\x03\x02\x03\x02a\0\xff\xff\x03\x02\xc4\x01a\0\x03\x02a\0`\0c\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\xeb\x01\x03\x02\xf1\x01\x03\x02\xff\x01\xf2\x01\x03\x02d\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\xf6\x01\x81\x01\x81\x01\xe4\x01\x03\x02\xc4\x01\x03\x02e\0e\0e\0e\0e\0e\0\x03\x02\xc6\x01\x03\x02d\0d\0d\0d\0d\0d\0\x03\x02\x03\x02\x03\x02\xc4\x01\xea\x01\x86\x01a\0a\0a\0a\0a\0a\0a\0a\0a\0a\0\0\0e\0e\0e\0e\0e\0e\0a\0a\0a\0a\0a\0a\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\0\0\0\0\xc9\x01\xb1\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xbc\0\0\0a\0a\0a\0a\0a\0a\0\xc9\x01\xe3\x01\0\0\xbf\0\xce\x01{\x01\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xc3\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc6\0\xff\xff\xf8\x01\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xca\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xcd\0\xff\xff\xff\xff\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe2\0\xc3\x01\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe8\x01\0\0\0\0\xce\0\xdd\x01\xef\x01\xfe\x01\0\0\xcf\0\xf4\x01\0\0\xe1\0\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe8\0\0\0\xe8\0\0\0\xe1\x01\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xd9\0\xff\xff\0\0\0\0\0\0\0\0\xe1\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\xe6\0\0\0\xe6\0\0\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\0\0\xe4\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xba\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\0\0\0\0\0\0\0\0\0\0\xf1\0\0\0q\x01\0\0M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01\0\0p\x01\0\0\0\0\xc1\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0p\x01\0\0\0\0\0\0\xf0\0\xc8\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\xf6\0\0\0\0\0\xf0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xee\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0E\x01F\x01\0\0\0\0E\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\x01\0\0N\x01\0\0\0\0\0\0\0\0h\x01I\x01\0\0\0\0\0\0\0\0O\x01\0\0G\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0H\x01\0\0\0\0\0\0\0\0\0\0\xf3\0\0\0\0\0\0\0\0\0\0\0\0\0P\x01w\x01\0\0w\x01\0\0Q\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\0\0J\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01S\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0R\x01\0\0\0\0s\x01\0\0\0\0T\x01\0\0\0\0u\x01\0\0u\x01\0\0K\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\0\0s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\xb9\x01\0\0\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\0\0\0\0\0\0\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xb8\x01\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\0\0\0\0D\x01\x80\x01\x80\x01\x80\x01\x7f\x01\0\0\x80\x01\0\0\0\0\xb8\x01\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\x80\x01\x7f\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\xbf\x01\x8e\x01\xbf\x01\0\0\0\0\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x92\x01\x93\x01\0\0\0\0\x92\x01\x9a\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\x92\x01\0\0\x99\x01\0\0\0\0\0\0\0\0\xb1\x01\x96\x01\0\0\0\0\0\0\xc8\x01\x9c\x01\0\0\x94\x01\x9a\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\x95\x01\0\0\0\0\0\0\0\0\0\0\0\0\x8b\x01\0\0\0\0\0\0\0\0\0\0\x9d\x01\0\0\0\0\0\0\0\0\x9e\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xc8\x01\0\0\x97\x01\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xc8\x01\xbb\x01\0\0\xa0\x01\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\x9f\x01\xc8\x01\0\0\xc8\x01\xc7\x01\0\0\xa1\x01\0\0\0\0\0\0\0\0\0\0\0\0\x98\x01\0\0\0\0\0\0\0\0\xbd\x01\0\0\xbd\x01\0\0\xbb\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\x91\x01\xc8\x01\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xc8\x01\0\0\xc8\x01\xc7\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\0\0\0\0\0\0\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\0\0\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\0\0\xd6\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\xd5\x01\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\xd5\x01\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd3\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\x03\0\0\0\x86\0\xff\xff\x03\0\xff\xff\x86\0E\x01\x92\x019\0\xff\xffE\x01\x92\x01\xff\xff\xff\xff\xff\xff\xff\xff}\0\x8a\0\xff\xff\0\0\xff\xff\0\0\x03\0\xa9\0\x86\0\xae\0\xff\xff\0\0\n\x01E\x01\x92\x01\f\x01\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0s\0\0\0}\0\x81\0\x05\0\xec\x01\x88\0\xff\x01&\0\xff\xff\n\0\x88\0f\0:\0\0\0k\0f\0\xff\xff\x0b\0\0\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1d\0&\0\0\0o\0\xd0\0\xe9\0\xff\0\f\x01\x0f\0\x11\0<\0\x0b\0\n\0\0\0\x14\0\x18\0\x1f\0 \0\"\0\x16\0\x1a\0\0\0\x0e\0\x1b\0!\0\x12\0\x17\0\0\0\x10\0\x13\0#\0(\0$\0&\0\0\0)\0*\0+\0,\0-\0.\0:\0R\0\x0b\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0'\0?\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0U\0\x8c\0<\0\r\0\x8f\0\x90\0\x91\x000\0\x93\x000\0\x94\0'\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0A\0'\0\x95\0\x96\0\x9c\0?\0\x9d\x003\0\x9e\x003\0\x9f\x002\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\x9b\x002\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa1\0\xa2\0\x9b\0[\0A\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x009\0D\0f\0k\0s\0\x83\0\x85\0\x85\0}\0\x8a\0\x85\0\xa3\0^\0\xa5\0D\0\xa6\0\xa7\0\xa8\0\xab\0o\0\xac\0\xad\0\xce\0\xcb\0\xcf\0\xd2\0\xd3\0:\0R\0\x85\0\xd4\0\xd5\0\xd6\0\xd7\0\xd9\0\x8c\0\xda\0a\0\xdb\0\xdc\0w\0\xdd\0\xde\0\xdf\0\x85\0[\0\xcb\0\"\x01>\x01\xe9\0\x98\0\x01\x01P\x01\xf7\0<\0\xfb\x006\x01:\x01Q\x01D\0)\x01R\x01S\x01\x06\x01\x1a\x01D\0w\0\x1e\x01\x0f\x01D\0^\0\x0f\x01T\x01U\x01V\x01G\x01X\x01D\0\xcb\x002\x01G\x01D\0Y\x01D\0D\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0a\0L\x01w\0Z\x01?\0\x01\x01\\\x01G\0G\0G\0G\0G\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\x98\0L\x01]\x01_\x01a\x01b\x01-\x01N\0N\0N\0N\0N\0N\0c\x01\x98\0d\x01G\0G\0G\0G\0G\0G\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\x14\x01L\x01A\0\x14\x01e\x01f\x01h\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0i\x01j\x01-\x01$\x01k\x01l\x01m\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0n\x01\x1a\x01y\x01\x9d\x01\x1e\x01\x9e\x01\x14\x01P\0P\0P\0P\0P\0P\0[\0\x9f\x01>\x01O\0O\0O\0O\0O\0O\0\xf7\0\xa0\x01\xfb\0\xa1\x01:\x01D\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0^\0P\0P\0P\0P\0P\0P\0V\0V\0V\0V\0V\0V\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0$\x01)\x01a\0\xa2\x01\xa3\x01w\0\x01\x01W\0W\0W\0W\0W\0W\0\xa5\x016\x01\x98\0V\0V\0V\0V\0V\0V\0\x06\x01\xa6\x01\xa7\x01\xa8\x01\x0f\x01\xa9\x01X\0X\0X\0X\0X\0X\0X\0X\0X\0X\x002\x01W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0_\0\x85\x01\xaa\x01\xab\x01\x9a\x01\x85\x01\xac\x01Y\0Y\0Y\0Y\0Y\0Y\0_\0\xb0\0\xad\x01X\0X\0X\0X\0X\0X\0-\x01\xae\x01\xaf\x01\xb0\0\xb0\x01\x9a\x01\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0z\x01Y\0Y\0Y\0Y\0Y\0Y\0\x94\x01\xb1\x01\x14\x01\xb2\x01b\0\x94\x01\xb3\x01\xb4\x01\xb5\x01\xb6\x01\xb7\x01\xd8\x01\xc1\x01_\0\x9a\x01\xd8\x01\xcd\x01b\0\xde\x01_\0\xcd\x01\xe5\x01\x01\x02_\0\xda\x01$\x01\xd7\x01\xd7\x01\x02\x02\xda\x01\xd7\x01_\0\x04\x02\x05\x02\xd8\x01_\0\x06\x02_\0_\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0\xd7\x01\x07\x02z\x01\b\x02\t\x02\n\x02\x0b\x02`\0`\0`\0`\0`\0`\0b\0\f\x02\xd7\x01\xf7\x01\r\x02\x0e\x02b\0\x0f\x02}\x01\x80\x01b\0\x10\x02\xdc\x01\x11\x02\xfb\x01\x12\x02\x13\x02\x14\x02b\0y\x01\x15\x02\xc2\x01b\0\x16\x02b\0b\0`\0`\0`\0`\0`\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xe7\x01\x17\x02\xee\x01\x18\x02\xfb\x01\xee\x01\x19\x02c\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\xf3\x01}\x01\x80\x01\xe0\x01\x1a\x02\xc5\x01\x1b\x02d\0d\0d\0d\0d\0d\0\x1c\x02\xc2\x01\x1d\x02c\0c\0c\0c\0c\0c\0\x1e\x02\x1f\x02 \x02\xc8\x01\xe7\x01\x85\x01e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\xff\xffd\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xff\xff\xff\xff\xc5\x01\xb0\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb9\0\xff\xffe\0e\0e\0e\0e\0e\0\xc8\x01\xe0\x01\xff\xff\xb9\0\xcd\x01z\x01\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xc0\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc0\0\xc1\x01\xf7\x01\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc7\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xc7\0}\x01\x80\x01\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xcc\0\xc2\x01\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe7\x01\xff\xff\xff\xff\xc7\0\xdc\x01\xee\x01\xfb\x01\xff\xff\xc7\0\xf3\x01\xff\xff\xcc\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xe1\0\xff\xff\xe1\0\xff\xff\xe0\x01\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xcd\0\xc5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xcc\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xff\xff\xff\xff\xff\xff\xff\xff\xc8\x01\xff\xff\xff\xff\xe4\0\xff\xff\xe4\0\xff\xff\xe3\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xff\xff\xe3\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xb9\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xed\0\xff\xffM\x01\xff\xffM\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01\xff\xffM\x01\xff\xff\xff\xff\xc0\0\xff\xff\xff\xff\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0M\x01\xff\xff\xff\xff\xff\xff\xed\0\xc7\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xf2\0\xff\xff\xff\xff\xf0\0\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xed\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0B\x01B\x01\xff\xff\xff\xffB\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xffO\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01p\x01\xff\xffp\x01\xff\xffB\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01\xff\xff\xff\xffB\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xff\xff\xffr\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xffs\x01\xff\xffs\x01\xff\xffB\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\xff\xffr\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01\xff\xff~\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\x81\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\x9b\x01\xff\xff\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x9b\x01\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01~\x01\xff\xff\xff\xffB\x01~\x01\x81\x01~\x01~\x01\xff\xff\x81\x01\xff\xff\xff\xff\x9b\x01\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\x81\x01\x81\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xb8\x01\x8a\x01\xb8\x01\xff\xff\xff\xff\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8f\x01\x8f\x01\xff\xff\xff\xff\x8f\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6\x01\x8f\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\x9c\x01\x8f\x01\xff\xff\xff\xff\xff\xff\xc6\x01\x8f\x01\xff\xff\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xc6\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xc6\x01\xff\xff\xff\xff\xff\xff\xc6\x01\xba\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xc6\x01\xff\xff\xff\xff\x8f\x01\xc6\x01\xff\xff\xc6\x01\xc6\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xbb\x01\xff\xff\xbb\x01\xff\xff\xba\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xc9\x01\xc9\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xff\xff\xff\xff\xff\xff\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xff\xff\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xff\xff\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xd2\x01\xff\xff\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x01\xff\xff\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     ocaml_lex_tables$0=
      [0,
       caml_string_of_jsbytes
        ("\0\0\xec\xff\xed\xff\x03\0\xef\xff\x10\0\xf2\xff\xf3\xff\xf4\xff\xf5\xff\0\0\x1f\0\xf9\xffU\0\x01\0\0\0\0\0\x01\0\0\0\x01\0\x02\0\xff\xff\0\0\0\0\x03\0\xfe\xff\x01\0\x04\0\xfd\xff\x0b\0\xfc\xff\x03\0\x01\0\x03\0\x02\0\x03\0\0\0\xfb\xff\x15\0a\0\n\0\x16\0\x14\0\x10\0\x16\0\f\0\b\0\xfa\xffw\0\x81\0\x8b\0\xa1\0\xab\0\xb5\0\xc1\0\xd1\0\xf0\xff\x0b\0&\0\xfc\xffA\0\xfe\xff\xff\xffn\0\xfc\xff\xa3\0\xfe\xff\xff\xff\xea\0\xf7\xff\xf8\xff0\x01\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xffG\x01~\x01\x95\x01\xf9\xff'\0\xfd\xff\xfe\xff&\0\xbb\x01\xd2\x01\xf8\x01\x0f\x02\xff\xff\xdc\0\xfd\xff\xff\xff\xf5\0'\x02m\x02\x0e\x01X\x02\xa4\x02\xbb\x02\xe1\x02\r\0\xfc\xff\xfd\xff\xfe\xff\xff\xff\x0e\0\xfd\xff\xfe\xff\xff\xff\x1e\0\xfd\xff\xfe\xff\xff\xff\x0f\0\xfd\xff\xfe\xff\xff\xff\x11\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\x13\0\xfc\xff\xfd\xff\xfe\xff\x0f\0\xff\xff\x10\0\xff\xff\b\x01\x05\0\xfd\xff\x17\0\xfe\xff\x14\0\xff\xff.\0\xfd\xff\xfe\xff*\x004\x005\0\xff\xff5\x000\0[\0\\\0\xff\xff\x1b\x01\xfa\xff\xfb\xff\x89\0h\0Y\0X\0j\0\xff\xff\x8f\0\x89\0\xb1\0\xfe\xff\xb7\0\xa8\0\xa6\0\xb7\0\x02\0\xfd\xff\xb1\0\xac\0\xbb\0\x04\0\xfc\xff5\x02\xfb\xff\xfc\xff\xfd\xffg\x01\xff\xff\xf8\x02\xfe\xff\x06\x03\x1e\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff(\x032\x03J\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff=\x03T\x03l\x03\xf9\xff\xfa\xff\xfb\xff\xf4\0x\x03\x8e\x03\xb3\0\xc2\0\x0f\0\xff\xff\xbe\0\xbc\0\xbb\0\xc1\0\xb7\0\xb3\0\xfe\xff\xbf\0\xc9\0\xc8\0\xc4\0\xcb\0\xc1\0\xbd\0\xfd\xff\x9d\x03_\x03\xae\x03\xc4\x03\xce\x03\xd8\x03\xe4\x03\xef\x03<\0\xfd\xff\xfe\xff\xff\xff\f\x04\xfc\xff\xfd\xffW\x04\xff\xff\x91\x04\xfc\xff\xfd\xff\xdd\x04\xff\xff\xe5\0\xfd\xff\xfe\xff\xff\xff\xe7\0\xfd\xff\xfe\xff\xff\xff\x02\0\xff\xff\x12\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\"\x01\xfd\xff\xfe\xff\xff\xff\0\0\xff\xff\x03\0\xfe\xff\xff\xff&\x01\xfc\xff\xfd\xff\xfe\xff\xff\xffx\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\xd0\0\xfd\xff\xfe\xff\xff\xff\xd3\0\xfd\xff\xfe\xff\xff\xff\xbd\0\xff\xff\x8f\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\r\x01\xfd\xff\xfe\xff\xff\xff_\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff2\x01\xfd\xff\xfe\xff\xff\xff\x1a\x01\xfd\xff\xfe\xff\xff\xff\xe9\0\xfd\xff\xfe\xff\xff\xff\xde\0\xfd\xff\xfe\xff\xff\xffO\x05\xed\xff\xee\xff\n\0\xf0\xff,\x01\xf3\xff\xf4\xff\xf5\xff\xf6\xff=\x01\x02\x04\xf9\xff-\x05\xd1\0\xe4\0\xd3\0\xe8\0\xe1\0\xdf\0\xf0\0\xff\xff\xeb\0\xea\0\b\x01\xfe\xff\x04\x01\x17\x01\xfd\xff6\x01\xfc\xff\x1f\x01\x1d\x01 \x01'\x011\x01-\x01\xfb\xff9\x01R\x01P\x01N\x01T\x01J\x01V\x01\xfa\xffn\x05\f\x04{\x05\x9b\x05\xa5\x05\xb1\x05\xbb\x05\xc5\x05\xf1\xff\xc7\x01M\x02\xfd\xff\xff\xff\x9a\x02\xde\x05\xd1\x05\x9b\x02\xef\x055\x06L\x06r\x06\x10\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x98\x06\xfc\xff\xfd\xff\xe3\x06\xff\xffU\x07\xf4\xff\xf5\xff\x0b\0\xf7\xffL\x02\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\x1f\x02\xf3\x053\x07d\x01s\x01h\x01\x85\x01v\x01\x9a\x01\xab\x01\xff\xff\xad\x01\xb0\x01\xbf\x01\xb9\x01\xbb\x01\xfd\x01\xe6\x01\xe6\x01\xea\x01\xf7\x01\xed\x01\xea\x01\t\x02\x13\x02\x13\x02\x0f\x02\x15\x02\x0b\x02\x07\x02\x8e\x06\x98\x06t\x07\xaa\x07\xb4\x07\xbe\x07\xc8\x07\xd2\x07\xf8\xffx\x02\xa7\x02\xfd\xff\xff\xff\xd8\x02R\x07\xdc\x07\xec\x02\xf4\x07:\bQ\bw\bL\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x9d\b\xfc\xff\xfd\xff\xe8\b\xff\xff\x87\x02x\x02\xfd\xffd\x02\xfe\xff\xb6\x02\xff\xff\x0b\x02\xff\xff\xcc\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff.\x02\xff\xff\xb2\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x17\0\xff\xff\xb7\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\xbb\x02\xfd\xff\xfe\xff\xff\xffy\x02\xfd\xff\xfe\xff\xff\xff\xb8\x02\xfc\xff\xfd\xff\xfe\xff\x13\0\xff\xff\x8c\x01\x92\x01\xff\xff\x96\x01\x97\x01\x9a\x01\xa8\x01\xaa\x01\xab\x01\xac\x01\xad\x01\xb5\x01\xb8\x01\xb9\x01\xbb\x01\xbf\x01\xc1\x01\xc3\x01\xc4\x01\xc5\x01\xc8\x01\xcb\x01\xdf\x01\xe1\x01\xe4\x01\xf9\x01\xfb\x01\x02\x02\x04\x02\x0b\x02\f\x02\r\x02\0\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\t\0\xff\xff\t\0\xff\xff\xff\xff\x0e\0\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x01\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\0\0\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\b\0\xff\xff\b\0\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\x01\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\x009\0<\0\0\0<\0\0\0\0\0A\0\0\0A\0\0\0\0\0F\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0T\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0^\0\0\0\0\0a\0\xff\xff\xff\xffa\0\xff\xff\xff\xff\xff\xff\xff\xffh\0\0\0\0\0\0\0\0\0m\0\0\0\0\0\0\0q\0\0\0\0\0\0\0u\0\0\0\0\0\0\0y\0\0\0\0\0\0\0\0\0\0\0~\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\x8a\0\0\0\x8e\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x9a\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xb2\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xbb\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc2\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc9\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xeb\0\0\0\0\0\0\0\xef\0\0\0\0\0\xff\xff\0\0\xf4\0\0\0\0\0\xff\xff\0\0\xf9\0\0\0\0\0\0\0\xfd\0\0\0\0\0\0\0\xff\xff\0\0\x03\x01\0\0\0\0\0\0\0\0\b\x01\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\x11\x01\0\0\0\0\0\0\0\0\x16\x01\0\0\0\0\0\0\0\0\0\0\x1c\x01\0\0\0\0\0\0 \x01\0\0\0\0\0\0\xff\xff\0\0&\x01\0\0\0\0\0\0\0\0+\x01\0\0\0\0\0\0/\x01\0\0\0\0\0\0\0\x004\x01\0\0\0\0\0\x008\x01\0\0\0\0\0\0<\x01\0\0\0\0\0\0@\x01\0\0\0\0\0\0C\x01\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0y\x01}\x01\0\0\0\0\x80\x01\xff\xff\xff\xff\x80\x01\xff\xff\xff\xff\xff\xff\xff\xff\x87\x01\0\0\0\0\0\0\0\0\x8c\x01\0\0\0\0\xff\xff\0\0\x90\x01\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xc1\x01\xc5\x01\0\0\0\0\xc8\x01\xff\xff\xff\xff\xc8\x01\xff\xff\xff\xff\xff\xff\xff\xff\xcf\x01\0\0\0\0\0\0\0\0\xd4\x01\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xdc\x01\0\0\xff\xff\0\0\xe2\x01\0\0\0\0\0\0\0\0\xff\xff\0\0\xe9\x01\0\0\0\0\0\0\0\0\xff\xff\0\0\xf0\x01\0\0\0\0\0\0\0\0\xf5\x01\0\0\0\0\0\0\xf9\x01\0\0\0\0\0\0\xfc\x01\0\0\0\0\0\0\xff\xff\0\0\x02\x02\x04\x02\0\0\x05\x02\x06\x02\x07\x02\b\x02\t\x02\n\x02\x0b\x02\f\x02\r\x02\x0e\x02\x0f\x02\x10\x02\x11\x02\x12\x02\x13\x02\x14\x02\x15\x02\x16\x02\x17\x02\x18\x02\x19\x02\x1a\x02\x1b\x02\x1c\x02\x1d\x02\x1e\x02\x1f\x02 \x02!\x02\x03\x02"),
       caml_string_of_jsbytes
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\x03\0\x03\0\x86\0\0\0\x03\0\0\0\x86\0E\x01\x92\x01\xff\xff\0\0E\x01\x92\x01\0\0\0\0\0\0\0\0\x7f\0\x8b\0\0\0\x03\0\0\0\f\0\x03\0\xaa\0\x86\0\xaf\0\0\0\x07\0\x0b\x01E\x01\x92\x01\x0e\x01\r\x001\0\x05\0\n\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\x008\0v\0\x06\0\x81\0\x82\x009\0\xed\x01\x89\0\0\x021\0\0\x000\0\x8a\0j\0>\0\x0e\0n\0i\0\0\x001\0\x0f\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1e\x000\0\b\0r\0\xd1\0\xec\0\0\x01\r\x01\x1d\0\x16\0\xff\xff0\x000\0\x11\0\x15\0\x19\0 \0!\0#\0\x17\0\x1b\0\x10\0\x1f\0\x1c\0\"\0\x13\0\x18\0\x12\0\x1a\0\x14\0$\0)\0%\x000\0\t\0*\0+\0,\0-\0.\0/\0=\0U\x000\0&\0'\0'\0'\0'\0'\0'\0'\0'\0'\x001\0C\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0V\0\x8f\0\xff\xff(\0\x90\0\x91\0\x92\x007\0\x94\x007\0\x95\x000\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff0\0\x96\0\x97\0\xa1\0B\0\x9e\x005\0\x9f\x005\0\xa0\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xa5\x003\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa2\0\xa3\0\xa6\0]\0\xff\xff\x02\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xffM\0g\0l\0t\0\x84\0\x86\0\x87\0\x80\0\x8b\0\x86\0\xa4\0]\0\xab\0M\0\xa7\0\xa8\0\xa9\0\xac\0p\0\xad\0\xae\0\xd2\0\xe2\0\xd0\0\xd3\0\xd4\0;\0S\0\x86\0\xd5\0\xd6\0\xd7\0\xd8\0\xda\0\x8d\0\xdb\0]\0\xdc\0\xdd\0{\0\xde\0\xdf\0\xe0\0\x88\0_\0\xe1\0#\x01A\x01\xea\0\x9b\0\x05\x01a\x01\xfa\0\xff\xff\xfe\x009\x01=\x01_\x01M\0,\x01\\\x01X\x01\t\x01\x1d\x01L\0|\0!\x01\x12\x01K\0b\0\x13\x01U\x01V\x01W\x01x\x01Y\x01J\0\xe1\x005\x01y\x01I\0Z\x01H\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0b\0q\x01z\0[\x01@\0\x04\x01]\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\x9c\0p\x01^\x01`\x01b\x01c\x011\x01O\0O\0O\0O\0O\0O\0d\x01\x9d\0e\x01N\0N\0N\0N\0N\0N\0\xb7\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\x18\x01p\x01\xff\xff\x19\x01f\x01g\x01i\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0j\x01k\x010\x01(\x01l\x01m\x01n\x01P\0P\0P\0P\0P\0P\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0o\x01\x1b\x01\xff\xff\xab\x01\x1f\x01\xaa\x01\x17\x01Q\0Q\0Q\0Q\0Q\0Q\0\\\0\xa8\x01?\x01P\0P\0P\0P\0P\0P\0\xf8\0\xa5\x01\xfc\0\xa2\x01;\x01E\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0\xff\xffQ\0Q\0Q\0Q\0Q\0Q\0W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0'\x01*\x01\xff\xff\xa3\x01\xa4\x01x\0\x02\x01X\0X\0X\0X\0X\0X\0\xa6\x017\x01\x99\0W\0W\0W\0W\0W\0W\0\x07\x01\xa7\x01\xa4\x01\xa9\x01\x10\x01\xa4\x01Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\x003\x01X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0a\0\x89\x01\xa4\x01\xac\x01\xb9\x01\x88\x01\xad\x01Z\0Z\0Z\0Z\0Z\0Z\0a\0\xb3\0\xae\x01Y\0Y\0Y\0Y\0Y\0Y\0.\x01\xaf\x01\xb0\x01\xb4\0\xa4\x01\xb8\x01\xb5\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0|\x01Z\0Z\0Z\0Z\0Z\0Z\0\xc0\x01\xb2\x01\x15\x01\xb3\x01a\0\xc1\x01\xb4\x01\xb5\x01\xb6\x01\xb7\x01\xa4\x01\xd8\x01\xff\xffa\0\xb8\x01\xd8\x01\xd1\x01a\0\xdf\x01a\0\xd0\x01\xe6\x01\x03\x02a\0\xdb\x01%\x01\xd8\x01\xd9\x01\x03\x02\xdc\x01\xd8\x01a\0\x03\x02\x03\x02\xd8\x01a\0\x03\x02a\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xd8\x01\x03\x02~\x01\x03\x02\x03\x02\x03\x02\x03\x02c\0c\0c\0c\0c\0c\0a\0\x03\x02\xda\x01\xfa\x01\x03\x02\x03\x02a\0\x03\x02|\x01|\x01a\0\x03\x02\xdd\x01\x03\x02\xfd\x01\x03\x02\x03\x02\x03\x02a\0\xff\xff\x03\x02\xc4\x01a\0\x03\x02a\0`\0c\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\xeb\x01\x03\x02\xf1\x01\x03\x02\xff\x01\xf2\x01\x03\x02d\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\xf6\x01\x81\x01\x81\x01\xe4\x01\x03\x02\xc4\x01\x03\x02e\0e\0e\0e\0e\0e\0\x03\x02\xc6\x01\x03\x02d\0d\0d\0d\0d\0d\0\x03\x02\x03\x02\x03\x02\xc4\x01\xea\x01\x86\x01a\0a\0a\0a\0a\0a\0a\0a\0a\0a\0\0\0e\0e\0e\0e\0e\0e\0a\0a\0a\0a\0a\0a\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\0\0\0\0\xc9\x01\xb1\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xbc\0\0\0a\0a\0a\0a\0a\0a\0\xc9\x01\xe3\x01\0\0\xbf\0\xce\x01{\x01\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xc3\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc6\0\xff\xff\xf8\x01\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xca\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xcd\0\xff\xff\xff\xff\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe2\0\xc3\x01\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe8\x01\0\0\0\0\xce\0\xdd\x01\xef\x01\xfe\x01\0\0\xcf\0\xf4\x01\0\0\xe1\0\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe8\0\0\0\xe8\0\0\0\xe1\x01\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xd9\0\xff\xff\0\0\0\0\0\0\0\0\xe1\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\xe6\0\0\0\xe6\0\0\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\0\0\xe4\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xba\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\0\0\0\0\0\0\0\0\0\0\xf1\0\0\0q\x01\0\0M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01\0\0p\x01\0\0\0\0\xc1\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0p\x01\0\0\0\0\0\0\xf0\0\xc8\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\xf6\0\0\0\0\0\xf0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xee\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0E\x01F\x01\0\0\0\0E\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\x01\0\0N\x01\0\0\0\0\0\0\0\0h\x01I\x01\0\0\0\0\0\0\0\0O\x01\0\0G\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0H\x01\0\0\0\0\0\0\0\0\0\0\xf3\0\0\0\0\0\0\0\0\0\0\0\0\0P\x01w\x01\0\0w\x01\0\0Q\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\0\0J\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01S\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0R\x01\0\0\0\0s\x01\0\0\0\0T\x01\0\0\0\0u\x01\0\0u\x01\0\0K\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\0\0s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\xb9\x01\0\0\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\0\0\0\0\0\0\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xb8\x01\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\0\0\0\0D\x01\x80\x01\x80\x01\x80\x01\x7f\x01\0\0\x80\x01\0\0\0\0\xb8\x01\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\x80\x01\x7f\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\xbf\x01\x8e\x01\xbf\x01\0\0\0\0\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x92\x01\x93\x01\0\0\0\0\x92\x01\x9a\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\x92\x01\0\0\x99\x01\0\0\0\0\0\0\0\0\xb1\x01\x96\x01\0\0\0\0\0\0\xc8\x01\x9c\x01\0\0\x94\x01\x9a\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\x95\x01\0\0\0\0\0\0\0\0\0\0\0\0\x8b\x01\0\0\0\0\0\0\0\0\0\0\x9d\x01\0\0\0\0\0\0\0\0\x9e\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xc8\x01\0\0\x97\x01\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xc8\x01\xbb\x01\0\0\xa0\x01\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\x9f\x01\xc8\x01\0\0\xc8\x01\xc7\x01\0\0\xa1\x01\0\0\0\0\0\0\0\0\0\0\0\0\x98\x01\0\0\0\0\0\0\0\0\xbd\x01\0\0\xbd\x01\0\0\xbb\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\x91\x01\xc8\x01\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xc8\x01\0\0\xc8\x01\xc7\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\0\0\0\0\0\0\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\0\0\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\0\0\xd6\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\xd5\x01\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\xd5\x01\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd3\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\x03\0\0\0\x86\0\xff\xff\x03\0\xff\xff\x86\0E\x01\x92\x019\0\xff\xffE\x01\x92\x01\xff\xff\xff\xff\xff\xff\xff\xff}\0\x8a\0\xff\xff\0\0\xff\xff\0\0\x03\0\xa9\0\x86\0\xae\0\xff\xff\0\0\n\x01E\x01\x92\x01\f\x01\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0s\0\0\0}\0\x81\0\x05\0\xec\x01\x88\0\xff\x01&\0\xff\xff\n\0\x88\0f\0:\0\0\0k\0f\0\xff\xff\x0b\0\0\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1d\0&\0\0\0o\0\xd0\0\xe9\0\xff\0\f\x01\x0f\0\x11\0<\0\x0b\0\n\0\0\0\x14\0\x18\0\x1f\0 \0\"\0\x16\0\x1a\0\0\0\x0e\0\x1b\0!\0\x12\0\x17\0\0\0\x10\0\x13\0#\0(\0$\0&\0\0\0)\0*\0+\0,\0-\0.\0:\0R\0\x0b\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0'\0?\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0U\0\x8c\0<\0\r\0\x8f\0\x90\0\x91\x000\0\x93\x000\0\x94\0'\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0A\0'\0\x95\0\x96\0\x9c\0?\0\x9d\x003\0\x9e\x003\0\x9f\x002\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\x9b\x002\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa1\0\xa2\0\x9b\0[\0A\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x009\0D\0f\0k\0s\0\x83\0\x85\0\x85\0}\0\x8a\0\x85\0\xa3\0^\0\xa5\0D\0\xa6\0\xa7\0\xa8\0\xab\0o\0\xac\0\xad\0\xce\0\xcb\0\xcf\0\xd2\0\xd3\0:\0R\0\x85\0\xd4\0\xd5\0\xd6\0\xd7\0\xd9\0\x8c\0\xda\0a\0\xdb\0\xdc\0w\0\xdd\0\xde\0\xdf\0\x85\0[\0\xcb\0\"\x01>\x01\xe9\0\x98\0\x01\x01P\x01\xf7\0<\0\xfb\x006\x01:\x01Q\x01D\0)\x01R\x01S\x01\x06\x01\x1a\x01D\0w\0\x1e\x01\x0f\x01D\0^\0\x0f\x01T\x01U\x01V\x01G\x01X\x01D\0\xcb\x002\x01G\x01D\0Y\x01D\0D\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0a\0L\x01w\0Z\x01?\0\x01\x01\\\x01G\0G\0G\0G\0G\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\x98\0L\x01]\x01_\x01a\x01b\x01-\x01N\0N\0N\0N\0N\0N\0c\x01\x98\0d\x01G\0G\0G\0G\0G\0G\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\x14\x01L\x01A\0\x14\x01e\x01f\x01h\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0i\x01j\x01-\x01$\x01k\x01l\x01m\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0n\x01\x1a\x01y\x01\x9d\x01\x1e\x01\x9e\x01\x14\x01P\0P\0P\0P\0P\0P\0[\0\x9f\x01>\x01O\0O\0O\0O\0O\0O\0\xf7\0\xa0\x01\xfb\0\xa1\x01:\x01D\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0^\0P\0P\0P\0P\0P\0P\0V\0V\0V\0V\0V\0V\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0$\x01)\x01a\0\xa2\x01\xa3\x01w\0\x01\x01W\0W\0W\0W\0W\0W\0\xa5\x016\x01\x98\0V\0V\0V\0V\0V\0V\0\x06\x01\xa6\x01\xa7\x01\xa8\x01\x0f\x01\xa9\x01X\0X\0X\0X\0X\0X\0X\0X\0X\0X\x002\x01W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0_\0\x85\x01\xaa\x01\xab\x01\x9a\x01\x85\x01\xac\x01Y\0Y\0Y\0Y\0Y\0Y\0_\0\xb0\0\xad\x01X\0X\0X\0X\0X\0X\0-\x01\xae\x01\xaf\x01\xb0\0\xb0\x01\x9a\x01\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0z\x01Y\0Y\0Y\0Y\0Y\0Y\0\x94\x01\xb1\x01\x14\x01\xb2\x01b\0\x94\x01\xb3\x01\xb4\x01\xb5\x01\xb6\x01\xb7\x01\xd8\x01\xc1\x01_\0\x9a\x01\xd8\x01\xcd\x01b\0\xde\x01_\0\xcd\x01\xe5\x01\x01\x02_\0\xda\x01$\x01\xd7\x01\xd7\x01\x02\x02\xda\x01\xd7\x01_\0\x04\x02\x05\x02\xd8\x01_\0\x06\x02_\0_\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0\xd7\x01\x07\x02z\x01\b\x02\t\x02\n\x02\x0b\x02`\0`\0`\0`\0`\0`\0b\0\f\x02\xd7\x01\xf7\x01\r\x02\x0e\x02b\0\x0f\x02}\x01\x80\x01b\0\x10\x02\xdc\x01\x11\x02\xfb\x01\x12\x02\x13\x02\x14\x02b\0y\x01\x15\x02\xc2\x01b\0\x16\x02b\0b\0`\0`\0`\0`\0`\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xe7\x01\x17\x02\xee\x01\x18\x02\xfb\x01\xee\x01\x19\x02c\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\xf3\x01}\x01\x80\x01\xe0\x01\x1a\x02\xc5\x01\x1b\x02d\0d\0d\0d\0d\0d\0\x1c\x02\xc2\x01\x1d\x02c\0c\0c\0c\0c\0c\0\x1e\x02\x1f\x02 \x02\xc8\x01\xe7\x01\x85\x01e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\xff\xffd\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xff\xff\xff\xff\xc5\x01\xb0\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb9\0\xff\xffe\0e\0e\0e\0e\0e\0\xc8\x01\xe0\x01\xff\xff\xb9\0\xcd\x01z\x01\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xc0\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc0\0\xc1\x01\xf7\x01\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc7\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xc7\0}\x01\x80\x01\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xcc\0\xc2\x01\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe7\x01\xff\xff\xff\xff\xc7\0\xdc\x01\xee\x01\xfb\x01\xff\xff\xc7\0\xf3\x01\xff\xff\xcc\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xe1\0\xff\xff\xe1\0\xff\xff\xe0\x01\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xcd\0\xc5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xcc\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xff\xff\xff\xff\xff\xff\xff\xff\xc8\x01\xff\xff\xff\xff\xe4\0\xff\xff\xe4\0\xff\xff\xe3\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xff\xff\xe3\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xb9\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xed\0\xff\xffM\x01\xff\xffM\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01\xff\xffM\x01\xff\xff\xff\xff\xc0\0\xff\xff\xff\xff\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0M\x01\xff\xff\xff\xff\xff\xff\xed\0\xc7\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xf2\0\xff\xff\xff\xff\xf0\0\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xed\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0B\x01B\x01\xff\xff\xff\xffB\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xffO\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01p\x01\xff\xffp\x01\xff\xffB\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01\xff\xff\xff\xffB\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xff\xff\xffr\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xffs\x01\xff\xffs\x01\xff\xffB\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\xff\xffr\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01\xff\xff~\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\x81\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\x9b\x01\xff\xff\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x9b\x01\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01~\x01\xff\xff\xff\xffB\x01~\x01\x81\x01~\x01~\x01\xff\xff\x81\x01\xff\xff\xff\xff\x9b\x01\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\x81\x01\x81\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xb8\x01\x8a\x01\xb8\x01\xff\xff\xff\xff\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8f\x01\x8f\x01\xff\xff\xff\xff\x8f\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6\x01\x8f\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\x9c\x01\x8f\x01\xff\xff\xff\xff\xff\xff\xc6\x01\x8f\x01\xff\xff\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xc6\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xc6\x01\xff\xff\xff\xff\xff\xff\xc6\x01\xba\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xc6\x01\xff\xff\xff\xff\x8f\x01\xc6\x01\xff\xff\xc6\x01\xc6\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xbb\x01\xff\xff\xbb\x01\xff\xff\xba\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xc9\x01\xc9\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xff\xff\xff\xff\xff\xff\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xff\xff\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xff\xff\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xd2\x01\xff\xff\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x01\xff\xff\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     ocaml_lex_tables$1=
      [0,
       caml_string_of_jsbytes
        ("\0\0\xec\xff\xed\xff\x03\0\xef\xff\x10\0\xf2\xff\xf3\xff\xf4\xff\xf5\xff\0\0\x1f\0\xf9\xffU\0\x01\0\0\0\0\0\x01\0\0\0\x01\0\x02\0\xff\xff\0\0\0\0\x03\0\xfe\xff\x01\0\x04\0\xfd\xff\x0b\0\xfc\xff\x03\0\x01\0\x03\0\x02\0\x03\0\0\0\xfb\xff\x15\0a\0\n\0\x16\0\x14\0\x10\0\x16\0\f\0\b\0\xfa\xffw\0\x81\0\x8b\0\xa1\0\xab\0\xb5\0\xc1\0\xd1\0\xf0\xff\x0b\0&\0\xfc\xffA\0\xfe\xff\xff\xffn\0\xfc\xff\xa3\0\xfe\xff\xff\xff\xea\0\xf7\xff\xf8\xff0\x01\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xffG\x01~\x01\x95\x01\xf9\xff'\0\xfd\xff\xfe\xff&\0\xbb\x01\xd2\x01\xf8\x01\x0f\x02\xff\xff\xdc\0\xfd\xff\xff\xff\xf5\0'\x02m\x02\x0e\x01X\x02\xa4\x02\xbb\x02\xe1\x02\r\0\xfc\xff\xfd\xff\xfe\xff\xff\xff\x0e\0\xfd\xff\xfe\xff\xff\xff\x1e\0\xfd\xff\xfe\xff\xff\xff\x0f\0\xfd\xff\xfe\xff\xff\xff\x11\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\x13\0\xfc\xff\xfd\xff\xfe\xff\x0f\0\xff\xff\x10\0\xff\xff\b\x01\x05\0\xfd\xff\x17\0\xfe\xff\x14\0\xff\xff.\0\xfd\xff\xfe\xff*\x004\x005\0\xff\xff5\x000\0[\0\\\0\xff\xff\x1b\x01\xfa\xff\xfb\xff\x89\0h\0Y\0X\0j\0\xff\xff\x8f\0\x89\0\xb1\0\xfe\xff\xb7\0\xa8\0\xa6\0\xb7\0\x02\0\xfd\xff\xb1\0\xac\0\xbb\0\x04\0\xfc\xff5\x02\xfb\xff\xfc\xff\xfd\xffg\x01\xff\xff\xf8\x02\xfe\xff\x06\x03\x1e\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff(\x032\x03J\x03\xfc\xff\xfd\xff\xfe\xff\xff\xff=\x03T\x03l\x03\xf9\xff\xfa\xff\xfb\xff\xf4\0x\x03\x8e\x03\xb3\0\xc2\0\x0f\0\xff\xff\xbe\0\xbc\0\xbb\0\xc1\0\xb7\0\xb3\0\xfe\xff\xbf\0\xc9\0\xc8\0\xc4\0\xcb\0\xc1\0\xbd\0\xfd\xff\x9d\x03_\x03\xae\x03\xc4\x03\xce\x03\xd8\x03\xe4\x03\xef\x03<\0\xfd\xff\xfe\xff\xff\xff\f\x04\xfc\xff\xfd\xffW\x04\xff\xff\x91\x04\xfc\xff\xfd\xff\xdd\x04\xff\xff\xe5\0\xfd\xff\xfe\xff\xff\xff\xe7\0\xfd\xff\xfe\xff\xff\xff\x02\0\xff\xff\x12\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\"\x01\xfd\xff\xfe\xff\xff\xff\0\0\xff\xff\x03\0\xfe\xff\xff\xff&\x01\xfc\xff\xfd\xff\xfe\xff\xff\xffx\x01\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xff\xd0\0\xfd\xff\xfe\xff\xff\xff\xd3\0\xfd\xff\xfe\xff\xff\xff\xbd\0\xff\xff\x8f\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\r\x01\xfd\xff\xfe\xff\xff\xff_\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff2\x01\xfd\xff\xfe\xff\xff\xff\x1a\x01\xfd\xff\xfe\xff\xff\xff\xe9\0\xfd\xff\xfe\xff\xff\xff\xde\0\xfd\xff\xfe\xff\xff\xffO\x05\xed\xff\xee\xff\n\0\xf0\xff,\x01\xf3\xff\xf4\xff\xf5\xff\xf6\xff=\x01\x02\x04\xf9\xff-\x05\xd1\0\xe4\0\xd3\0\xe8\0\xe1\0\xdf\0\xf0\0\xff\xff\xeb\0\xea\0\b\x01\xfe\xff\x04\x01\x17\x01\xfd\xff6\x01\xfc\xff\x1f\x01\x1d\x01 \x01'\x011\x01-\x01\xfb\xff9\x01R\x01P\x01N\x01T\x01J\x01V\x01\xfa\xffn\x05\f\x04{\x05\x9b\x05\xa5\x05\xb1\x05\xbb\x05\xc5\x05\xf1\xff\xc7\x01M\x02\xfd\xff\xff\xff\x9a\x02\xde\x05\xd1\x05\x9b\x02\xef\x055\x06L\x06r\x06\x10\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x98\x06\xfc\xff\xfd\xff\xe3\x06\xff\xffU\x07\xf4\xff\xf5\xff\x0b\0\xf7\xffL\x02\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\x1f\x02\xf3\x053\x07d\x01s\x01h\x01\x85\x01v\x01\x9a\x01\xab\x01\xff\xff\xad\x01\xb0\x01\xbf\x01\xb9\x01\xbb\x01\xfd\x01\xe6\x01\xe6\x01\xea\x01\xf7\x01\xed\x01\xea\x01\t\x02\x13\x02\x13\x02\x0f\x02\x15\x02\x0b\x02\x07\x02\x8e\x06\x98\x06t\x07\xaa\x07\xb4\x07\xbe\x07\xc8\x07\xd2\x07\xf8\xffx\x02\xa7\x02\xfd\xff\xff\xff\xd8\x02R\x07\xdc\x07\xec\x02\xf4\x07:\bQ\bw\bL\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x9d\b\xfc\xff\xfd\xff\xe8\b\xff\xff\x87\x02x\x02\xfd\xffd\x02\xfe\xff\xb6\x02\xff\xff\x0b\x02\xff\xff\xcc\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff.\x02\xff\xff\xb2\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\x17\0\xff\xff\xb7\x02\xfc\xff\xfd\xff\xfe\xff\xff\xff\xbb\x02\xfd\xff\xfe\xff\xff\xffy\x02\xfd\xff\xfe\xff\xff\xff\xb8\x02\xfc\xff\xfd\xff\xfe\xff\x13\0\xff\xff\x8c\x01\x92\x01\xff\xff\x96\x01\x97\x01\x9a\x01\xa8\x01\xaa\x01\xab\x01\xac\x01\xad\x01\xb5\x01\xb8\x01\xb9\x01\xbb\x01\xbf\x01\xc1\x01\xc3\x01\xc4\x01\xc5\x01\xc8\x01\xcb\x01\xdf\x01\xe1\x01\xe4\x01\xf9\x01\xfb\x01\x02\x02\x04\x02\x0b\x02\f\x02\r\x02\0\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\x11\0\xff\xff\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\t\0\xff\xff\t\0\xff\xff\xff\xff\x0e\0\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x01\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\0\0\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x10\0\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\b\0\xff\xff\b\0\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\x01\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\x01\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\x009\0<\0\0\0<\0\0\0\0\0A\0\0\0A\0\0\0\0\0F\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0T\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0^\0\0\0\0\0a\0\xff\xff\xff\xffa\0\xff\xff\xff\xff\xff\xff\xff\xffh\0\0\0\0\0\0\0\0\0m\0\0\0\0\0\0\0q\0\0\0\0\0\0\0u\0\0\0\0\0\0\0y\0\0\0\0\0\0\0\0\0\0\0~\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\x8a\0\0\0\x8e\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x9a\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xb2\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xbb\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc2\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xc9\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xeb\0\0\0\0\0\0\0\xef\0\0\0\0\0\xff\xff\0\0\xf4\0\0\0\0\0\xff\xff\0\0\xf9\0\0\0\0\0\0\0\xfd\0\0\0\0\0\0\0\xff\xff\0\0\x03\x01\0\0\0\0\0\0\0\0\b\x01\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\x11\x01\0\0\0\0\0\0\0\0\x16\x01\0\0\0\0\0\0\0\0\0\0\x1c\x01\0\0\0\0\0\0 \x01\0\0\0\0\0\0\xff\xff\0\0&\x01\0\0\0\0\0\0\0\0+\x01\0\0\0\0\0\0/\x01\0\0\0\0\0\0\0\x004\x01\0\0\0\0\0\x008\x01\0\0\0\0\0\0<\x01\0\0\0\0\0\0@\x01\0\0\0\0\0\0C\x01\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0y\x01}\x01\0\0\0\0\x80\x01\xff\xff\xff\xff\x80\x01\xff\xff\xff\xff\xff\xff\xff\xff\x87\x01\0\0\0\0\0\0\0\0\x8c\x01\0\0\0\0\xff\xff\0\0\x90\x01\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xc1\x01\xc5\x01\0\0\0\0\xc8\x01\xff\xff\xff\xff\xc8\x01\xff\xff\xff\xff\xff\xff\xff\xff\xcf\x01\0\0\0\0\0\0\0\0\xd4\x01\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\xdc\x01\0\0\xff\xff\0\0\xe2\x01\0\0\0\0\0\0\0\0\xff\xff\0\0\xe9\x01\0\0\0\0\0\0\0\0\xff\xff\0\0\xf0\x01\0\0\0\0\0\0\0\0\xf5\x01\0\0\0\0\0\0\xf9\x01\0\0\0\0\0\0\xfc\x01\0\0\0\0\0\0\xff\xff\0\0\x02\x02\x04\x02\0\0\x05\x02\x06\x02\x07\x02\b\x02\t\x02\n\x02\x0b\x02\f\x02\r\x02\x0e\x02\x0f\x02\x10\x02\x11\x02\x12\x02\x13\x02\x14\x02\x15\x02\x16\x02\x17\x02\x18\x02\x19\x02\x1a\x02\x1b\x02\x1c\x02\x1d\x02\x1e\x02\x1f\x02 \x02!\x02\x03\x02"),
       caml_string_of_jsbytes
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\x03\0\x03\0\x86\0\0\0\x03\0\0\0\x86\0E\x01\x92\x01\xff\xff\0\0E\x01\x92\x01\0\0\0\0\0\0\0\0\x7f\0\x8b\0\0\0\x03\0\0\0\f\0\x03\0\xaa\0\x86\0\xaf\0\0\0\x07\0\x0b\x01E\x01\x92\x01\x0e\x01\r\x001\0\x05\0\n\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\x008\0v\0\x06\0\x81\0\x82\x009\0\xed\x01\x89\0\0\x021\0\0\x000\0\x8a\0j\0>\0\x0e\0n\0i\0\0\x001\0\x0f\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1e\x000\0\b\0r\0\xd1\0\xec\0\0\x01\r\x01\x1d\0\x16\0\xff\xff0\x000\0\x11\0\x15\0\x19\0 \0!\0#\0\x17\0\x1b\0\x10\0\x1f\0\x1c\0\"\0\x13\0\x18\0\x12\0\x1a\0\x14\0$\0)\0%\x000\0\t\0*\0+\0,\0-\0.\0/\0=\0U\x000\0&\0'\0'\0'\0'\0'\0'\0'\0'\0'\x001\0C\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0V\0\x8f\0\xff\xff(\0\x90\0\x91\0\x92\x007\0\x94\x007\0\x95\x000\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0\xff\xff0\0\x96\0\x97\0\xa1\0B\0\x9e\x005\0\x9f\x005\0\xa0\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\xa5\x003\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa2\0\xa3\0\xa6\0]\0\xff\xff\x02\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xff\xffM\0g\0l\0t\0\x84\0\x86\0\x87\0\x80\0\x8b\0\x86\0\xa4\0]\0\xab\0M\0\xa7\0\xa8\0\xa9\0\xac\0p\0\xad\0\xae\0\xd2\0\xe2\0\xd0\0\xd3\0\xd4\0;\0S\0\x86\0\xd5\0\xd6\0\xd7\0\xd8\0\xda\0\x8d\0\xdb\0]\0\xdc\0\xdd\0{\0\xde\0\xdf\0\xe0\0\x88\0_\0\xe1\0#\x01A\x01\xea\0\x9b\0\x05\x01a\x01\xfa\0\xff\xff\xfe\x009\x01=\x01_\x01M\0,\x01\\\x01X\x01\t\x01\x1d\x01L\0|\0!\x01\x12\x01K\0b\0\x13\x01U\x01V\x01W\x01x\x01Y\x01J\0\xe1\x005\x01y\x01I\0Z\x01H\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0b\0q\x01z\0[\x01@\0\x04\x01]\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\x9c\0p\x01^\x01`\x01b\x01c\x011\x01O\0O\0O\0O\0O\0O\0d\x01\x9d\0e\x01N\0N\0N\0N\0N\0N\0\xb7\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\x18\x01p\x01\xff\xff\x19\x01f\x01g\x01i\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0j\x01k\x010\x01(\x01l\x01m\x01n\x01P\0P\0P\0P\0P\0P\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0Q\0o\x01\x1b\x01\xff\xff\xab\x01\x1f\x01\xaa\x01\x17\x01Q\0Q\0Q\0Q\0Q\0Q\0\\\0\xa8\x01?\x01P\0P\0P\0P\0P\0P\0\xf8\0\xa5\x01\xfc\0\xa2\x01;\x01E\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0\xff\xffQ\0Q\0Q\0Q\0Q\0Q\0W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0X\0X\0X\0X\0'\x01*\x01\xff\xff\xa3\x01\xa4\x01x\0\x02\x01X\0X\0X\0X\0X\0X\0\xa6\x017\x01\x99\0W\0W\0W\0W\0W\0W\0\x07\x01\xa7\x01\xa4\x01\xa9\x01\x10\x01\xa4\x01Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\x003\x01X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0Z\0a\0\x89\x01\xa4\x01\xac\x01\xb9\x01\x88\x01\xad\x01Z\0Z\0Z\0Z\0Z\0Z\0a\0\xb3\0\xae\x01Y\0Y\0Y\0Y\0Y\0Y\0.\x01\xaf\x01\xb0\x01\xb4\0\xa4\x01\xb8\x01\xb5\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0|\x01Z\0Z\0Z\0Z\0Z\0Z\0\xc0\x01\xb2\x01\x15\x01\xb3\x01a\0\xc1\x01\xb4\x01\xb5\x01\xb6\x01\xb7\x01\xa4\x01\xd8\x01\xff\xffa\0\xb8\x01\xd8\x01\xd1\x01a\0\xdf\x01a\0\xd0\x01\xe6\x01\x03\x02a\0\xdb\x01%\x01\xd8\x01\xd9\x01\x03\x02\xdc\x01\xd8\x01a\0\x03\x02\x03\x02\xd8\x01a\0\x03\x02a\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xd8\x01\x03\x02~\x01\x03\x02\x03\x02\x03\x02\x03\x02c\0c\0c\0c\0c\0c\0a\0\x03\x02\xda\x01\xfa\x01\x03\x02\x03\x02a\0\x03\x02|\x01|\x01a\0\x03\x02\xdd\x01\x03\x02\xfd\x01\x03\x02\x03\x02\x03\x02a\0\xff\xff\x03\x02\xc4\x01a\0\x03\x02a\0`\0c\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\xeb\x01\x03\x02\xf1\x01\x03\x02\xff\x01\xf2\x01\x03\x02d\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\xf6\x01\x81\x01\x81\x01\xe4\x01\x03\x02\xc4\x01\x03\x02e\0e\0e\0e\0e\0e\0\x03\x02\xc6\x01\x03\x02d\0d\0d\0d\0d\0d\0\x03\x02\x03\x02\x03\x02\xc4\x01\xea\x01\x86\x01a\0a\0a\0a\0a\0a\0a\0a\0a\0a\0\0\0e\0e\0e\0e\0e\0e\0a\0a\0a\0a\0a\0a\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\0\0\0\0\xc9\x01\xb1\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xbc\0\0\0a\0a\0a\0a\0a\0a\0\xc9\x01\xe3\x01\0\0\xbf\0\xce\x01{\x01\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbd\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xc3\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc6\0\xff\xff\xf8\x01\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc4\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xca\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xcd\0\xff\xff\xff\xff\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe2\0\xc3\x01\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe8\x01\0\0\0\0\xce\0\xdd\x01\xef\x01\xfe\x01\0\0\xcf\0\xf4\x01\0\0\xe1\0\xcb\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe8\0\0\0\xe8\0\0\0\xe1\x01\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xd9\0\xff\xff\0\0\0\0\0\0\0\0\xe1\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\xe6\0\0\0\xe6\0\0\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\0\0\xe4\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xba\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\0\0\0\0\0\0\0\0\0\0\xf1\0\0\0q\x01\0\0M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01\0\0p\x01\0\0\0\0\xc1\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0p\x01\0\0\0\0\0\0\xf0\0\xc8\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\0\0\xf6\0\0\0\0\0\xf0\0\0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xee\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\0\0\0\0\0\0\0\0\xf5\0\0\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0E\x01F\x01\0\0\0\0E\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0E\x01\0\0N\x01\0\0\0\0\0\0\0\0h\x01I\x01\0\0\0\0\0\0\0\0O\x01\0\0G\x01L\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01\0\0\0\0H\x01\0\0\0\0\0\0\0\0\0\0\xf3\0\0\0\0\0\0\0\0\0\0\0\0\0P\x01w\x01\0\0w\x01\0\0Q\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\0\0J\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01S\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0R\x01\0\0\0\0s\x01\0\0\0\0T\x01\0\0\0\0u\x01\0\0u\x01\0\0K\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\0\0s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\xb9\x01\0\0\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\0\0\0\0\0\0\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xb8\x01\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\0\0\0\0D\x01\x80\x01\x80\x01\x80\x01\x7f\x01\0\0\x80\x01\0\0\0\0\xb8\x01\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\x80\x01\x7f\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\0\0\0\0\0\0\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\0\0\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\xbf\x01\x8e\x01\xbf\x01\0\0\0\0\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\0\0\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\0\0\0\0\0\0\0\0\x8d\x01\0\0\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x92\x01\x93\x01\0\0\0\0\x92\x01\x9a\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\x92\x01\0\0\x99\x01\0\0\0\0\0\0\0\0\xb1\x01\x96\x01\0\0\0\0\0\0\xc8\x01\x9c\x01\0\0\x94\x01\x9a\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\0\0\0\0\x95\x01\0\0\0\0\0\0\0\0\0\0\0\0\x8b\x01\0\0\0\0\0\0\0\0\0\0\x9d\x01\0\0\0\0\0\0\0\0\x9e\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xc8\x01\0\0\x97\x01\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xc8\x01\xbb\x01\0\0\xa0\x01\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\x9f\x01\xc8\x01\0\0\xc8\x01\xc7\x01\0\0\xa1\x01\0\0\0\0\0\0\0\0\0\0\0\0\x98\x01\0\0\0\0\0\0\0\0\xbd\x01\0\0\xbd\x01\0\0\xbb\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\x91\x01\xc8\x01\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xc8\x01\0\0\xc8\x01\xc7\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\0\0\0\0\0\0\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\0\0\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\0\0\xd6\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xc8\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\xd5\x01\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\xd5\x01\0\0\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd3\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\x03\0\0\0\x86\0\xff\xff\x03\0\xff\xff\x86\0E\x01\x92\x019\0\xff\xffE\x01\x92\x01\xff\xff\xff\xff\xff\xff\xff\xff}\0\x8a\0\xff\xff\0\0\xff\xff\0\0\x03\0\xa9\0\x86\0\xae\0\xff\xff\0\0\n\x01E\x01\x92\x01\f\x01\0\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0s\0\0\0}\0\x81\0\x05\0\xec\x01\x88\0\xff\x01&\0\xff\xff\n\0\x88\0f\0:\0\0\0k\0f\0\xff\xff\x0b\0\0\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x1d\0&\0\0\0o\0\xd0\0\xe9\0\xff\0\f\x01\x0f\0\x11\0<\0\x0b\0\n\0\0\0\x14\0\x18\0\x1f\0 \0\"\0\x16\0\x1a\0\0\0\x0e\0\x1b\0!\0\x12\0\x17\0\0\0\x10\0\x13\0#\0(\0$\0&\0\0\0)\0*\0+\0,\0-\0.\0:\0R\0\x0b\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0'\0?\0'\0'\0'\0'\0'\0'\0'\0'\0'\0'\0U\0\x8c\0<\0\r\0\x8f\0\x90\0\x91\x000\0\x93\x000\0\x94\0'\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\x002\x002\x002\x002\x002\x002\x002\x002\x002\x002\0A\0'\0\x95\0\x96\0\x9c\0?\0\x9d\x003\0\x9e\x003\0\x9f\x002\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\x005\x005\x005\x005\x005\x005\x005\x005\x005\x005\0\x9b\x002\x006\x006\x006\x006\x006\x006\x006\x006\x006\x006\0\xa1\0\xa2\0\x9b\0[\0A\0\0\x007\x007\x007\x007\x007\x007\x007\x007\x007\x007\x009\0D\0f\0k\0s\0\x83\0\x85\0\x85\0}\0\x8a\0\x85\0\xa3\0^\0\xa5\0D\0\xa6\0\xa7\0\xa8\0\xab\0o\0\xac\0\xad\0\xce\0\xcb\0\xcf\0\xd2\0\xd3\0:\0R\0\x85\0\xd4\0\xd5\0\xd6\0\xd7\0\xd9\0\x8c\0\xda\0a\0\xdb\0\xdc\0w\0\xdd\0\xde\0\xdf\0\x85\0[\0\xcb\0\"\x01>\x01\xe9\0\x98\0\x01\x01P\x01\xf7\0<\0\xfb\x006\x01:\x01Q\x01D\0)\x01R\x01S\x01\x06\x01\x1a\x01D\0w\0\x1e\x01\x0f\x01D\0^\0\x0f\x01T\x01U\x01V\x01G\x01X\x01D\0\xcb\x002\x01G\x01D\0Y\x01D\0D\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0a\0L\x01w\0Z\x01?\0\x01\x01\\\x01G\0G\0G\0G\0G\0G\0N\0N\0N\0N\0N\0N\0N\0N\0N\0N\0\x98\0L\x01]\x01_\x01a\x01b\x01-\x01N\0N\0N\0N\0N\0N\0c\x01\x98\0d\x01G\0G\0G\0G\0G\0G\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\xb4\0\x14\x01L\x01A\0\x14\x01e\x01f\x01h\x01N\0N\0N\0N\0N\0N\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0i\x01j\x01-\x01$\x01k\x01l\x01m\x01O\0O\0O\0O\0O\0O\0P\0P\0P\0P\0P\0P\0P\0P\0P\0P\0n\x01\x1a\x01y\x01\x9d\x01\x1e\x01\x9e\x01\x14\x01P\0P\0P\0P\0P\0P\0[\0\x9f\x01>\x01O\0O\0O\0O\0O\0O\0\xf7\0\xa0\x01\xfb\0\xa1\x01:\x01D\0V\0V\0V\0V\0V\0V\0V\0V\0V\0V\0^\0P\0P\0P\0P\0P\0P\0V\0V\0V\0V\0V\0V\0W\0W\0W\0W\0W\0W\0W\0W\0W\0W\0$\x01)\x01a\0\xa2\x01\xa3\x01w\0\x01\x01W\0W\0W\0W\0W\0W\0\xa5\x016\x01\x98\0V\0V\0V\0V\0V\0V\0\x06\x01\xa6\x01\xa7\x01\xa8\x01\x0f\x01\xa9\x01X\0X\0X\0X\0X\0X\0X\0X\0X\0X\x002\x01W\0W\0W\0W\0W\0W\0X\0X\0X\0X\0X\0X\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0Y\0_\0\x85\x01\xaa\x01\xab\x01\x9a\x01\x85\x01\xac\x01Y\0Y\0Y\0Y\0Y\0Y\0_\0\xb0\0\xad\x01X\0X\0X\0X\0X\0X\0-\x01\xae\x01\xaf\x01\xb0\0\xb0\x01\x9a\x01\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0\xb0\0z\x01Y\0Y\0Y\0Y\0Y\0Y\0\x94\x01\xb1\x01\x14\x01\xb2\x01b\0\x94\x01\xb3\x01\xb4\x01\xb5\x01\xb6\x01\xb7\x01\xd8\x01\xc1\x01_\0\x9a\x01\xd8\x01\xcd\x01b\0\xde\x01_\0\xcd\x01\xe5\x01\x01\x02_\0\xda\x01$\x01\xd7\x01\xd7\x01\x02\x02\xda\x01\xd7\x01_\0\x04\x02\x05\x02\xd8\x01_\0\x06\x02_\0_\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0\xd7\x01\x07\x02z\x01\b\x02\t\x02\n\x02\x0b\x02`\0`\0`\0`\0`\0`\0b\0\f\x02\xd7\x01\xf7\x01\r\x02\x0e\x02b\0\x0f\x02}\x01\x80\x01b\0\x10\x02\xdc\x01\x11\x02\xfb\x01\x12\x02\x13\x02\x14\x02b\0y\x01\x15\x02\xc2\x01b\0\x16\x02b\0b\0`\0`\0`\0`\0`\0`\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xe7\x01\x17\x02\xee\x01\x18\x02\xfb\x01\xee\x01\x19\x02c\0c\0c\0c\0c\0c\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0\xf3\x01}\x01\x80\x01\xe0\x01\x1a\x02\xc5\x01\x1b\x02d\0d\0d\0d\0d\0d\0\x1c\x02\xc2\x01\x1d\x02c\0c\0c\0c\0c\0c\0\x1e\x02\x1f\x02 \x02\xc8\x01\xe7\x01\x85\x01e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0\xff\xffd\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xb6\0\xff\xff\xff\xff\xc5\x01\xb0\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb8\0\xb9\0\xff\xffe\0e\0e\0e\0e\0e\0\xc8\x01\xe0\x01\xff\xff\xb9\0\xcd\x01z\x01\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xb9\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbe\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xbf\0\xc0\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc5\0\xc0\0\xc1\x01\xf7\x01\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc0\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc6\0\xc7\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xe2\0\xc7\0}\x01\x80\x01\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xc7\0\xcc\0\xc2\x01\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xcc\0\xe7\x01\xff\xff\xff\xff\xc7\0\xdc\x01\xee\x01\xfb\x01\xff\xff\xc7\0\xf3\x01\xff\xff\xcc\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xcd\0\xe1\0\xff\xff\xe1\0\xff\xff\xe0\x01\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xe1\0\xcd\0\xc5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xcc\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xe3\0\xff\xff\xff\xff\xff\xff\xff\xff\xc8\x01\xff\xff\xff\xff\xe4\0\xff\xff\xe4\0\xff\xff\xe3\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe4\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe5\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xe6\0\xff\xff\xe3\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xe7\0\xb9\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xe8\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xed\0\xff\xffM\x01\xff\xffM\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01M\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01q\x01\xff\xffM\x01\xff\xff\xff\xff\xc0\0\xff\xff\xff\xff\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0M\x01\xff\xff\xff\xff\xff\xff\xed\0\xc7\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xed\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xff\xff\xf2\0\xff\xff\xff\xff\xf0\0\xff\xff\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf0\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xf2\0\xed\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xff\xff\xff\xff\xff\xff\xff\xff\xf5\0\xff\xff\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0\xf5\0B\x01B\x01\xff\xff\xff\xffB\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01O\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xffO\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xffB\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01B\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf2\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01p\x01\xff\xffp\x01\xff\xffB\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01p\x01\xff\xff\xff\xffB\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01r\x01B\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffB\x01\xff\xff\xff\xffr\x01\xff\xff\xff\xffB\x01\xff\xff\xff\xffs\x01\xff\xffs\x01\xff\xffB\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01s\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01t\x01\xff\xffr\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01u\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01v\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01w\x01\xff\xff~\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\x81\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\x9b\x01\xff\xff\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\x9b\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x7f\x01\x9b\x01\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff~\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01~\x01\xff\xff\xff\xffB\x01~\x01\x81\x01~\x01~\x01\xff\xff\x81\x01\xff\xff\xff\xff\x9b\x01\xff\xff\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\xff\xff\xff\xff\x81\x01\xff\xff\x81\x01\x81\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\xff\xff\xff\xff\xff\xff\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\x82\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xff\xff\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x83\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\xb8\x01\x8a\x01\xb8\x01\xff\xff\xff\xff\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb8\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xb9\x01\xff\xff\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x84\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8a\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8d\x01\xff\xff\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8d\x01\x8f\x01\x8f\x01\xff\xff\xff\xff\x8f\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\x9c\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc6\x01\x8f\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\x9c\x01\x8f\x01\xff\xff\xff\xff\xff\xff\xc6\x01\x8f\x01\xff\xff\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\x8f\x01\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xba\x01\xc6\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xc6\x01\xff\xff\xff\xff\xff\xff\xc6\x01\xba\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xc6\x01\xff\xff\xff\xff\x8f\x01\xc6\x01\xff\xff\xc6\x01\xc6\x01\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xff\xff\xff\xff\xff\xff\xff\xff\xbb\x01\xff\xff\xbb\x01\xff\xff\xba\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbb\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbc\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbd\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbe\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xbf\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xc7\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\x8f\x01\xc9\x01\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xff\xff\xff\xff\xc9\x01\xff\xff\xc9\x01\xc9\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xff\xff\xff\xff\xff\xff\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xca\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xff\xff\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcb\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xff\xff\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xcc\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xd2\x01\xff\xff\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd2\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xd5\x01\xff\xff\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xd5\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xd2\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     default_stockpile=
      [0,
       [0,caml_string_of_jsbytes("money"),200],
       [0,
        [0,caml_string_of_jsbytes("electricity"),0],
        [0,
         [0,caml_string_of_jsbytes("food"),100],
         [0,
          [0,caml_string_of_jsbytes("iron"),0],
          [0,
           [0,caml_string_of_jsbytes("coal"),0],
           [0,[0,caml_string_of_jsbytes("steel"),0],0]]]]]],
     texture_names=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("Sand"),
         caml_string_of_jsbytes("Road"),
         caml_string_of_jsbytes("House"),
         caml_string_of_jsbytes("Oats Plantation"),
         caml_string_of_jsbytes("Power Plant"),
         caml_string_of_jsbytes("Mine"),
         caml_string_of_jsbytes("Barrack"),
         caml_string_of_jsbytes("Nice Apartment"),
         caml_string_of_jsbytes("Steel Mill"),
         caml_string_of_jsbytes("Canned Oats Factory"),
         caml_string_of_jsbytes("Steel Market"),
         caml_string_of_jsbytes("Iron Market"),
         caml_string_of_jsbytes("Canned Oats Market"),
         caml_string_of_jsbytes("The Wonder"),
         caml_string_of_jsbytes("Coal Mine")]);
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _h_=caml_string_of_jsbytes("input"),
     _g_=caml_string_of_jsbytes("output_substring"),
     _e_=caml_string_of_jsbytes("true"),
     _f_=caml_string_of_jsbytes("false"),
     _a_=caml_string_of_jsbytes("Stdlib.Exit"),
     _b_=caml_int64_create_lo_mi_hi(0,0,32752),
     _c_=caml_int64_create_lo_mi_hi(0,0,65520),
     _d_=caml_int64_create_lo_mi_hi(1,0,32752),
     _j_=caml_string_of_jsbytes("\\\\"),
     _k_=caml_string_of_jsbytes("\\'"),
     _l_=caml_string_of_jsbytes("\\b"),
     _m_=caml_string_of_jsbytes("\\t"),
     _n_=caml_string_of_jsbytes("\\n"),
     _o_=caml_string_of_jsbytes("\\r"),
     _i_=caml_string_of_jsbytes("Char.chr"),
     _p_=caml_string_of_jsbytes("nth"),
     _q_=caml_string_of_jsbytes("List.nth"),
     _u_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _t_=caml_string_of_jsbytes("Bytes.blit"),
     _s_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _v_=caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     _w_=caml_string_of_jsbytes("Array.fill"),
     _x_=caml_string_of_jsbytes("Lexing.lex_refill: cannot grow buffer"),
     _y_=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     _z_=caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     _D_=caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     _C_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _B_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _A_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _M_=caml_string_of_jsbytes("%c"),
     _N_=caml_string_of_jsbytes("%s"),
     _O_=caml_string_of_jsbytes("%i"),
     _P_=caml_string_of_jsbytes("%li"),
     _Q_=caml_string_of_jsbytes("%ni"),
     _R_=caml_string_of_jsbytes("%Li"),
     _S_=caml_string_of_jsbytes("%f"),
     _T_=caml_string_of_jsbytes("%B"),
     _U_=caml_string_of_jsbytes("%{"),
     _V_=caml_string_of_jsbytes("%}"),
     _W_=caml_string_of_jsbytes("%("),
     _X_=caml_string_of_jsbytes("%)"),
     _Y_=caml_string_of_jsbytes("%a"),
     _Z_=caml_string_of_jsbytes("%t"),
     ___=caml_string_of_jsbytes("%?"),
     _$_=caml_string_of_jsbytes("%r"),
     _aa_=caml_string_of_jsbytes("%_r"),
     _ab_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _am_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _ae_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _an_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _af_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _ao_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _ag_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _ap_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _ah_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _aq_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _ai_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _ak_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _ac_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _al_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _ad_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _aj_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _bm_=caml_string_of_jsbytes("%u"),
     _bk_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _bl_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _bn_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _bo_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _bp_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bq_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _br_=caml_string_of_jsbytes("@{"),
     _bs_=caml_string_of_jsbytes("@["),
     _bt_=caml_string_of_jsbytes("@{"),
     _bu_=caml_string_of_jsbytes("@["),
     _bj_=caml_string_of_jsbytes("nan"),
     _bh_=caml_string_of_jsbytes("neg_infinity"),
     _bi_=caml_string_of_jsbytes("infinity"),
     _bg_=caml_string_of_jsbytes("."),
     _a6_=caml_string_of_jsbytes("%+nd"),
     _a7_=caml_string_of_jsbytes("% nd"),
     _a9_=caml_string_of_jsbytes("%+ni"),
     _a__=caml_string_of_jsbytes("% ni"),
     _a$_=caml_string_of_jsbytes("%nx"),
     _ba_=caml_string_of_jsbytes("%#nx"),
     _bb_=caml_string_of_jsbytes("%nX"),
     _bc_=caml_string_of_jsbytes("%#nX"),
     _bd_=caml_string_of_jsbytes("%no"),
     _be_=caml_string_of_jsbytes("%#no"),
     _a5_=caml_string_of_jsbytes("%nd"),
     _a8_=caml_string_of_jsbytes("%ni"),
     _bf_=caml_string_of_jsbytes("%nu"),
     _aT_=caml_string_of_jsbytes("%+ld"),
     _aU_=caml_string_of_jsbytes("% ld"),
     _aW_=caml_string_of_jsbytes("%+li"),
     _aX_=caml_string_of_jsbytes("% li"),
     _aY_=caml_string_of_jsbytes("%lx"),
     _aZ_=caml_string_of_jsbytes("%#lx"),
     _a0_=caml_string_of_jsbytes("%lX"),
     _a1_=caml_string_of_jsbytes("%#lX"),
     _a2_=caml_string_of_jsbytes("%lo"),
     _a3_=caml_string_of_jsbytes("%#lo"),
     _aS_=caml_string_of_jsbytes("%ld"),
     _aV_=caml_string_of_jsbytes("%li"),
     _a4_=caml_string_of_jsbytes("%lu"),
     _aG_=caml_string_of_jsbytes("%+Ld"),
     _aH_=caml_string_of_jsbytes("% Ld"),
     _aJ_=caml_string_of_jsbytes("%+Li"),
     _aK_=caml_string_of_jsbytes("% Li"),
     _aL_=caml_string_of_jsbytes("%Lx"),
     _aM_=caml_string_of_jsbytes("%#Lx"),
     _aN_=caml_string_of_jsbytes("%LX"),
     _aO_=caml_string_of_jsbytes("%#LX"),
     _aP_=caml_string_of_jsbytes("%Lo"),
     _aQ_=caml_string_of_jsbytes("%#Lo"),
     _aF_=caml_string_of_jsbytes("%Ld"),
     _aI_=caml_string_of_jsbytes("%Li"),
     _aR_=caml_string_of_jsbytes("%Lu"),
     _at_=caml_string_of_jsbytes("%+d"),
     _au_=caml_string_of_jsbytes("% d"),
     _aw_=caml_string_of_jsbytes("%+i"),
     _ax_=caml_string_of_jsbytes("% i"),
     _ay_=caml_string_of_jsbytes("%x"),
     _az_=caml_string_of_jsbytes("%#x"),
     _aA_=caml_string_of_jsbytes("%X"),
     _aB_=caml_string_of_jsbytes("%#X"),
     _aC_=caml_string_of_jsbytes("%o"),
     _aD_=caml_string_of_jsbytes("%#o"),
     _as_=caml_string_of_jsbytes("%d"),
     _av_=caml_string_of_jsbytes("%i"),
     _aE_=caml_string_of_jsbytes("%u"),
     _E_=caml_string_of_jsbytes("@]"),
     _F_=caml_string_of_jsbytes("@}"),
     _G_=caml_string_of_jsbytes("@?"),
     _H_=caml_string_of_jsbytes("@\n"),
     _I_=caml_string_of_jsbytes("@."),
     _J_=caml_string_of_jsbytes("@@"),
     _K_=caml_string_of_jsbytes("@%"),
     _L_=caml_string_of_jsbytes("@"),
     _ar_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _bw_=caml_string_of_jsbytes("Random.int"),
     _bv_=caml_string_of_jsbytes("x"),
     _bx_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _bB_=[0,0],
     _bA_=[0,caml_string_of_jsbytes("hashtbl.ml"),102,23],
     _hA_=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     _hy_=caml_string_of_jsbytes("CAMLRUNPARAM"),
     _by_=caml_string_of_jsbytes(""),
     _bR_=[3,0,3],
     _bS_=caml_string_of_jsbytes("."),
     _bO_=caml_string_of_jsbytes(">"),
     _bP_=caml_string_of_jsbytes("<\/"),
     _bQ_=caml_string_of_jsbytes(""),
     _bL_=caml_string_of_jsbytes(">"),
     _bM_=caml_string_of_jsbytes("<"),
     _bN_=caml_string_of_jsbytes(""),
     _bK_=caml_string_of_jsbytes("\n"),
     _bJ_=[0,caml_string_of_jsbytes("")],
     _bF_=caml_string_of_jsbytes(""),
     _bG_=caml_string_of_jsbytes(""),
     _bH_=caml_string_of_jsbytes(""),
     _bI_=caml_string_of_jsbytes(""),
     _bE_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _bD_=caml_string_of_jsbytes(""),
     _bC_=caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     _hx_=caml_string_of_jsbytes("TMPDIR"),
     _hw_=caml_string_of_jsbytes("TEMP"),
     _bT_=caml_string_of_jsbytes("Cygwin"),
     _bU_=caml_string_of_jsbytes("Win32"),
     _bV_=caml_string_of_jsbytes("Buf.extend: reached Sys.max_string_length"),
     _c9_=[0,caml_string_of_jsbytes("lib/read.mll"),72,32],
     _c8_=[0,caml_string_of_jsbytes("lib/read.mll"),72,32],
     _ct_=[0,737456202,1],
     _cu_=[0,737456202,0],
     _cv_=caml_string_of_jsbytes("Invalid token"),
     _cw_=caml_string_of_jsbytes("Invalid token"),
     _cx_=caml_string_of_jsbytes("Unexpected end of input"),
     _cy_=caml_string_of_jsbytes("Invalid token"),
     _cz_=caml_string_of_jsbytes("Unexpected end of input"),
     _cA_=caml_string_of_jsbytes("Invalid escape sequence"),
     _cB_=caml_string_of_jsbytes("Unexpected end of input"),
     _cC_=
      caml_string_of_jsbytes
       ("Invalid low surrogate for code point beyond U+FFFF"),
     _cD_=
      caml_string_of_jsbytes
       ("Missing escape sequence representing low surrogate for code point beyond U+FFFF"),
     _cE_=caml_string_of_jsbytes("Unexpected end of input"),
     _cF_=caml_string_of_jsbytes("Unterminated comment"),
     _cG_=caml_string_of_jsbytes("Expected string or identifier but found"),
     _cH_=caml_string_of_jsbytes("Unexpected end of input"),
     _cI_=caml_string_of_jsbytes("Expected ',' or ']' but found"),
     _cJ_=caml_string_of_jsbytes("Unexpected end of input"),
     _cK_=caml_string_of_jsbytes("Expected ',' or '}' but found"),
     _cL_=caml_string_of_jsbytes("Unexpected end of input"),
     _cM_=caml_string_of_jsbytes("Expected ':' but found"),
     _cN_=caml_string_of_jsbytes("Unexpected end of input"),
     _c7_=caml_string_of_jsbytes("Expected string, got "),
     _c6_=caml_string_of_jsbytes("Expected array, got "),
     _c5_=caml_string_of_jsbytes("Expected int, got "),
     _c4_=caml_string_of_jsbytes("Expected bool, got "),
     _c2_=caml_string_of_jsbytes("' of non-object type "),
     _c3_=caml_string_of_jsbytes("Can't get member '"),
     _cS_=caml_string_of_jsbytes("null"),
     _cU_=caml_string_of_jsbytes("object"),
     _cV_=caml_string_of_jsbytes("array"),
     _cW_=caml_string_of_jsbytes("bool"),
     _cX_=caml_string_of_jsbytes("variant"),
     _cT_=caml_string_of_jsbytes("tuple"),
     _cY_=caml_string_of_jsbytes("float"),
     _cZ_=caml_string_of_jsbytes("int"),
     _c0_=caml_string_of_jsbytes("intlit"),
     _c1_=caml_string_of_jsbytes("string"),
     _cQ_=caml_string_of_jsbytes("Blank input data"),
     _cP_=caml_string_of_jsbytes("Blank input data"),
     _cO_=caml_string_of_jsbytes("Junk after end of JSON value:"),
     _cs_=caml_string_of_jsbytes("Int overflow"),
     _cr_=caml_string_of_jsbytes("Int overflow"),
     _cp_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" '"),[2,0,[2,0,[12,39,0]]]]],
       caml_string_of_jsbytes("%s '%s%s'")],
     _co_=[0,caml_string_of_jsbytes("lib/read.mll"),72,32],
     _cn_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" '"),[2,0,[12,39,0]]]],
       caml_string_of_jsbytes("%s '%s'")],
     _ci_=
      [0,
       [11,
        caml_string_of_jsbytes("File "),
        [2,0,[11,caml_string_of_jsbytes(", line"),0]]],
       caml_string_of_jsbytes("File %s, line")],
     _cm_=caml_string_of_jsbytes("Line"),
     _cj_=
      [0,
       [11,caml_string_of_jsbytes("byte "),[4,3,0,0,0]],
       caml_string_of_jsbytes("byte %i")],
     _cl_=
      [0,
       [11,caml_string_of_jsbytes("bytes "),[4,3,0,0,[12,45,[4,3,0,0,0]]]],
       caml_string_of_jsbytes("bytes %i-%i")],
     _ck_=
      [0,
       [2,
        0,
        [12,
         32,
         [4,
          3,
          0,
          0,
          [11,
           caml_string_of_jsbytes(", "),
           [2,0,[11,caml_string_of_jsbytes(":\n"),[2,0,0]]]]]]],
       caml_string_of_jsbytes("%s %i, %s:\n%s")],
     _ch_=[0,caml_string_of_jsbytes("lib/read.mll"),44,13],
     _cd_=caml_string_of_jsbytes("NaN"),
     _ce_=[0,[8,[0,0,3],0,[0,16],0],caml_string_of_jsbytes("%.16g")],
     _cg_=[0,[8,[0,0,3],0,[0,17],0],caml_string_of_jsbytes("%.17g")],
     _cf_=caml_string_of_jsbytes(".0"),
     _cb_=caml_string_of_jsbytes("Infinity"),
     _cc_=caml_string_of_jsbytes("-Infinity"),
     _b$_=caml_string_of_jsbytes("true"),
     _ca_=caml_string_of_jsbytes("false"),
     _b__=caml_string_of_jsbytes("null"),
     _b4_=caml_string_of_jsbytes("\\b"),
     _b5_=caml_string_of_jsbytes("\\t"),
     _b6_=caml_string_of_jsbytes("\\n"),
     _b7_=caml_string_of_jsbytes("\\f"),
     _b8_=caml_string_of_jsbytes("\\r"),
     _b9_=caml_string_of_jsbytes('\\"'),
     _b3_=caml_string_of_jsbytes("\\\\"),
     _b2_=
      [0,
       [11,
        caml_string_of_jsbytes("src="),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(" start="),
          [4,
           3,
           0,
           0,
           [11,caml_string_of_jsbytes(" len="),[4,3,0,0,[12,10,[10,0]]]]]]]],
       caml_string_of_jsbytes("src=%S start=%i len=%i\n%!")],
     _b1_=caml_string_of_jsbytes("\\u00"),
     _b0_=[0,caml_string_of_jsbytes("common.ml"),57,4],
     _bW_=caml_string_of_jsbytes("Yojson.Json_error"),
     _bX_=caml_string_of_jsbytes("Yojson.End_of_array"),
     _bY_=caml_string_of_jsbytes("Yojson.End_of_object"),
     _bZ_=caml_string_of_jsbytes("Yojson.End_of_input"),
     _cq_=caml_string_of_jsbytes("Yojson.Basic.Int_overflow"),
     _cR_=caml_string_of_jsbytes("Yojson.Basic.Util.Type_error"),
     _dc_=caml_string_of_jsbytes("E2BIG"),
     _de_=caml_string_of_jsbytes("EACCES"),
     _df_=caml_string_of_jsbytes("EAGAIN"),
     _dg_=caml_string_of_jsbytes("EBADF"),
     _dh_=caml_string_of_jsbytes("EBUSY"),
     _di_=caml_string_of_jsbytes("ECHILD"),
     _dj_=caml_string_of_jsbytes("EDEADLK"),
     _dk_=caml_string_of_jsbytes("EDOM"),
     _dl_=caml_string_of_jsbytes("EEXIST"),
     _dm_=caml_string_of_jsbytes("EFAULT"),
     _dn_=caml_string_of_jsbytes("EFBIG"),
     _do_=caml_string_of_jsbytes("EINTR"),
     _dp_=caml_string_of_jsbytes("EINVAL"),
     _dq_=caml_string_of_jsbytes("EIO"),
     _dr_=caml_string_of_jsbytes("EISDIR"),
     _ds_=caml_string_of_jsbytes("EMFILE"),
     _dt_=caml_string_of_jsbytes("EMLINK"),
     _du_=caml_string_of_jsbytes("ENAMETOOLONG"),
     _dv_=caml_string_of_jsbytes("ENFILE"),
     _dw_=caml_string_of_jsbytes("ENODEV"),
     _dx_=caml_string_of_jsbytes("ENOENT"),
     _dy_=caml_string_of_jsbytes("ENOEXEC"),
     _dz_=caml_string_of_jsbytes("ENOLCK"),
     _dA_=caml_string_of_jsbytes("ENOMEM"),
     _dB_=caml_string_of_jsbytes("ENOSPC"),
     _dC_=caml_string_of_jsbytes("ENOSYS"),
     _dD_=caml_string_of_jsbytes("ENOTDIR"),
     _dE_=caml_string_of_jsbytes("ENOTEMPTY"),
     _dF_=caml_string_of_jsbytes("ENOTTY"),
     _dG_=caml_string_of_jsbytes("ENXIO"),
     _dH_=caml_string_of_jsbytes("EPERM"),
     _dI_=caml_string_of_jsbytes("EPIPE"),
     _dJ_=caml_string_of_jsbytes("ERANGE"),
     _dK_=caml_string_of_jsbytes("EROFS"),
     _dL_=caml_string_of_jsbytes("ESPIPE"),
     _dM_=caml_string_of_jsbytes("ESRCH"),
     _dN_=caml_string_of_jsbytes("EXDEV"),
     _dO_=caml_string_of_jsbytes("EWOULDBLOCK"),
     _dP_=caml_string_of_jsbytes("EINPROGRESS"),
     _dQ_=caml_string_of_jsbytes("EALREADY"),
     _dR_=caml_string_of_jsbytes("ENOTSOCK"),
     _dS_=caml_string_of_jsbytes("EDESTADDRREQ"),
     _dT_=caml_string_of_jsbytes("EMSGSIZE"),
     _dU_=caml_string_of_jsbytes("EPROTOTYPE"),
     _dV_=caml_string_of_jsbytes("ENOPROTOOPT"),
     _dW_=caml_string_of_jsbytes("EPROTONOSUPPORT"),
     _dX_=caml_string_of_jsbytes("ESOCKTNOSUPPORT"),
     _dY_=caml_string_of_jsbytes("EOPNOTSUPP"),
     _dZ_=caml_string_of_jsbytes("EPFNOSUPPORT"),
     _d0_=caml_string_of_jsbytes("EAFNOSUPPORT"),
     _d1_=caml_string_of_jsbytes("EADDRINUSE"),
     _d2_=caml_string_of_jsbytes("EADDRNOTAVAIL"),
     _d3_=caml_string_of_jsbytes("ENETDOWN"),
     _d4_=caml_string_of_jsbytes("ENETUNREACH"),
     _d5_=caml_string_of_jsbytes("ENETRESET"),
     _d6_=caml_string_of_jsbytes("ECONNABORTED"),
     _d7_=caml_string_of_jsbytes("ECONNRESET"),
     _d8_=caml_string_of_jsbytes("ENOBUFS"),
     _d9_=caml_string_of_jsbytes("EISCONN"),
     _d__=caml_string_of_jsbytes("ENOTCONN"),
     _d$_=caml_string_of_jsbytes("ESHUTDOWN"),
     _ea_=caml_string_of_jsbytes("ETOOMANYREFS"),
     _eb_=caml_string_of_jsbytes("ETIMEDOUT"),
     _ec_=caml_string_of_jsbytes("ECONNREFUSED"),
     _ed_=caml_string_of_jsbytes("EHOSTDOWN"),
     _ee_=caml_string_of_jsbytes("EHOSTUNREACH"),
     _ef_=caml_string_of_jsbytes("ELOOP"),
     _eg_=caml_string_of_jsbytes("EOVERFLOW"),
     _eh_=
      [0,
       [11,caml_string_of_jsbytes("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_string_of_jsbytes("EUNKNOWNERR %d")],
     _dd_=
      [0,
       [11,
        caml_string_of_jsbytes("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(", "),
          [3,0,[11,caml_string_of_jsbytes(", "),[3,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("Unix.Unix_error(Unix.%s, %S, %S)")],
     _c__=caml_string_of_jsbytes("Unix.Unix_error"),
     _c$_=caml_string_of_jsbytes(""),
     _da_=caml_string_of_jsbytes(""),
     _db_=caml_string_of_jsbytes("Unix.Unix_error"),
     _ei_=caml_string_of_jsbytes("0.0.0.0"),
     _ej_=caml_string_of_jsbytes("127.0.0.1"),
     _hv_=caml_string_of_jsbytes("::"),
     _hu_=caml_string_of_jsbytes("::1"),
     _ek_=caml_string_of_jsbytes("Js_of_ocaml__Js.Error"),
     _el_=caml_string_of_jsbytes("jsError"),
     _ev_=caml_string_of_jsbytes("label"),
     _eu_=caml_string_of_jsbytes("input"),
     _et_=caml_string_of_jsbytes("canvas"),
     _es_=caml_string_of_jsbytes("button"),
     _er_=caml_string_of_jsbytes("span"),
     _eq_=caml_string_of_jsbytes("img"),
     _ep_=caml_string_of_jsbytes("a"),
     _eo_=caml_string_of_jsbytes("h1"),
     _en_=caml_string_of_jsbytes("div"),
     _em_=caml_string_of_jsbytes("button"),
     _eV_=caml_string_of_jsbytes("food"),
     _gj_=caml_string_of_jsbytes("money"),
     _gk_=[0,caml_string_of_jsbytes("money"),1000000],
     _gi_=caml_string_of_jsbytes("money"),
     _gh_=caml_string_of_jsbytes("money"),
     _gd_=caml_string_of_jsbytes("money"),
     _gg_=caml_string_of_jsbytes("easy"),
     _gf_=caml_string_of_jsbytes("medium"),
     _ge_=caml_string_of_jsbytes("hard"),
     _f6_=caml_string_of_jsbytes("events_init.json"),
     _f3_=caml_string_of_jsbytes("text"),
     _f4_=caml_string_of_jsbytes("resource"),
     _f5_=caml_string_of_jsbytes("defense"),
     _f1_=caml_string_of_jsbytes("name"),
     _f2_=caml_string_of_jsbytes("amount"),
     _fG_=caml_string_of_jsbytes("stockpile"),
     _fH_=caml_string_of_jsbytes("is_final_building_placed"),
     _fI_=caml_string_of_jsbytes("condition"),
     _fJ_=caml_string_of_jsbytes("is_game_over"),
     _fK_=caml_string_of_jsbytes("is_paused"),
     _fL_=caml_string_of_jsbytes("starvation_counter"),
     _fM_=caml_string_of_jsbytes("deficit_counter"),
     _fN_=caml_string_of_jsbytes("food"),
     _fO_=caml_string_of_jsbytes("unemployed"),
     _fP_=caml_string_of_jsbytes("population"),
     _fQ_=caml_string_of_jsbytes("housing_capacity"),
     _fR_=caml_string_of_jsbytes("cells"),
     _fS_=caml_string_of_jsbytes("y"),
     _fT_=caml_string_of_jsbytes("x"),
     _fU_=caml_string_of_jsbytes("cell_size"),
     _fV_=caml_string_of_jsbytes("map_length"),
     _fW_=caml_string_of_jsbytes("y"),
     _fX_=caml_string_of_jsbytes("x"),
     _fY_=caml_string_of_jsbytes("canvas_size"),
     _fZ_=caml_string_of_jsbytes("tick"),
     _f0_=caml_string_of_jsbytes("is_sandbox"),
     _fj_=caml_string_of_jsbytes("y"),
     _fk_=caml_string_of_jsbytes("cell_size"),
     _fl_=caml_string_of_jsbytes("x"),
     _fm_=caml_string_of_jsbytes("cell_size"),
     _fn_=caml_string_of_jsbytes("map_length"),
     _fo_=caml_string_of_jsbytes("y"),
     _fp_=caml_string_of_jsbytes("canvas_size"),
     _fq_=caml_string_of_jsbytes("x"),
     _fr_=caml_string_of_jsbytes("canvas_size"),
     _fs_=caml_string_of_jsbytes("is_final_building_placed"),
     _ft_=caml_string_of_jsbytes("condition"),
     _fu_=caml_string_of_jsbytes("is_game_over"),
     _fv_=[0,1],
     _fw_=caml_string_of_jsbytes("starvation_counter"),
     _fx_=caml_string_of_jsbytes("deficit_counter"),
     _fy_=caml_string_of_jsbytes("food"),
     _fz_=caml_string_of_jsbytes("unemployed"),
     _fA_=caml_string_of_jsbytes("population"),
     _fB_=caml_string_of_jsbytes("housing_capacity"),
     _fC_=caml_string_of_jsbytes("tick"),
     _fD_=caml_string_of_jsbytes("is_sandbox"),
     _fE_=caml_string_of_jsbytes("cells"),
     _fF_=caml_string_of_jsbytes("stockpile"),
     _fg_=caml_string_of_jsbytes("object"),
     _fh_=caml_string_of_jsbytes("y"),
     _fi_=caml_string_of_jsbytes("x"),
     _fe_=caml_string_of_jsbytes(""),
     _ff_=caml_string_of_jsbytes("road"),
     _fc_=caml_string_of_jsbytes("amount"),
     _fd_=caml_string_of_jsbytes("name"),
     _fa_=caml_string_of_jsbytes(""),
     _fb_=caml_string_of_jsbytes("road"),
     _e$_=caml_string_of_jsbytes("object"),
     _e__=caml_string_of_jsbytes("y"),
     _e9_=caml_string_of_jsbytes("x"),
     _e7_=caml_string_of_jsbytes("amount"),
     _e8_=caml_string_of_jsbytes("name"),
     _e6_=caml_string_of_jsbytes(""),
     _e5_=caml_string_of_jsbytes("money"),
     _e4_=caml_string_of_jsbytes("money"),
     _e3_=caml_string_of_jsbytes(""),
     _e2_=caml_string_of_jsbytes("money"),
     _e1_=caml_string_of_jsbytes("money"),
     _eW_=
      caml_string_of_jsbytes
       ("You have taken too long and the camel people have had enough of your leadership and they have all abandoned you."),
     _eX_=
      caml_string_of_jsbytes
       ("Without food your people have starved to death. Camel City now lies abandoned; littered with skeletons"),
     _eY_=
      caml_string_of_jsbytes
       ("Your city is bankrupted. In desperate need to pay off the debt, you sold Camel City to the nation of Java Cafe, whose upper classes use it as a source of cheap exploitable labor."),
     _eZ_=
      caml_string_of_jsbytes
       ("By building the wonder you have resurected the great camel prophet, The Clarkson. He shall now lead your people to victory against the Python Empire. You have won and saved camelkind"),
     _e0_=caml_string_of_jsbytes(""),
     _eU_=caml_string_of_jsbytes("food"),
     _eT_=caml_string_of_jsbytes("food"),
     _eR_=caml_string_of_jsbytes("House"),
     _eS_=caml_string_of_jsbytes("Nice Apartment"),
     _eP_=caml_string_of_jsbytes(""),
     _eQ_=caml_string_of_jsbytes(""),
     _eC_=caml_string_of_jsbytes("amount"),
     _eD_=caml_string_of_jsbytes("name"),
     _ew_=caml_string_of_jsbytes("name"),
     _ex_=caml_string_of_jsbytes("cost"),
     _ey_=caml_string_of_jsbytes("maintenance"),
     _eI_=caml_string_of_jsbytes("amount"),
     _eJ_=caml_string_of_jsbytes("output"),
     _eK_=caml_string_of_jsbytes("name"),
     _eL_=caml_string_of_jsbytes("output"),
     _ez_=[0,caml_string_of_jsbytes(""),0],
     _eA_=caml_string_of_jsbytes("tax"),
     _eB_=caml_string_of_jsbytes("defense"),
     _eE_=caml_string_of_jsbytes("resource_dependency"),
     _eF_=caml_string_of_jsbytes("population_dependency"),
     _eG_=caml_string_of_jsbytes("housing"),
     _eH_=caml_string_of_jsbytes("is_final_building"),
     _eM_=caml_string_of_jsbytes("buildings"),
     _eO_=caml_string_of_jsbytes("buildings_init.json"),
     _f7_=caml_string_of_jsbytes("hard"),
     _f8_=caml_string_of_jsbytes("hard"),
     _f__=caml_string_of_jsbytes("medium"),
     _f$_=caml_string_of_jsbytes("medium"),
     _gb_=caml_string_of_jsbytes("easy"),
     _gc_=caml_string_of_jsbytes("easy"),
     _hq_=caml_string_of_jsbytes(""),
     _hs_=caml_string_of_jsbytes("money"),
     _hr_=[0,1],
     _ht_=[0,caml_string_of_jsbytes("money"),1000000],
     _hp_=caml_string_of_jsbytes("Cell Size: "),
     _hn_=caml_string_of_jsbytes(""),
     _ho_=caml_string_of_jsbytes(""),
     _hm_=caml_string_of_jsbytes("save_file_name"),
     _hl_=caml_string_of_jsbytes("data:text/json;charset=utf-8,"),
     _hk_=caml_string_of_jsbytes(""),
     _hj_=caml_string_of_jsbytes(" $"),
     _hi_=caml_string_of_jsbytes("0"),
     _hh_=caml_string_of_jsbytes("Sand"),
     _hd_=caml_string_of_jsbytes("Road"),
     _he_=caml_string_of_jsbytes("Sand"),
     _hf_=caml_string_of_jsbytes("Road"),
     _hg_=caml_string_of_jsbytes("Sand"),
     _g9_=caml_string_of_jsbytes("Output Resource: "),
     _g__=caml_string_of_jsbytes("Output Amount: "),
     _g$_=caml_string_of_jsbytes("Income: "),
     _ha_=caml_string_of_jsbytes("Defense: "),
     _hb_=caml_string_of_jsbytes("Maintenance: "),
     _hc_=caml_string_of_jsbytes(""),
     _g5_=caml_string_of_jsbytes("Sand"),
     _g6_=caml_string_of_jsbytes("Road"),
     _g3_=caml_string_of_jsbytes("Resume"),
     _g4_=caml_string_of_jsbytes("Pause"),
     _g2_=caml_string_of_jsbytes("Starvation Counter: "),
     _g1_=caml_string_of_jsbytes("Deficit Counter: "),
     _g0_=caml_string_of_jsbytes("steel"),
     _gZ_=caml_string_of_jsbytes("coal"),
     _gY_=caml_string_of_jsbytes("iron"),
     _gX_=caml_string_of_jsbytes("electricity"),
     _gW_=caml_string_of_jsbytes("food"),
     _gV_=caml_string_of_jsbytes("money"),
     _gU_=caml_string_of_jsbytes("Population: "),
     _gT_=caml_string_of_jsbytes("Tick: "),
     _gS_=caml_string_of_jsbytes(": "),
     _gQ_=caml_string_of_jsbytes(".png"),
     _gR_=caml_string_of_jsbytes("textures/"),
     _gl_=caml_string_of_jsbytes("bg"),
     _gm_=caml_string_of_jsbytes("fg"),
     _gn_=caml_string_of_jsbytes("main"),
     _go_=caml_string_of_jsbytes("startup"),
     _gp_=caml_string_of_jsbytes("game"),
     _gq_=caml_string_of_jsbytes("navbar_buttons"),
     _gr_=caml_string_of_jsbytes("notification"),
     _gs_=caml_string_of_jsbytes("info"),
     _gt_=caml_string_of_jsbytes("info_container"),
     _gu_=caml_string_of_jsbytes("notification_container"),
     _gv_=caml_string_of_jsbytes("building_selection"),
     _gw_=caml_string_of_jsbytes("tick"),
     _gx_=caml_string_of_jsbytes("population"),
     _gy_=caml_string_of_jsbytes("money"),
     _gz_=caml_string_of_jsbytes("food"),
     _gA_=caml_string_of_jsbytes("electricity"),
     _gB_=caml_string_of_jsbytes("iron"),
     _gC_=caml_string_of_jsbytes("coal"),
     _gD_=caml_string_of_jsbytes("steel"),
     _gE_=caml_string_of_jsbytes("deficit"),
     _gF_=caml_string_of_jsbytes("starvation"),
     _gG_=caml_string_of_jsbytes("notification_content"),
     _gH_=caml_string_of_jsbytes("save_button"),
     _gI_=caml_string_of_jsbytes("pause_button"),
     _gJ_=caml_string_of_jsbytes("close_notificaation"),
     _gK_=caml_string_of_jsbytes("submit"),
     _gL_=caml_string_of_jsbytes("sandbox"),
     _gM_=caml_string_of_jsbytes("cell_size"),
     _gN_=caml_string_of_jsbytes("game_save"),
     _gO_=caml_string_of_jsbytes("start_save"),
     _gP_=caml_string_of_jsbytes("cell_size_label"),
     _g7_=caml_string_of_jsbytes("yes");
    function erase_rel(param)
     { /*<<camlinternalFormatBasics.ml 528 8>>*/ if(typeof param === "number")
        /*<<camlinternalFormatBasics.ml 562 20>>*/ return 0;
      else
        /*<<camlinternalFormatBasics.ml 528 8>>*/ switch(param[0])
        {case 0:
           /*<<camlinternalFormatBasics.ml 533 4>>*/  /*<<camlinternalFormatBasics.ml 533 4>>*/ var
           rest=
            param[1];
           /*<<camlinternalFormatBasics.ml 533 12>>*/ return [0,
                   /*<<camlinternalFormatBasics.ml 533 12>>*/ erase_rel(rest)];
         case 1:
           /*<<camlinternalFormatBasics.ml 535 4>>*/  /*<<camlinternalFormatBasics.ml 535 4>>*/ var
           rest$0=
            param[1];
           /*<<camlinternalFormatBasics.ml 535 14>>*/ return [1,
                   /*<<camlinternalFormatBasics.ml 535 14>>*/ erase_rel
                   (rest$0)];
         case 2:
           /*<<camlinternalFormatBasics.ml 537 4>>*/  /*<<camlinternalFormatBasics.ml 537 4>>*/ var
           rest$1=
            param[1];
           /*<<camlinternalFormatBasics.ml 537 11>>*/ return [2,
                   /*<<camlinternalFormatBasics.ml 537 11>>*/ erase_rel
                   (rest$1)];
         case 3:
           /*<<camlinternalFormatBasics.ml 539 4>>*/  /*<<camlinternalFormatBasics.ml 539 4>>*/ var
           rest$2=
            param[1];
           /*<<camlinternalFormatBasics.ml 539 13>>*/ return [3,
                   /*<<camlinternalFormatBasics.ml 539 13>>*/ erase_rel
                   (rest$2)];
         case 4:
           /*<<camlinternalFormatBasics.ml 543 4>>*/  /*<<camlinternalFormatBasics.ml 543 4>>*/ var
           rest$3=
            param[1];
           /*<<camlinternalFormatBasics.ml 543 17>>*/ return [4,
                   /*<<camlinternalFormatBasics.ml 543 17>>*/ erase_rel
                   (rest$3)];
         case 5:
           /*<<camlinternalFormatBasics.ml 541 4>>*/  /*<<camlinternalFormatBasics.ml 541 4>>*/ var
           rest$4=
            param[1];
           /*<<camlinternalFormatBasics.ml 541 13>>*/ return [5,
                   /*<<camlinternalFormatBasics.ml 541 13>>*/ erase_rel
                   (rest$4)];
         case 6:
           /*<<camlinternalFormatBasics.ml 545 4>>*/  /*<<camlinternalFormatBasics.ml 545 4>>*/ var
           rest$5=
            param[1];
           /*<<camlinternalFormatBasics.ml 545 13>>*/ return [6,
                   /*<<camlinternalFormatBasics.ml 545 13>>*/ erase_rel
                   (rest$5)];
         case 7:
           /*<<camlinternalFormatBasics.ml 547 4>>*/  /*<<camlinternalFormatBasics.ml 547 4>>*/ var
           rest$6=
            param[1];
           /*<<camlinternalFormatBasics.ml 547 12>>*/ return [7,
                   /*<<camlinternalFormatBasics.ml 547 12>>*/ erase_rel
                   (rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];
           /*<<camlinternalFormatBasics.ml 549 23>>*/ return [8,
                  ty,
                   /*<<camlinternalFormatBasics.ml 549 23>>*/ erase_rel
                   (rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
           /*<<camlinternalFormatBasics.ml 551 31>>*/ return [9,
                  ty1,
                  ty1,
                   /*<<camlinternalFormatBasics.ml 551 31>>*/ erase_rel
                   (rest$8)];
         case 10:
           /*<<camlinternalFormatBasics.ml 553 4>>*/  /*<<camlinternalFormatBasics.ml 553 4>>*/ var
           rest$9=
            param[1];
           /*<<camlinternalFormatBasics.ml 553 13>>*/ return [10,
                   /*<<camlinternalFormatBasics.ml 553 13>>*/ erase_rel
                   (rest$9)];
         case 11:
           /*<<camlinternalFormatBasics.ml 555 4>>*/  /*<<camlinternalFormatBasics.ml 555 4>>*/ var
           rest$10=
            param[1];
           /*<<camlinternalFormatBasics.ml 555 13>>*/ return [11,
                   /*<<camlinternalFormatBasics.ml 555 13>>*/ erase_rel
                   (rest$10)];
         case 12:
           /*<<camlinternalFormatBasics.ml 557 4>>*/  /*<<camlinternalFormatBasics.ml 557 4>>*/ var
           rest$11=
            param[1];
           /*<<camlinternalFormatBasics.ml 557 11>>*/ return [12,
                   /*<<camlinternalFormatBasics.ml 557 11>>*/ erase_rel
                   (rest$11)];
         case 13:
           /*<<camlinternalFormatBasics.ml 559 4>>*/  /*<<camlinternalFormatBasics.ml 559 4>>*/ var
           rest$12=
            param[1];
           /*<<camlinternalFormatBasics.ml 559 14>>*/ return [13,
                   /*<<camlinternalFormatBasics.ml 559 14>>*/ erase_rel
                   (rest$12)];
         default:
           /*<<camlinternalFormatBasics.ml 561 4>>*/  /*<<camlinternalFormatBasics.ml 561 4>>*/ var
           rest$13=
            param[1];
           /*<<camlinternalFormatBasics.ml 561 22>>*/ return [14,
                   /*<<camlinternalFormatBasics.ml 561 22>>*/ erase_rel
                   (rest$13)]} /*<<camlinternalFormatBasics.ml 562 32>>*/ }
    function concat_fmtty(fmtty1,fmtty2)
     { /*<<camlinternalFormatBasics.ml 590 21>>*/ if
       (typeof fmtty1 === "number")
        /*<<camlinternalFormatBasics.ml 621 20>>*/ return fmtty2;
      else
        /*<<camlinternalFormatBasics.ml 590 21>>*/ switch(fmtty1[0])
        {case 0:
           /*<<camlinternalFormatBasics.ml 592 4>>*/  /*<<camlinternalFormatBasics.ml 592 4>>*/ var
           rest=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 592 12>>*/ return [0,
                   /*<<camlinternalFormatBasics.ml 592 12>>*/ concat_fmtty
                   (rest,fmtty2)];
         case 1:
           /*<<camlinternalFormatBasics.ml 594 4>>*/  /*<<camlinternalFormatBasics.ml 594 4>>*/ var
           rest$0=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 594 14>>*/ return [1,
                   /*<<camlinternalFormatBasics.ml 594 14>>*/ concat_fmtty
                   (rest$0,fmtty2)];
         case 2:
           /*<<camlinternalFormatBasics.ml 596 4>>*/  /*<<camlinternalFormatBasics.ml 596 4>>*/ var
           rest$1=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 596 11>>*/ return [2,
                   /*<<camlinternalFormatBasics.ml 596 11>>*/ concat_fmtty
                   (rest$1,fmtty2)];
         case 3:
           /*<<camlinternalFormatBasics.ml 598 4>>*/  /*<<camlinternalFormatBasics.ml 598 4>>*/ var
           rest$2=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 598 13>>*/ return [3,
                   /*<<camlinternalFormatBasics.ml 598 13>>*/ concat_fmtty
                   (rest$2,fmtty2)];
         case 4:
           /*<<camlinternalFormatBasics.ml 600 4>>*/  /*<<camlinternalFormatBasics.ml 600 4>>*/ var
           rest$3=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 600 17>>*/ return [4,
                   /*<<camlinternalFormatBasics.ml 600 17>>*/ concat_fmtty
                   (rest$3,fmtty2)];
         case 5:
           /*<<camlinternalFormatBasics.ml 602 4>>*/  /*<<camlinternalFormatBasics.ml 602 4>>*/ var
           rest$4=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 602 13>>*/ return [5,
                   /*<<camlinternalFormatBasics.ml 602 13>>*/ concat_fmtty
                   (rest$4,fmtty2)];
         case 6:
           /*<<camlinternalFormatBasics.ml 604 4>>*/  /*<<camlinternalFormatBasics.ml 604 4>>*/ var
           rest$5=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 604 13>>*/ return [6,
                   /*<<camlinternalFormatBasics.ml 604 13>>*/ concat_fmtty
                   (rest$5,fmtty2)];
         case 7:
           /*<<camlinternalFormatBasics.ml 606 4>>*/  /*<<camlinternalFormatBasics.ml 606 4>>*/ var
           rest$6=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 606 12>>*/ return [7,
                   /*<<camlinternalFormatBasics.ml 606 12>>*/ concat_fmtty
                   (rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
           /*<<camlinternalFormatBasics.ml 618 23>>*/ return [8,
                  ty,
                   /*<<camlinternalFormatBasics.ml 618 23>>*/ concat_fmtty
                   (rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
           /*<<camlinternalFormatBasics.ml 620 31>>*/ return [9,
                  ty1,
                  ty2,
                   /*<<camlinternalFormatBasics.ml 620 31>>*/ concat_fmtty
                   (rest$8,fmtty2)];
         case 10:
           /*<<camlinternalFormatBasics.ml 608 4>>*/  /*<<camlinternalFormatBasics.ml 608 4>>*/ var
           rest$9=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 608 13>>*/ return [10,
                   /*<<camlinternalFormatBasics.ml 608 13>>*/ concat_fmtty
                   (rest$9,fmtty2)];
         case 11:
           /*<<camlinternalFormatBasics.ml 610 4>>*/  /*<<camlinternalFormatBasics.ml 610 4>>*/ var
           rest$10=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 610 13>>*/ return [11,
                   /*<<camlinternalFormatBasics.ml 610 13>>*/ concat_fmtty
                   (rest$10,fmtty2)];
         case 12:
           /*<<camlinternalFormatBasics.ml 612 4>>*/  /*<<camlinternalFormatBasics.ml 612 4>>*/ var
           rest$11=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 612 11>>*/ return [12,
                   /*<<camlinternalFormatBasics.ml 612 11>>*/ concat_fmtty
                   (rest$11,fmtty2)];
         case 13:
           /*<<camlinternalFormatBasics.ml 614 4>>*/  /*<<camlinternalFormatBasics.ml 614 4>>*/ var
           rest$12=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 614 14>>*/ return [13,
                   /*<<camlinternalFormatBasics.ml 614 14>>*/ concat_fmtty
                   (rest$12,fmtty2)];
         default:
           /*<<camlinternalFormatBasics.ml 616 4>>*/  /*<<camlinternalFormatBasics.ml 616 4>>*/ var
           rest$13=
            fmtty1[1];
           /*<<camlinternalFormatBasics.ml 616 22>>*/ return [14,
                   /*<<camlinternalFormatBasics.ml 616 22>>*/ concat_fmtty
                   (rest$13,fmtty2)]} /*<<camlinternalFormatBasics.ml 621 26>>*/ }
    function concat_fmt(fmt1,fmt2)
     { /*<<camlinternalFormatBasics.ml 631 17>>*/ if(typeof fmt1 === "number")
        /*<<camlinternalFormatBasics.ml 690 4>>*/ return fmt2;
      else
        /*<<camlinternalFormatBasics.ml 631 17>>*/ switch(fmt1[0])
        {case 0:
           /*<<camlinternalFormatBasics.ml 649 4>>*/  /*<<camlinternalFormatBasics.ml 649 4>>*/ var
           rest=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 649 9>>*/ return [0,
                   /*<<camlinternalFormatBasics.ml 649 9>>*/ concat_fmt
                   (rest,fmt2)];
         case 1:
           /*<<camlinternalFormatBasics.ml 651 4>>*/  /*<<camlinternalFormatBasics.ml 651 4>>*/ var
           rest$0=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 651 14>>*/ return [1,
                   /*<<camlinternalFormatBasics.ml 651 14>>*/ concat_fmt
                   (rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
           /*<<camlinternalFormatBasics.ml 633 17>>*/ return [2,
                  pad,
                   /*<<camlinternalFormatBasics.ml 633 17>>*/ concat_fmt
                   (rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
           /*<<camlinternalFormatBasics.ml 635 22>>*/ return [3,
                  pad$0,
                   /*<<camlinternalFormatBasics.ml 635 22>>*/ concat_fmt
                   (rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
           /*<<camlinternalFormatBasics.ml 638 27>>*/ return [4,
                  iconv,
                  pad$1,
                  prec,
                   /*<<camlinternalFormatBasics.ml 638 27>>*/ concat_fmt
                   (rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
           /*<<camlinternalFormatBasics.ml 640 29>>*/ return [5,
                  iconv$0,
                  pad$2,
                  prec$0,
                   /*<<camlinternalFormatBasics.ml 640 29>>*/ concat_fmt
                   (rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
           /*<<camlinternalFormatBasics.ml 642 33>>*/ return [6,
                  iconv$1,
                  pad$3,
                  prec$1,
                   /*<<camlinternalFormatBasics.ml 642 33>>*/ concat_fmt
                   (rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
           /*<<camlinternalFormatBasics.ml 644 29>>*/ return [7,
                  iconv$2,
                  pad$4,
                  prec$2,
                   /*<<camlinternalFormatBasics.ml 644 29>>*/ concat_fmt
                   (rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
           /*<<camlinternalFormatBasics.ml 646 29>>*/ return [8,
                  fconv,
                  pad$5,
                  prec$3,
                   /*<<camlinternalFormatBasics.ml 646 29>>*/ concat_fmt
                   (rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
           /*<<camlinternalFormatBasics.ml 653 15>>*/ return [9,
                  pad$6,
                   /*<<camlinternalFormatBasics.ml 653 15>>*/ concat_fmt
                   (rest$8,fmt2)];
         case 10:
           /*<<camlinternalFormatBasics.ml 663 4>>*/  /*<<camlinternalFormatBasics.ml 663 4>>*/ var
           rest$9=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 663 10>>*/ return [10,
                   /*<<camlinternalFormatBasics.ml 663 10>>*/ concat_fmt
                   (rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
           /*<<camlinternalFormatBasics.ml 666 25>>*/ return [11,
                  str,
                   /*<<camlinternalFormatBasics.ml 666 25>>*/ concat_fmt
                   (rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
           /*<<camlinternalFormatBasics.ml 668 25>>*/ return [12,
                  chr,
                   /*<<camlinternalFormatBasics.ml 668 25>>*/ concat_fmt
                   (rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
           /*<<camlinternalFormatBasics.ml 671 30>>*/ return [13,
                  pad$7,
                  fmtty,
                   /*<<camlinternalFormatBasics.ml 671 30>>*/ concat_fmt
                   (rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
           /*<<camlinternalFormatBasics.ml 673 30>>*/ return [14,
                  pad$8,
                  fmtty$0,
                   /*<<camlinternalFormatBasics.ml 673 30>>*/ concat_fmt
                   (rest$13,fmt2)];
         case 15:
           /*<<camlinternalFormatBasics.ml 655 4>>*/  /*<<camlinternalFormatBasics.ml 655 4>>*/ var
           rest$14=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 655 10>>*/ return [15,
                   /*<<camlinternalFormatBasics.ml 655 10>>*/ concat_fmt
                   (rest$14,fmt2)];
         case 16:
           /*<<camlinternalFormatBasics.ml 657 4>>*/  /*<<camlinternalFormatBasics.ml 657 4>>*/ var
           rest$15=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 657 10>>*/ return [16,
                   /*<<camlinternalFormatBasics.ml 657 10>>*/ concat_fmt
                   (rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
           /*<<camlinternalFormatBasics.ml 685 32>>*/ return [17,
                  fmting_lit,
                   /*<<camlinternalFormatBasics.ml 685 32>>*/ concat_fmt
                   (rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
           /*<<camlinternalFormatBasics.ml 687 32>>*/ return [18,
                  fmting_gen,
                   /*<<camlinternalFormatBasics.ml 687 32>>*/ concat_fmt
                   (rest$17,fmt2)];
         case 19:
           /*<<camlinternalFormatBasics.ml 661 4>>*/  /*<<camlinternalFormatBasics.ml 661 4>>*/ var
           rest$18=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 661 11>>*/ return [19,
                   /*<<camlinternalFormatBasics.ml 661 11>>*/ concat_fmt
                   (rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
           /*<<camlinternalFormatBasics.ml 676 40>>*/ return [20,
                  width_opt,
                  char_set,
                   /*<<camlinternalFormatBasics.ml 676 40>>*/ concat_fmt
                   (rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
           /*<<camlinternalFormatBasics.ml 678 31>>*/ return [21,
                  counter,
                   /*<<camlinternalFormatBasics.ml 678 31>>*/ concat_fmt
                   (rest$20,fmt2)];
         case 22:
           /*<<camlinternalFormatBasics.ml 680 4>>*/  /*<<camlinternalFormatBasics.ml 680 4>>*/ var
           rest$21=
            fmt1[1];
           /*<<camlinternalFormatBasics.ml 680 19>>*/ return [22,
                   /*<<camlinternalFormatBasics.ml 680 19>>*/ concat_fmt
                   (rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
           /*<<camlinternalFormatBasics.ml 682 24>>*/ return [23,
                  ign,
                   /*<<camlinternalFormatBasics.ml 682 24>>*/ concat_fmt
                   (rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
           /*<<camlinternalFormatBasics.ml 659 22>>*/ return [24,
                  arity,
                  f,
                   /*<<camlinternalFormatBasics.ml 659 22>>*/ concat_fmt
                   (rest$23,fmt2)]} /*<<camlinternalFormatBasics.ml 690 8>>*/ }
     /*<<stdlib.ml 23 2>>*/ function failwith(s)
     { /*<<stdlib.ml 29 17>>*/ throw [0,Failure,s] /*<<stdlib.ml 29 33>>*/ }
     /*<<stdlib.ml 23 2>>*/ function invalid_arg(s)
     { /*<<stdlib.ml 30 20>>*/ throw [0,Invalid_argument,s] /*<<stdlib.ml 30 45>>*/ }
     /*<<stdlib.ml 23 2>>*/  /*<<stdlib.ml 23 2>>*/ var
     Exit=
      [248,_a_, /*<<stdlib.ml 23 2>>*/ caml_fresh_oo_id(0)];
     /*<<stdlib.ml 23 2>>*/ function min(x,y)
     { /*<<stdlib.ml 73 17>>*/ return  /*<<stdlib.ml 73 17>>*/ caml_lessequal
               (x,y)
              ?x
              :y /*<<stdlib.ml 73 37>>*/ }
     /*<<stdlib.ml 23 2>>*/ function max(x,y)
     { /*<<stdlib.ml 74 17>>*/ return  /*<<stdlib.ml 74 17>>*/ caml_greaterequal
               (x,y)
              ?x
              :y /*<<stdlib.ml 74 37>>*/ }
     /*<<stdlib.ml 23 2>>*/ function abs(x)
     { /*<<stdlib.ml 99 12>>*/ return 0 <= x?x:- x | 0 /*<<stdlib.ml 99 36>>*/ }
     /*<<stdlib.ml 175 2>>*/ var
      /*<<stdlib.ml 175 2>>*/ infinity=
       /*<<stdlib.ml 175 2>>*/ caml_int64_float_of_bits(_b_),
      /*<<stdlib.ml 177 2>>*/ neg_infinity=
       /*<<stdlib.ml 177 2>>*/ caml_int64_float_of_bits(_c_),
      /*<<stdlib.ml 179 2>>*/ nan=
       /*<<stdlib.ml 179 2>>*/ caml_int64_float_of_bits(_d_),
      /*<<stdlib.ml 23 2>>*/ max_int=2147483647;
     /*<<stdlib.ml 185 2>>*/ function symbol(s1,s2)
     { /*<<stdlib.ml 208 2>>*/ var
        /*<<stdlib.ml 208 2>>*/ l1=
         /*<<stdlib.ml 208 2>>*/ caml_ml_string_length(s1),
        /*<<stdlib.ml 208 2>>*/ l2=
         /*<<stdlib.ml 208 2>>*/ caml_ml_string_length(s2),
        /*<<stdlib.ml 209 10>>*/ s=
         /*<<stdlib.ml 209 10>>*/ caml_create_bytes(l1 + l2 | 0);
       /*<<stdlib.ml 210 2>>*/  /*<<stdlib.ml 210 2>>*/ caml_blit_string
       (s1,0,s,0,l1);
       /*<<stdlib.ml 211 2>>*/  /*<<stdlib.ml 211 2>>*/ caml_blit_string
       (s2,0,s,l1,l2);
       /*<<stdlib.ml 211 2>>*/ return  /*<<stdlib.ml 211 2>>*/ caml_string_of_bytes
              (s) /*<<stdlib.ml 212 26>>*/ }
     /*<<stdlib.ml 185 2>>*/ function string_of_bool(b)
     { /*<<stdlib.ml 249 2>>*/ return b?_e_:_f_ /*<<stdlib.ml 249 31>>*/ }
     /*<<stdlib.ml 185 2>>*/ function append(l1,l2)
     { /*<<stdlib.ml 294 2>>*/ if(l1)
       {var tl=l1[2],hd=l1[1];
         /*<<stdlib.ml 296 22>>*/ return [0,
                hd,
                 /*<<stdlib.ml 296 22>>*/ append(tl,l2)]}
       /*<<stdlib.ml 295 10>>*/ return l2 /*<<stdlib.ml 296 31>>*/ }
     /*<<stdlib.ml 307 12>>*/  /*<<stdlib.ml 307 12>>*/ caml_ml_open_descriptor_in
     (0);
     /*<<stdlib.ml 308 13>>*/ var
      /*<<stdlib.ml 308 13>>*/ stdout=
       /*<<stdlib.ml 308 13>>*/ caml_ml_open_descriptor_out(1),
      /*<<stdlib.ml 309 13>>*/ oc=
       /*<<stdlib.ml 309 13>>*/ caml_ml_open_descriptor_out(2);
     /*<<stdlib.ml 309 13>>*/ function flush_all(param)
     { /*<<stdlib.ml 340 2>>*/ function iter(param)
       { /*<<?>>*/ var param$0=param;
         /*<<stdlib.ml 340 17>>*/ for(;;)
         { /*<<stdlib.ml 340 17>>*/ if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             { /*<<stdlib.ml 344 12>>*/  /*<<stdlib.ml 344 12>>*/ caml_ml_flush
               (a)}
            catch(_qB_)
             {_qB_ = caml_wrap_exception(_qB_);
              if(_qB_[1] !== Sys_error)throw _qB_;
              var _qA_=_qB_}
            var param$0=l;
            continue}
           /*<<stdlib.ml 341 12>>*/ return 0} /*<<stdlib.ml 348 14>>*/ }
       /*<<stdlib.ml 349 10>>*/ return  /*<<stdlib.ml 349 10>>*/ iter
              ( /*<<stdlib.ml 349 10>>*/ caml_ml_out_channels_list(0)) /*<<stdlib.ml 349 32>>*/ }
     /*<<stdlib.ml 309 13>>*/ function output_string(oc,s)
     { /*<<stdlib.ml 362 2>>*/ return  /*<<stdlib.ml 362 2>>*/ caml_ml_output
              (oc,s,0, /*<<stdlib.ml 362 2>>*/ caml_ml_string_length(s)) /*<<stdlib.ml 362 47>>*/ }
     /*<<stdlib.ml 309 13>>*/ function open_in(name)
     { /*<<stdlib.ml 398 54>>*/  /*<<stdlib.ml 398 54>>*/ var
       c=
         /*<<stdlib.ml 398 54>>*/ caml_ml_open_descriptor_in
         ( /*<<stdlib.ml 398 28>>*/ caml_sys_open(name,mode,0));
       /*<<stdlib.ml 399 2>>*/  /*<<stdlib.ml 399 2>>*/ caml_ml_set_channel_name
       (c,name);
       /*<<stdlib.ml 399 2>>*/ return c /*<<stdlib.ml 403 45>>*/ }
     /*<<stdlib.ml 309 13>>*/ function print_endline(s)
     { /*<<stdlib.ml 485 2>>*/  /*<<stdlib.ml 485 2>>*/ output_string
       (stdout,s);
       /*<<stdlib.ml 485 26>>*/  /*<<stdlib.ml 485 26>>*/ caml_ml_output_char
       (stdout,10);
       /*<<stdlib.ml 485 51>>*/ return  /*<<stdlib.ml 485 51>>*/ caml_ml_flush
              (stdout) /*<<stdlib.ml 485 63>>*/ }
     /*<<stdlib.ml 309 13>>*/  /*<<stdlib.ml 309 13>>*/ var
     exit_function=
      [0,flush_all];
     /*<<stdlib.ml 309 13>>*/ function at_exit(f)
     { /*<<stdlib.ml 548 2>>*/ var
        /*<<stdlib.ml 548 2>>*/ g=exit_function[1],
        /*<<stdlib.ml 548 2>>*/ f_already_ran=[0,0];
       /*<<stdlib.ml 548 2>>*/ exit_function[1]
      =
      function(param)
       { /*<<stdlib.ml 553 6>>*/ if(1 - f_already_ran[1])
         { /*<<stdlib.ml 553 33>>*/ f_already_ran[1] = 1;
           /*<<stdlib.ml 553 62>>*/  /*<<stdlib.ml 553 62>>*/ caml_call1(f,0)}
         /*<<stdlib.ml 553 65>>*/ return  /*<<stdlib.ml 553 65>>*/ caml_call1
                (g,0) /*<<stdlib.ml 554 9>>*/ };
       /*<<stdlib.ml 548 2>>*/ return 0 /*<<stdlib.ml 554 10>>*/ }
     /*<<stdlib.ml 309 13>>*/ function do_at_exit(param)
     { /*<<stdlib.ml 556 20>>*/ return  /*<<stdlib.ml 556 20>>*/ caml_call1
              (exit_function[1],0) /*<<stdlib.ml 556 39>>*/ }
    function map(f,seq,param)
     { /*<<seq.ml 35 29>>*/  /*<<seq.ml 35 29>>*/ var
       match=
         /*<<seq.ml 35 29>>*/ caml_call1(seq,0);
       /*<<seq.ml 35 29>>*/ if(match)
       { /*<<seq.ml 37 33>>*/ var
         next=match[2],
         x=match[1],
          /*<<seq.ml 37 33>>*/ _qy_=
          function(_qz_){ /*<<?>>*/ return map(f,next,_qz_)};
         /*<<seq.ml 37 28>>*/ return [0,
                 /*<<seq.ml 37 28>>*/ caml_call1(f,x),
                _qy_]}
       /*<<seq.ml 36 11>>*/ return 0 /*<<seq.ml 37 44>>*/ }
    function iter(f,seq)
     { /*<<?>>*/ var seq$0=seq;
       /*<<seq.ml 74 20>>*/ for(;;)
       { /*<<seq.ml 74 26>>*/  /*<<seq.ml 74 26>>*/ var
         match=
           /*<<seq.ml 74 26>>*/ caml_call1(seq$0,0);
         /*<<seq.ml 74 26>>*/ if(match)
         {var next=match[2],x=match[1];
           /*<<seq.ml 77 8>>*/  /*<<seq.ml 77 8>>*/ caml_call1(f,x);
          var seq$0=next;
          continue}
         /*<<seq.ml 75 13>>*/ return 0} /*<<seq.ml 80 9>>*/ }
    function chr(n)
     { /*<<?>>*/ if(0 <= n && ! (255 < n)) /*<<char.ml 22 55>>*/ return n;
       /*<<char.ml 22 27>>*/ return  /*<<char.ml 22 27>>*/ invalid_arg(_i_) /*<<char.ml 22 67>>*/ }
    function f(c)
     { /*<<char.ml 67 22>>*/  /*<<char.ml 67 22>>*/ var switcher=c - 97 | 0;
       /*<<char.ml 67 22>>*/ return 25 < switcher >>> 0?c:c - 32 | 0 /*<<char.ml 69 10>>*/ }
     /*<<stdlib/sys.mlp 40 22>>*/ var
      /*<<stdlib/sys.mlp 40 22>>*/ match=
       /*<<stdlib/sys.mlp 40 22>>*/ caml_sys_get_config(0),
      /*<<stdlib/sys.mlp 40 22>>*/ os_type=match[1],
      /*<<stdlib/sys.mlp 40 22>>*/ match$0=
       /*<<stdlib/sys.mlp 40 22>>*/ caml_sys_const_backend_type(0),
      /*<<stdlib/sys.mlp 40 22>>*/ max_array_length=
       /*<<stdlib/sys.mlp 40 22>>*/ caml_sys_const_max_wosize(0),
      /*<<stdlib/sys.mlp 40 22>>*/ max_string_length=
      (4 * max_array_length | 0)
      -
      1
      |
      0;
     /*<<stdlib/sys.mlp 40 22>>*/  /*<<stdlib/sys.mlp 40 22>>*/ caml_fresh_oo_id
     (0);
    function nth(l,n)
     { /*<<list.ml 38 2>>*/ if(0 <= n)
       {var l$0=l,n$0=n;
         /*<<list.ml 40 4>>*/ for(;;)
         { /*<<list.ml 40 4>>*/ if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0) /*<<list.ml 42 28>>*/ return a;
             /*<<list.ml 42 35>>*/ var
              /*<<list.ml 42 35>>*/ n$1=n$0 - 1 | 0,
             l$0=l$1,
             n$0=n$1;
            continue}
           /*<<list.ml 41 12>>*/ return  /*<<list.ml 41 12>>*/ failwith(_p_)}}
       /*<<list.ml 38 16>>*/ return  /*<<list.ml 38 16>>*/ invalid_arg(_q_) /*<<list.ml 43 16>>*/ }
    function rev(l)
     {var l1=l,l2=0;
       /*<<list.ml 56 2>>*/ for(;;)
       { /*<<list.ml 56 2>>*/ if(l1)
         {var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
         /*<<list.ml 57 10>>*/ return l2} /*<<list.ml 60 27>>*/ }
    typeof match$0 === "number";
    function flatten(param)
     { /*<<list.ml 84 18>>*/ if(param)
       {var r=param[2],l=param[1];
         /*<<list.ml 86 16>>*/ return  /*<<list.ml 86 16>>*/ append
                (l, /*<<list.ml 86 16>>*/ flatten(r))}
       /*<<list.ml 85 10>>*/ return 0 /*<<list.ml 86 25>>*/ }
    function map$0(f,param)
     { /*<<?>>*/ if(param)
       { /*<<list.ml 92 20>>*/ var
         l=param[2],
         a=param[1],
          /*<<list.ml 92 20>>*/ r= /*<<list.ml 92 20>>*/ caml_call1(f,a);
         /*<<list.ml 92 32>>*/ return [0,r, /*<<list.ml 92 32>>*/ map$0(f,l)]}
       /*<<list.ml 91 10>>*/ return 0}
    function _r_(i,f,param)
     { /*<<?>>*/ if(param)
       { /*<<list.ml 96 20>>*/ var
         l=param[2],
         a=param[1],
          /*<<list.ml 96 20>>*/ r= /*<<list.ml 96 20>>*/ caml_call2(f,i,a);
         /*<<list.ml 96 34>>*/ return [0,
                r,
                 /*<<list.ml 96 34>>*/ _r_(i + 1 | 0,f,l)]}
       /*<<list.ml 95 10>>*/ return 0}
    function mapi(f,l)
     { /*<<list.ml 98 15>>*/ return  /*<<list.ml 98 15>>*/ _r_(0,f,l) /*<<list.ml 98 25>>*/ }
    function iter$0(f,param)
     { /*<<?>>*/ var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
           /*<<list.ml 110 12>>*/  /*<<list.ml 110 12>>*/ caml_call1(f,a);
          var param$0=l;
          continue}
         /*<<list.ml 109 10>>*/ return 0}}
    function fold_left(f,accu,l)
     {var accu$0=accu,l$0=l;
       /*<<list.ml 119 2>>*/ for(;;)
       { /*<<list.ml 119 2>>*/ if(l$0)
         { /*<<list.ml 121 24>>*/ var
           l$1=l$0[2],
           a=l$0[1],
            /*<<list.ml 121 24>>*/ accu$1=
             /*<<list.ml 121 24>>*/ caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
         /*<<list.ml 120 10>>*/ return accu$0} /*<<list.ml 121 36>>*/ }
    function assoc(x,param)
     { /*<<?>>*/ var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],match=param$0[1],b=match[2],a=match[1];
           /*<<list.ml 192 19>>*/ if
           (0 ===  /*<<list.ml 192 19>>*/ caml_compare(a,x))
            /*<<list.ml 192 40>>*/ return b;
          var param$0=l;
          continue}
         /*<<list.ml 191 10>>*/ throw Not_found}}
    function find(p,param)
     { /*<<?>>*/ var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
           /*<<list.ml 225 17>>*/ if( /*<<list.ml 225 17>>*/ caml_call1(p,x))
            /*<<list.ml 225 26>>*/ return x;
          var param$0=l;
          continue}
         /*<<list.ml 224 10>>*/ throw Not_found}}
    function find_all(p)
     { /*<<list.ml 240 2>>*/  /*<<list.ml 240 2>>*/ var accu=0;
       /*<<list.ml 240 2>>*/ return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
             /*<<list.ml 242 17>>*/ if
             ( /*<<list.ml 242 17>>*/ caml_call1(p,x))
             { /*<<list.ml 242 26>>*/ var
                /*<<list.ml 242 26>>*/ accu$1=[0,x,accu$0],
               accu$0=accu$1,
               param=l;
              continue}
            var param=l;
            continue}
           /*<<list.ml 241 10>>*/ return  /*<<list.ml 241 10>>*/ rev(accu$0)}} /*<<list.ml 243 9>>*/ }
    function make(n,c)
     { /*<<bytes.ml 42 10>>*/  /*<<bytes.ml 42 10>>*/ var
       s=
         /*<<bytes.ml 42 10>>*/ caml_create_bytes(n);
       /*<<bytes.ml 43 2>>*/  /*<<bytes.ml 43 2>>*/ caml_fill_bytes(s,0,n,c);
       /*<<bytes.ml 43 2>>*/ return s /*<<bytes.ml 44 3>>*/ }
     /*<<bytes.ml 53 12>>*/ function copy(s)
     { /*<<bytes.ml 56 2>>*/ var
        /*<<bytes.ml 56 2>>*/ len=
         /*<<bytes.ml 56 2>>*/ caml_ml_bytes_length(s),
        /*<<bytes.ml 57 2>>*/ r= /*<<bytes.ml 57 2>>*/ caml_create_bytes(len);
       /*<<bytes.ml 58 2>>*/  /*<<bytes.ml 58 2>>*/ caml_blit_bytes
       (s,0,r,0,len);
       /*<<bytes.ml 58 2>>*/ return r /*<<bytes.ml 59 3>>*/ }
     /*<<bytes.ml 53 12>>*/ function sub_string(b,ofs,len)
     { /*<<?>>*/ var switch$0=0;
      if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(b) - len | 0) < ofs))
       { /*<<bytes.ml 68 12>>*/  /*<<bytes.ml 68 12>>*/ var
         r=
           /*<<bytes.ml 68 12>>*/ caml_create_bytes(len);
         /*<<bytes.ml 69 4>>*/  /*<<bytes.ml 69 4>>*/ caml_blit_bytes
         (b,ofs,r,0,len);
         /*<<bytes.ml 68 12>>*/ var _qx_=r;
        switch$0 = 1}
       /*<<camlinternalFormatBasics.ml 528 8>>*/ if(! switch$0)
       var _qx_= /*<<bytes.ml 66 7>>*/ invalid_arg(_s_);
      return caml_string_of_bytes(_qx_) /*<<bytes.ml 73 59>>*/ }
     /*<<bytes.ml 53 12>>*/ function blit(s1,ofs1,s2,ofs2,len)
     { /*<<?>>*/ if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
        /*<<bytes.ml 100 7>>*/ return  /*<<bytes.ml 100 7>>*/ caml_blit_bytes
               (s1,ofs1,s2,ofs2,len);
       /*<<bytes.ml 99 7>>*/ return  /*<<bytes.ml 99 7>>*/ invalid_arg(_t_) /*<<bytes.ml 100 38>>*/ }
     /*<<bytes.ml 53 12>>*/ function blit$0(s1,ofs1,s2,ofs2,len)
     { /*<<?>>*/ if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
        /*<<bytes.ml 106 7>>*/ return  /*<<bytes.ml 106 7>>*/ caml_blit_string
               (s1,ofs1,s2,ofs2,len);
       /*<<bytes.ml 105 7>>*/ return  /*<<bytes.ml 105 7>>*/ invalid_arg(_u_) /*<<bytes.ml 106 45>>*/ }
    function make$0(n,c)
     { /*<<string.ml 41 2>>*/ return  /*<<string.ml 41 2>>*/ caml_string_of_bytes
              ( /*<<string.ml 41 2>>*/ make(n,c)) /*<<string.ml 41 19>>*/ }
    function index_rec(s,lim,i,c)
     { /*<<?>>*/ var i$0=i;
       /*<<string.ml 115 2>>*/ for(;;)
       { /*<<string.ml 115 2>>*/ if(lim <= i$0)
          /*<<string.ml 115 19>>*/ throw Not_found;
         /*<<string.ml 116 2>>*/ if
         ( /*<<string.ml 116 2>>*/ caml_string_unsafe_get(s,i$0) === c)
          /*<<string.ml 116 29>>*/ return i$0;
         /*<<string.ml 116 36>>*/ var
          /*<<string.ml 116 36>>*/ i$1=i$0 + 1 | 0,
         i$0=i$1;
        continue} /*<<string.ml 116 61>>*/ }
    function contains_from(s,i,c)
     { /*<<string.ml 175 2>>*/  /*<<string.ml 175 2>>*/ var
       l=
         /*<<string.ml 175 2>>*/ caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
        /*<<string.ml 179 4>>*/ try
        { /*<<string.ml 179 15>>*/  /*<<string.ml 179 15>>*/ index_rec
          (s,l,i,c);
          /*<<string.ml 179 15>>*/  /*<<string.ml 179 15>>*/ var _qv_=1;
         return _qv_}
       catch(_qw_)
        {_qw_ = caml_wrap_exception(_qw_);
         if(_qw_ === Not_found) /*<<string.ml 179 59>>*/ return 0;
         throw _qw_}
       /*<<string.ml 177 4>>*/ return  /*<<string.ml 177 4>>*/ invalid_arg
              (_v_) /*<<string.ml 179 64>>*/ }
    function contains(s,c)
     { /*<<string.ml 182 19>>*/ return  /*<<string.ml 182 19>>*/ contains_from
              (s,0,c) /*<<string.ml 182 38>>*/ }
    function capitalize_ascii(s)
     { /*<<string.ml 196 21>>*/  /*<<string.ml 196 21>>*/ var
       s$0=
         /*<<string.ml 196 21>>*/ caml_bytes_of_string(s);
       /*<<bytes.ml 230 2>>*/ if
       (0 ===  /*<<bytes.ml 230 2>>*/ caml_ml_bytes_length(s$0))
       var _qu_=s$0;
      else
       { /*<<bytes.ml 231 12>>*/  /*<<bytes.ml 231 12>>*/ var
         r=
           /*<<bytes.ml 231 12>>*/ copy(s$0);
         /*<<bytes.ml 232 19>>*/  /*<<bytes.ml 232 19>>*/ caml_bytes_unsafe_set
         (r,
          0,
           /*<<bytes.ml 232 19>>*/ f
           ( /*<<bytes.ml 231 12>>*/ caml_bytes_unsafe_get(s$0,0)));
         /*<<bytes.ml 231 12>>*/ var _qu_=r}
      return caml_string_of_bytes(_qu_) /*<<string.ml 196 35>>*/ }
     /*<<array.ml 36 17>>*/ function iteri(f,a)
     { /*<<array.ml 129 2>>*/ var
        /*<<array.ml 129 2>>*/ _qs_=a.length - 1 - 1 | 0,
        /*<<array.ml 129 2>>*/ _qr_=0;
       /*<<array.ml 129 2>>*/ if(! (_qs_ < 0))
       {var i=_qr_;
         /*<<array.ml 129 31>>*/ for(;;)
         { /*<<array.ml 129 31>>*/  /*<<array.ml 129 31>>*/ caml_call2
           (f,i,a[1 + i]);
           /*<<array.ml 129 31>>*/  /*<<array.ml 129 31>>*/ var
           _qt_=
            i + 1 | 0;
          if(_qs_ !== i){var i=_qt_;continue}
          break}}
      return 0 /*<<array.ml 129 56>>*/ }
     /*<<array.ml 36 17>>*/ function fold_left$0(f,x,a)
     { /*<<array.ml 161 2>>*/ var
        /*<<array.ml 161 2>>*/ r=[0,x],
        /*<<array.ml 161 2>>*/ _qp_=a.length - 1 - 1 | 0,
        /*<<array.ml 161 2>>*/ _qo_=0;
       /*<<array.ml 161 2>>*/ if(! (_qp_ < 0))
       {var i=_qo_;
         /*<<array.ml 163 4>>*/ for(;;)
         { /*<<array.ml 163 9>>*/ r[1]
          =
           /*<<array.ml 163 9>>*/ caml_call2(f,r[1],a[1 + i]);
           /*<<array.ml 163 9>>*/  /*<<array.ml 163 9>>*/ var _qq_=i + 1 | 0;
          if(_qp_ !== i){var i=_qq_;continue}
          break}}
       /*<<array.ml 165 2>>*/ return r[1] /*<<array.ml 165 4>>*/ }
     /*<<array.ml 36 17>>*/  /*<<array.ml 36 17>>*/ caml_fresh_oo_id(0);
    function from_channel(with_positions$0,ic)
     { /*<<lexing.ml 149 2>>*/ if(with_positions$0)
        /*<<lexing.ml 148 37>>*/ var
         /*<<lexing.ml 148 37>>*/ sth=with_positions$0[1],
        with_positions=sth;
      else
       var with_positions=1;
       /*<<lexing.ml 149 2>>*/ var
        /*<<lexing.ml 149 2>>*/ _qa_=with_positions?zero_pos:dummy_pos,
        /*<<lexing.ml 159 41>>*/ _qb_=with_positions?zero_pos:dummy_pos,
        /*<<lexing.ml 149 31>>*/ buf=
         /*<<lexing.ml 149 31>>*/ caml_create_bytes(512),
        /*<<lexing.ml 157 14>>*/ _qc_=[0],
        /*<<lexing.ml 157 14>>*/ _qd_=0,
        /*<<lexing.ml 157 14>>*/ _qe_=0,
        /*<<lexing.ml 157 14>>*/ _qf_=0,
        /*<<lexing.ml 157 14>>*/ _qg_=0,
        /*<<lexing.ml 157 14>>*/ _qh_=0,
        /*<<lexing.ml 157 14>>*/ _qi_=0,
        /*<<lexing.ml 157 14>>*/ _qj_=0,
        /*<<lexing.ml 150 17>>*/ _qk_=
         /*<<lexing.ml 150 17>>*/ caml_create_bytes(1024);
       /*<<lexing.ml 149 18>>*/ return [0,
              function(lexbuf)
               { /*<<lexing.ml 85 2>>*/ var
                  /*<<lexing.ml 85 2>>*/ n=
                   /*<<lexing.ml 85 2>>*/ caml_ml_bytes_length(buf),
                 switch$0=0;
                if(0 <= n && ! ((caml_ml_bytes_length(buf) - n | 0) < 0))
                 {var read= /*<<stdlib.ml 416 7>>*/ caml_ml_input(ic,buf,0,n);
                  switch$0 = 1}
                 /*<<camlinternalFormatBasics.ml 528 8>>*/ if(! switch$0)
                 var read= /*<<stdlib.ml 415 7>>*/ invalid_arg(_h_);
                 /*<<lexing.ml 85 2>>*/ var
                 n$0=
                  0 < read?read:(lexbuf[9] = 1,0);
                 /*<<lexing.ml 97 2>>*/ if
                 ( /*<<lexing.ml 97 2>>*/ caml_ml_bytes_length(lexbuf[2])
                  <
                  (lexbuf[3] + n$0 | 0))
                 { /*<<lexing.ml 97 69>>*/ if
                   (((lexbuf[3] - lexbuf[5] | 0) + n$0 | 0)
                    <=
                     /*<<lexing.ml 97 69>>*/ caml_ml_bytes_length(lexbuf[2]))
                    /*<<lexing.ml 101 9>>*/  /*<<lexing.ml 101 9>>*/ blit
                    (lexbuf[2],lexbuf[5],lexbuf[2],0,lexbuf[3] - lexbuf[5] | 0);
                  else
                   { /*<<lexing.ml 112 8>>*/  /*<<lexing.ml 112 8>>*/ var
                     newlen=
                       /*<<lexing.ml 112 8>>*/ min
                       (2
                        *
                         /*<<lexing.ml 107 13>>*/ caml_ml_bytes_length(lexbuf[2])
                        |
                        0,
                        max_string_length);
                     /*<<lexing.ml 112 8>>*/ if
                     (newlen < ((lexbuf[3] - lexbuf[5] | 0) + n$0 | 0))
                      /*<<lexing.ml 114 11>>*/  /*<<lexing.ml 114 11>>*/ failwith
                      (_x_);
                     /*<<lexing.ml 112 8>>*/  /*<<lexing.ml 115 19>>*/ var
                     newbuf=
                       /*<<lexing.ml 115 19>>*/ caml_create_bytes(newlen);
                     /*<<lexing.ml 117 6>>*/  /*<<lexing.ml 117 6>>*/ blit
                     (lexbuf[2],lexbuf[5],newbuf,0,lexbuf[3] - lexbuf[5] | 0);
                     /*<<lexing.ml 117 6>>*/ lexbuf[2] = newbuf}
                   /*<<lexing.ml 124 4>>*/  /*<<lexing.ml 124 4>>*/ var
                   s=
                    lexbuf[5];
                   /*<<lexing.ml 124 4>>*/ lexbuf[4] = lexbuf[4] + s | 0;
                   /*<<lexing.ml 124 4>>*/ lexbuf[6] = lexbuf[6] - s | 0;
                   /*<<lexing.ml 124 4>>*/ lexbuf[5] = 0;
                   /*<<lexing.ml 124 4>>*/ lexbuf[7] = lexbuf[7] - s | 0;
                   /*<<lexing.ml 124 4>>*/ lexbuf[3] = lexbuf[3] - s | 0;
                   /*<<lexing.ml 124 4>>*/ var
                    /*<<lexing.ml 124 4>>*/ t=lexbuf[10],
                    /*<<lexing.ml 124 4>>*/ _qm_=t.length - 1 - 1 | 0,
                    /*<<lexing.ml 124 4>>*/ _ql_=0;
                   /*<<lexing.ml 124 4>>*/ if(! (_qm_ < 0))
                   {var i=_ql_;
                     /*<<lexing.ml 132 6>>*/ for(;;)
                     { /*<<lexing.ml 132 14>>*/  /*<<lexing.ml 132 14>>*/ var
                       v=
                         /*<<lexing.ml 132 14>>*/ caml_check_bound(t,i)[1 + i];
                       /*<<lexing.ml 132 14>>*/ if(0 <= v)
                        /*<<lexing.ml 134 8>>*/  /*<<lexing.ml 134 8>>*/ caml_check_bound
                         (t,i)
                        [1 + i]
                       =
                       v
                       -
                       s
                       |
                       0;
                       /*<<lexing.ml 132 14>>*/  /*<<lexing.ml 134 20>>*/ var
                       _qn_=
                        i + 1 | 0;
                      if(_qm_ !== i){var i=_qn_;continue}
                      break}}}
                 /*<<lexing.ml 138 2>>*/  /*<<lexing.ml 138 2>>*/ blit
                 (buf,0,lexbuf[2],lexbuf[3],n$0);
                 /*<<lexing.ml 138 2>>*/ lexbuf[3] = lexbuf[3] + n$0 | 0;
                 /*<<lexing.ml 138 2>>*/ return 0},
              _qk_,
              _qj_,
              _qi_,
              _qh_,
              _qg_,
              _qf_,
              _qe_,
              _qd_,
              _qc_,
              _qb_,
              _qa_] /*<<lexing.ml 164 63>>*/ }
    function from_string(opt,s)
     { /*<<lexing.ml 167 2>>*/ if(opt)
        /*<<lexing.ml 166 35>>*/ var
         /*<<lexing.ml 166 35>>*/ sth=opt[1],
        with_positions=sth;
      else
       var with_positions=1;
       /*<<lexing.ml 167 2>>*/ var
        /*<<lexing.ml 167 2>>*/ _p2_=with_positions?zero_pos:dummy_pos,
        /*<<lexing.ml 178 41>>*/ _p3_=with_positions?zero_pos:dummy_pos,
        /*<<lexing.ml 176 14>>*/ _p4_=[0],
        /*<<lexing.ml 176 14>>*/ _p5_=1,
        /*<<lexing.ml 176 14>>*/ _p6_=0,
        /*<<lexing.ml 176 14>>*/ _p7_=0,
        /*<<lexing.ml 176 14>>*/ _p8_=0,
        /*<<lexing.ml 176 14>>*/ _p9_=0,
        /*<<lexing.ml 176 14>>*/ _p__=0,
        /*<<lexing.ml 176 14>>*/ _p$_=
         /*<<lexing.ml 176 14>>*/ caml_ml_string_length(s),
        /*<<bytes.ml 62 18>>*/ _p1_=
         /*<<bytes.ml 62 18>>*/ copy
         ( /*<<bytes.ml 62 18>>*/ caml_bytes_of_string(s));
      return [0,
              function(lexbuf)
               { /*<<lexing.ml 167 33>>*/ lexbuf[9] = 1;
                 /*<<lexing.ml 167 33>>*/ return 0 /*<<lexing.ml 167 63>>*/ },
              _p1_,
              _p$_,
              _p__,
              _p9_,
              _p8_,
              _p7_,
              _p6_,
              _p5_,
              _p4_,
              _p3_,
              _p2_] /*<<lexing.ml 180 3>>*/ }
    function lexeme(lexbuf)
     { /*<<lexing.ml 192 2>>*/  /*<<lexing.ml 192 2>>*/ var
       len=
        lexbuf[6] - lexbuf[5] | 0;
       /*<<lexing.ml 192 2>>*/ return  /*<<lexing.ml 192 2>>*/ sub_string
              (lexbuf[2],lexbuf[5],len) /*<<lexing.ml 193 61>>*/ }
    function sub_lexeme_char(lexbuf,i)
     { /*<<lexing.ml 207 31>>*/ return  /*<<lexing.ml 207 31>>*/ caml_bytes_get
              (lexbuf[2],i) /*<<lexing.ml 207 60>>*/ }
    caml_fresh_oo_id(0);
    function create(param)
     { /*<<stack.ml 20 16>>*/ return [0,0,0] /*<<stack.ml 20 36>>*/ }
    function clear(s)
     { /*<<stack.ml 22 14>>*/ s[1] = 0;
       /*<<stack.ml 22 14>>*/ s[2] = 0;
       /*<<stack.ml 22 14>>*/ return 0 /*<<stack.ml 22 35>>*/ }
    function push(x,s)
     { /*<<stack.ml 26 15>>*/ s[1] = [0,x,s[1]];
       /*<<stack.ml 26 15>>*/ s[2] = s[2] + 1 | 0;
       /*<<stack.ml 26 15>>*/ return 0 /*<<stack.ml 26 50>>*/ }
    function pop_opt(s)
     { /*<<stack.ml 34 2>>*/  /*<<stack.ml 34 2>>*/ var _p0_=s[1];
       /*<<stack.ml 34 2>>*/ if(_p0_)
       {var tl=_p0_[2],hd=_p0_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return [0,hd]}
       /*<<stack.ml 36 14>>*/ return 0 /*<<stack.ml 36 18>>*/ }
    function top_opt(s)
     { /*<<stack.ml 44 2>>*/  /*<<stack.ml 44 2>>*/ var _pZ_=s[1];
       /*<<stack.ml 44 2>>*/ if(_pZ_)
       { /*<<stack.ml 45 13>>*/  /*<<stack.ml 45 13>>*/ var hd=_pZ_[1];
         /*<<stack.ml 45 13>>*/ return [0,hd]}
       /*<<stack.ml 46 13>>*/ return 0 /*<<stack.ml 46 17>>*/ }
    var Empty=[248,_y_,caml_fresh_oo_id(0)];
    function clear$0(q)
     { /*<<queue.ml 36 2>>*/ q[1] = 0;
       /*<<queue.ml 36 2>>*/ q[2] = 0;
       /*<<queue.ml 36 2>>*/ q[3] = 0;
       /*<<queue.ml 36 2>>*/ return 0 /*<<queue.ml 38 15>>*/ }
    function add(x,q)
     { /*<<queue.ml 41 2>>*/ var
        /*<<queue.ml 41 2>>*/ cell=[0,x,0],
        /*<<queue.ml 41 2>>*/ _pY_=q[3];
       /*<<queue.ml 41 2>>*/ return _pY_
              ?(q[1] = q[1] + 1 | 0,_pY_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0) /*<<queue.ml 53 18>>*/ }
    var Undefined=[248,_z_,caml_fresh_oo_id(0)];
    function raise_undefined(param)
     { /*<<camlinternalLazy.ml 22 42>>*/ throw Undefined /*<<camlinternalLazy.ml 22 57>>*/ }
    function force_lazy_block(blk)
     { /*<<camlinternalLazy.ml 28 25>>*/  /*<<camlinternalLazy.ml 28 25>>*/ var
       closure=
        blk[1];
       /*<<camlinternalLazy.ml 29 2>>*/ blk[1] = raise_undefined;
       /*<<camlinternalLazy.ml 29 2>>*/ try
       { /*<<camlinternalLazy.ml 31 17>>*/  /*<<camlinternalLazy.ml 31 17>>*/ var
         result=
           /*<<camlinternalLazy.ml 31 17>>*/ caml_call1(closure,0);
         /*<<camlinternalLazy.ml 32 4>>*/  /*<<camlinternalLazy.ml 32 4>>*/ caml_obj_make_forward
         (blk,result);
         /*<<camlinternalLazy.ml 35 4>>*/ return result}
      catch(e)
       {e = caml_wrap_exception(e);
         /*<<camlinternalLazy.ml 35 4>>*/ blk[1]
        =
        function(param)
         { /*<<camlinternalLazy.ml 35 56>>*/ throw e /*<<camlinternalLazy.ml 35 63>>*/ };
         /*<<camlinternalLazy.ml 35 4>>*/ throw e} /*<<camlinternalLazy.ml 36 11>>*/ }
    caml_fresh_oo_id(0);
    caml_fresh_oo_id(0);
    function create$0(n)
     { /*<<buffer.ml 32 1>>*/ var
        /*<<buffer.ml 32 1>>*/ n$0=1 <= n?n:1,
        /*<<buffer.ml 33 1>>*/ n$1=
        max_string_length < n$0?max_string_length:n$0,
        /*<<buffer.ml 34 1>>*/ s=
         /*<<buffer.ml 34 1>>*/ caml_create_bytes(n$1);
       /*<<buffer.ml 34 1>>*/ return [0,s,0,n$1,s] /*<<buffer.ml 35 59>>*/ }
    function resize(b,more)
     { /*<<buffer.ml 78 2>>*/ var
        /*<<buffer.ml 78 2>>*/ old_pos=b[2],
        /*<<buffer.ml 78 2>>*/ old_len=b[3],
        /*<<buffer.ml 78 2>>*/ new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         { /*<<buffer.ml 81 37>>*/ new_len[1] = 2 * new_len[1] | 0;continue}
         /*<<buffer.ml 82 2>>*/ if(max_string_length < new_len[1])
          /*<<buffer.ml 82 43>>*/ if
          ((old_pos + more | 0) <= max_string_length)
           /*<<buffer.ml 84 9>>*/ new_len[1] = max_string_length;
         else
           /*<<buffer.ml 85 9>>*/  /*<<buffer.ml 85 9>>*/ failwith(_C_);
         /*<<buffer.ml 87 19>>*/  /*<<buffer.ml 87 19>>*/ var
         new_buffer=
           /*<<buffer.ml 87 19>>*/ caml_create_bytes(new_len[1]);
         /*<<buffer.ml 90 2>>*/  /*<<buffer.ml 90 2>>*/ blit
         (b[1],0,new_buffer,0,b[2]);
         /*<<buffer.ml 90 2>>*/ b[1] = new_buffer;
         /*<<buffer.ml 90 2>>*/ b[3] = new_len[1];
         /*<<buffer.ml 90 2>>*/ if((b[2] + more | 0) <= b[3])
         { /*<<buffer.ml 94 2>>*/ if((old_pos + more | 0) <= b[3])
            /*<<buffer.ml 95 2>>*/ return 0;
          throw [0,Assert_failure,_A_]}
        throw [0,Assert_failure,_B_]} /*<<buffer.ml 95 4>>*/ }
    function add_string(b,s)
     { /*<<buffer.ml 227 2>>*/ var
        /*<<buffer.ml 227 2>>*/ len=
         /*<<buffer.ml 227 2>>*/ caml_ml_string_length(s),
        /*<<buffer.ml 227 2>>*/ new_position=b[2] + len | 0;
       /*<<buffer.ml 227 2>>*/ if(b[3] < new_position)
        /*<<buffer.ml 229 34>>*/  /*<<buffer.ml 229 34>>*/ resize(b,len);
       /*<<buffer.ml 230 2>>*/  /*<<buffer.ml 230 2>>*/ caml_blit_string
       (s,0,b[1],b[2],len);
       /*<<buffer.ml 230 2>>*/ b[2] = new_position;
       /*<<buffer.ml 230 2>>*/ return 0 /*<<buffer.ml 231 28>>*/ }
    function default_float_precision(fconv)
     { /*<<camlinternalFormat.ml 221 2>>*/ return 5 === fconv[2]?12:-6 /*<<camlinternalFormat.ml 227 17>>*/ }
    function buffer_create(init_size)
     { /*<<camlinternalFormat.ml 256 49>>*/ return [0,
              0,
               /*<<camlinternalFormat.ml 256 49>>*/ caml_create_bytes
               (init_size)] /*<<camlinternalFormat.ml 256 73>>*/ }
    function buffer_check_size(buf,overhead)
     { /*<<camlinternalFormat.ml 260 2>>*/ var
        /*<<camlinternalFormat.ml 260 2>>*/ len=
         /*<<camlinternalFormat.ml 260 2>>*/ caml_ml_bytes_length(buf[2]),
        /*<<camlinternalFormat.ml 260 2>>*/ min_len=buf[1] + overhead | 0,
        /*<<camlinternalFormat.ml 260 2>>*/ _pW_=len < min_len?1:0;
       /*<<camlinternalFormat.ml 260 2>>*/ if(_pW_)
       { /*<<camlinternalFormat.ml 263 18>>*/ var
          /*<<camlinternalFormat.ml 263 18>>*/ new_len=
           /*<<camlinternalFormat.ml 263 18>>*/ max(len * 2 | 0,min_len),
          /*<<camlinternalFormat.ml 264 4>>*/ new_str=
           /*<<camlinternalFormat.ml 264 4>>*/ caml_create_bytes(new_len);
         /*<<camlinternalFormat.ml 265 4>>*/  /*<<camlinternalFormat.ml 265 4>>*/ blit
         (buf[2],0,new_str,0,len);
         /*<<camlinternalFormat.ml 265 4>>*/ buf[2] = new_str;
         /*<<camlinternalFormat.ml 263 18>>*/ var _pX_=0}
      else
       var _pX_=_pW_;
       /*<<camlinternalFormat.ml 256 30>>*/ return _pX_ /*<<camlinternalFormat.ml 267 3>>*/ }
    function buffer_add_char(buf,c)
     { /*<<camlinternalFormat.ml 271 2>>*/  /*<<camlinternalFormat.ml 271 2>>*/ buffer_check_size
       (buf,1);
       /*<<camlinternalFormat.ml 272 2>>*/  /*<<camlinternalFormat.ml 272 2>>*/ caml_bytes_set
       (buf[2],buf[1],c);
       /*<<camlinternalFormat.ml 272 2>>*/ buf[1] = buf[1] + 1 | 0;
       /*<<camlinternalFormat.ml 272 2>>*/ return 0 /*<<camlinternalFormat.ml 273 24>>*/ }
    function buffer_add_string(buf,s)
     { /*<<camlinternalFormat.ml 277 2>>*/  /*<<camlinternalFormat.ml 277 2>>*/ var
       str_len=
         /*<<camlinternalFormat.ml 277 2>>*/ caml_ml_string_length(s);
       /*<<camlinternalFormat.ml 278 2>>*/  /*<<camlinternalFormat.ml 278 2>>*/ buffer_check_size
       (buf,str_len);
       /*<<camlinternalFormat.ml 279 2>>*/  /*<<camlinternalFormat.ml 279 2>>*/ blit$0
       (s,0,buf[2],buf[1],str_len);
       /*<<camlinternalFormat.ml 279 2>>*/ buf[1] = buf[1] + str_len | 0;
       /*<<camlinternalFormat.ml 279 2>>*/ return 0 /*<<camlinternalFormat.ml 280 30>>*/ }
    function buffer_contents(buf)
     { /*<<camlinternalFormat.ml 284 2>>*/ return  /*<<camlinternalFormat.ml 284 2>>*/ sub_string
              (buf[2],0,buf[1]) /*<<camlinternalFormat.ml 284 38>>*/ }
    function string_of_formatting_lit(formatting_lit)
     { /*<<camlinternalFormat.ml 465 46>>*/ if
       (typeof formatting_lit === "number")
        /*<<camlinternalFormat.ml 465 46>>*/ switch(formatting_lit)
        {case 0: /*<<camlinternalFormat.ml 466 28>>*/ return _E_;
         case 1: /*<<camlinternalFormat.ml 467 28>>*/ return _F_;
         case 2: /*<<camlinternalFormat.ml 469 28>>*/ return _G_;
         case 3: /*<<camlinternalFormat.ml 470 28>>*/ return _H_;
         case 4: /*<<camlinternalFormat.ml 471 28>>*/ return _I_;
         case 5: /*<<camlinternalFormat.ml 473 28>>*/ return _J_;
         default: /*<<camlinternalFormat.ml 474 28>>*/ return _K_}
      else
        /*<<camlinternalFormat.ml 465 46>>*/ switch(formatting_lit[0])
        {case 0:
           /*<<camlinternalFormat.ml 468 28>>*/  /*<<camlinternalFormat.ml 468 28>>*/ var
           str=
            formatting_lit[1];
           /*<<camlinternalFormat.ml 468 28>>*/ return str;
         case 1:
           /*<<camlinternalFormat.ml 472 28>>*/  /*<<camlinternalFormat.ml 472 28>>*/ var
           str$0=
            formatting_lit[1];
           /*<<camlinternalFormat.ml 472 28>>*/ return str$0;
         default:
           /*<<camlinternalFormat.ml 475 20>>*/  /*<<camlinternalFormat.ml 475 20>>*/ var
           c=
            formatting_lit[1];
           /*<<camlinternalFormat.ml 475 26>>*/ return  /*<<camlinternalFormat.ml 475 26>>*/ symbol
                  (_L_, /*<<camlinternalFormat.ml 475 26>>*/ make$0(1,c))} /*<<camlinternalFormat.ml 475 43>>*/ }
    function bprint_fmtty(buf,fmtty)
     { /*<<?>>*/ var fmtty$0=fmtty;
       /*<<camlinternalFormat.ml 496 17>>*/ for(;;)
        /*<<camlinternalFormat.ml 496 17>>*/ if(typeof fmtty$0 === "number")
         /*<<camlinternalFormat.ml 521 20>>*/ return 0;
       else
         /*<<camlinternalFormat.ml 496 17>>*/ switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
            /*<<camlinternalFormat.ml 497 25>>*/  /*<<camlinternalFormat.ml 497 25>>*/ buffer_add_string
            (buf,_M_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
            /*<<camlinternalFormat.ml 498 25>>*/  /*<<camlinternalFormat.ml 498 25>>*/ buffer_add_string
            (buf,_N_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
            /*<<camlinternalFormat.ml 499 25>>*/  /*<<camlinternalFormat.ml 499 25>>*/ buffer_add_string
            (buf,_O_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
            /*<<camlinternalFormat.ml 500 25>>*/  /*<<camlinternalFormat.ml 500 25>>*/ buffer_add_string
            (buf,_P_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
            /*<<camlinternalFormat.ml 501 25>>*/  /*<<camlinternalFormat.ml 501 25>>*/ buffer_add_string
            (buf,_Q_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
            /*<<camlinternalFormat.ml 502 25>>*/  /*<<camlinternalFormat.ml 502 25>>*/ buffer_add_string
            (buf,_R_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
            /*<<camlinternalFormat.ml 503 25>>*/  /*<<camlinternalFormat.ml 503 25>>*/ buffer_add_string
            (buf,_S_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
            /*<<camlinternalFormat.ml 504 25>>*/  /*<<camlinternalFormat.ml 504 25>>*/ buffer_add_string
            (buf,_T_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
            /*<<camlinternalFormat.ml 515 4>>*/  /*<<camlinternalFormat.ml 515 4>>*/ buffer_add_string
            (buf,_U_);
            /*<<camlinternalFormat.ml 515 32>>*/  /*<<camlinternalFormat.ml 515 32>>*/ bprint_fmtty
            (buf,sub_fmtty);
            /*<<camlinternalFormat.ml 516 4>>*/  /*<<camlinternalFormat.ml 516 4>>*/ buffer_add_string
            (buf,_V_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
            /*<<camlinternalFormat.ml 518 4>>*/  /*<<camlinternalFormat.ml 518 4>>*/ buffer_add_string
            (buf,_W_);
            /*<<camlinternalFormat.ml 518 32>>*/  /*<<camlinternalFormat.ml 518 32>>*/ bprint_fmtty
            (buf,sub_fmtty$0);
            /*<<camlinternalFormat.ml 519 4>>*/  /*<<camlinternalFormat.ml 519 4>>*/ buffer_add_string
            (buf,_X_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
            /*<<camlinternalFormat.ml 505 25>>*/  /*<<camlinternalFormat.ml 505 25>>*/ buffer_add_string
            (buf,_Y_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
            /*<<camlinternalFormat.ml 506 25>>*/  /*<<camlinternalFormat.ml 506 25>>*/ buffer_add_string
            (buf,_Z_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
            /*<<camlinternalFormat.ml 507 25>>*/  /*<<camlinternalFormat.ml 507 25>>*/ buffer_add_string
            (buf,___);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
            /*<<camlinternalFormat.ml 508 25>>*/  /*<<camlinternalFormat.ml 508 25>>*/ buffer_add_string
            (buf,_$_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
            /*<<camlinternalFormat.ml 511 4>>*/  /*<<camlinternalFormat.ml 511 4>>*/ buffer_add_string
            (buf,_aa_);
           var fmtty$0=rest$13;
           continue} /*<<camlinternalFormat.ml 521 22>>*/ }
    function symm(param)
     { /*<<camlinternalFormat.ml 657 8>>*/ if(typeof param === "number")
        /*<<camlinternalFormat.ml 680 20>>*/ return 0;
      else
        /*<<camlinternalFormat.ml 657 8>>*/ switch(param[0])
        {case 0:
           /*<<camlinternalFormat.ml 663 20>>*/  /*<<camlinternalFormat.ml 663 20>>*/ var
           rest=
            param[1];
           /*<<camlinternalFormat.ml 663 28>>*/ return [0,
                   /*<<camlinternalFormat.ml 663 28>>*/ symm(rest)];
         case 1:
           /*<<camlinternalFormat.ml 670 22>>*/  /*<<camlinternalFormat.ml 670 22>>*/ var
           rest$0=
            param[1];
           /*<<camlinternalFormat.ml 670 32>>*/ return [1,
                   /*<<camlinternalFormat.ml 670 32>>*/ symm(rest$0)];
         case 2:
           /*<<camlinternalFormat.ml 664 19>>*/  /*<<camlinternalFormat.ml 664 19>>*/ var
           rest$1=
            param[1];
           /*<<camlinternalFormat.ml 664 26>>*/ return [2,
                   /*<<camlinternalFormat.ml 664 26>>*/ symm(rest$1)];
         case 3:
           /*<<camlinternalFormat.ml 665 21>>*/  /*<<camlinternalFormat.ml 665 21>>*/ var
           rest$2=
            param[1];
           /*<<camlinternalFormat.ml 665 30>>*/ return [3,
                   /*<<camlinternalFormat.ml 665 30>>*/ symm(rest$2)];
         case 4:
           /*<<camlinternalFormat.ml 667 25>>*/  /*<<camlinternalFormat.ml 667 25>>*/ var
           rest$3=
            param[1];
           /*<<camlinternalFormat.ml 667 38>>*/ return [4,
                   /*<<camlinternalFormat.ml 667 38>>*/ symm(rest$3)];
         case 5:
           /*<<camlinternalFormat.ml 666 21>>*/  /*<<camlinternalFormat.ml 666 21>>*/ var
           rest$4=
            param[1];
           /*<<camlinternalFormat.ml 666 30>>*/ return [5,
                   /*<<camlinternalFormat.ml 666 30>>*/ symm(rest$4)];
         case 6:
           /*<<camlinternalFormat.ml 668 21>>*/  /*<<camlinternalFormat.ml 668 21>>*/ var
           rest$5=
            param[1];
           /*<<camlinternalFormat.ml 668 30>>*/ return [6,
                   /*<<camlinternalFormat.ml 668 30>>*/ symm(rest$5)];
         case 7:
           /*<<camlinternalFormat.ml 669 20>>*/  /*<<camlinternalFormat.ml 669 20>>*/ var
           rest$6=
            param[1];
           /*<<camlinternalFormat.ml 669 28>>*/ return [7,
                   /*<<camlinternalFormat.ml 669 28>>*/ symm(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];
           /*<<camlinternalFormat.ml 677 23>>*/ return [8,
                  ty,
                   /*<<camlinternalFormat.ml 677 23>>*/ symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
           /*<<camlinternalFormat.ml 679 31>>*/ return [9,
                  ty2,
                  ty1,
                   /*<<camlinternalFormat.ml 679 31>>*/ symm(rest$8)];
         case 10:
           /*<<camlinternalFormat.ml 672 21>>*/  /*<<camlinternalFormat.ml 672 21>>*/ var
           rest$9=
            param[1];
           /*<<camlinternalFormat.ml 672 30>>*/ return [10,
                   /*<<camlinternalFormat.ml 672 30>>*/ symm(rest$9)];
         case 11:
           /*<<camlinternalFormat.ml 671 21>>*/  /*<<camlinternalFormat.ml 671 21>>*/ var
           rest$10=
            param[1];
           /*<<camlinternalFormat.ml 671 30>>*/ return [11,
                   /*<<camlinternalFormat.ml 671 30>>*/ symm(rest$10)];
         case 12:
           /*<<camlinternalFormat.ml 673 19>>*/  /*<<camlinternalFormat.ml 673 19>>*/ var
           rest$11=
            param[1];
           /*<<camlinternalFormat.ml 673 26>>*/ return [12,
                   /*<<camlinternalFormat.ml 673 26>>*/ symm(rest$11)];
         case 13:
           /*<<camlinternalFormat.ml 674 22>>*/  /*<<camlinternalFormat.ml 674 22>>*/ var
           rest$12=
            param[1];
           /*<<camlinternalFormat.ml 674 32>>*/ return [13,
                   /*<<camlinternalFormat.ml 674 32>>*/ symm(rest$12)];
         default:
           /*<<camlinternalFormat.ml 675 30>>*/  /*<<camlinternalFormat.ml 675 30>>*/ var
           rest$13=
            param[1];
           /*<<camlinternalFormat.ml 675 48>>*/ return [14,
                   /*<<camlinternalFormat.ml 675 48>>*/ symm(rest$13)]} /*<<camlinternalFormat.ml 680 32>>*/ }
    function trans(ty1,match)
     { /*<<?>>*/ var switch$0=0;
       /*<<camlinternalFormat.ml 803 17>>*/ if(typeof ty1 === "number")
       if(typeof match === "number")
         /*<<camlinternalFormat.ml 849 34>>*/ return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:
            /*<<camlinternalFormat.ml 850 23>>*/ throw [0,Assert_failure,_ab_]}
      else
        /*<<camlinternalFormat.ml 803 17>>*/ switch(ty1[0])
        {case 0:
          var switch$1=0,_pD_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:
               /*<<camlinternalFormat.ml 804 36>>*/  /*<<camlinternalFormat.ml 804 36>>*/ var
               rest2=
                match[1];
               /*<<camlinternalFormat.ml 804 44>>*/ return [0,
                       /*<<camlinternalFormat.ml 804 44>>*/ trans(_pD_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_pE_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:
               /*<<camlinternalFormat.ml 805 40>>*/  /*<<camlinternalFormat.ml 805 40>>*/ var
               rest2$0=
                match[1];
               /*<<camlinternalFormat.ml 805 50>>*/ return [1,
                       /*<<camlinternalFormat.ml 805 50>>*/ trans(_pE_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_pF_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:
               /*<<camlinternalFormat.ml 807 34>>*/  /*<<camlinternalFormat.ml 807 34>>*/ var
               rest2$1=
                match[1];
               /*<<camlinternalFormat.ml 807 41>>*/ return [2,
                       /*<<camlinternalFormat.ml 807 41>>*/ trans(_pF_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_pG_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:
               /*<<camlinternalFormat.ml 808 38>>*/  /*<<camlinternalFormat.ml 808 38>>*/ var
               rest2$2=
                match[1];
               /*<<camlinternalFormat.ml 808 47>>*/ return [3,
                       /*<<camlinternalFormat.ml 808 47>>*/ trans(_pG_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_pH_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:
               /*<<camlinternalFormat.ml 810 46>>*/  /*<<camlinternalFormat.ml 810 46>>*/ var
               rest2$3=
                match[1];
               /*<<camlinternalFormat.ml 810 59>>*/ return [4,
                       /*<<camlinternalFormat.ml 810 59>>*/ trans(_pH_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_pI_=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:
               /*<<camlinternalFormat.ml 809 38>>*/  /*<<camlinternalFormat.ml 809 38>>*/ var
               rest2$4=
                match[1];
               /*<<camlinternalFormat.ml 809 47>>*/ return [5,
                       /*<<camlinternalFormat.ml 809 47>>*/ trans(_pI_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_pJ_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:
               /*<<camlinternalFormat.ml 811 38>>*/  /*<<camlinternalFormat.ml 811 38>>*/ var
               rest2$5=
                match[1];
               /*<<camlinternalFormat.ml 811 47>>*/ return [6,
                       /*<<camlinternalFormat.ml 811 47>>*/ trans(_pJ_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_pK_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:
               /*<<camlinternalFormat.ml 806 36>>*/  /*<<camlinternalFormat.ml 806 36>>*/ var
               rest2$6=
                match[1];
               /*<<camlinternalFormat.ml 806 44>>*/ return [7,
                       /*<<camlinternalFormat.ml 806 44>>*/ trans(_pK_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_pL_=ty1[2],_pM_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
               /*<<camlinternalFormat.ml 835 34>>*/ var
               rest2$7=match[2],
               ty2=match[1],
                /*<<camlinternalFormat.ml 835 34>>*/ _pN_=
                 /*<<camlinternalFormat.ml 835 34>>*/ trans(_pL_,rest2$7);
               /*<<camlinternalFormat.ml 835 19>>*/ return [8,
                       /*<<camlinternalFormat.ml 835 19>>*/ trans(_pM_,ty2),
                      _pN_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)
            /*<<camlinternalFormat.ml 836 26>>*/ throw [0,Assert_failure,_ak_];
          break;
         case 9:
          var switch$10=0,_pO_=ty1[3],_pP_=ty1[2],_pQ_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
               /*<<camlinternalFormat.ml 841 13>>*/ var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
                /*<<camlinternalFormat.ml 841 13>>*/ ty=
                 /*<<camlinternalFormat.ml 841 13>>*/ trans
                 ( /*<<camlinternalFormat.ml 841 19>>*/ symm(_pP_),ty21),
                /*<<camlinternalFormat.ml 842 23>>*/ match$0=
                 /*<<camlinternalFormat.ml 842 23>>*/ fmtty_rel_det(ty),
                /*<<camlinternalFormat.ml 842 23>>*/ f4=match$0[4],
                /*<<camlinternalFormat.ml 842 23>>*/ f2=match$0[2];
               /*<<camlinternalFormat.ml 843 15>>*/  /*<<camlinternalFormat.ml 843 15>>*/ caml_call1
               (f2,0);
               /*<<camlinternalFormat.ml 844 15>>*/  /*<<camlinternalFormat.ml 844 15>>*/ caml_call1
               (f4,0);
               /*<<camlinternalFormat.ml 845 33>>*/ return [9,
                      _pQ_,
                      ty22,
                       /*<<camlinternalFormat.ml 845 33>>*/ trans(_pO_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)
            /*<<camlinternalFormat.ml 846 28>>*/ throw [0,Assert_failure,_al_];
          break;
         case 10:
          var _pR_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           { /*<<camlinternalFormat.ml 813 38>>*/  /*<<camlinternalFormat.ml 813 38>>*/ var
             rest2$9=
              match[1];
             /*<<camlinternalFormat.ml 813 47>>*/ return [10,
                     /*<<camlinternalFormat.ml 813 47>>*/ trans(_pR_,rest2$9)]}
           /*<<camlinternalFormat.ml 814 21>>*/ throw [0,Assert_failure,_am_];
         case 11:
          var switch$11=0,_pS_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:
               /*<<camlinternalFormat.ml 817 38>>*/  /*<<camlinternalFormat.ml 817 38>>*/ var
               rest2$10=
                match[1];
               /*<<camlinternalFormat.ml 817 47>>*/ return [11,
                       /*<<camlinternalFormat.ml 817 47>>*/ trans(_pS_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)
            /*<<camlinternalFormat.ml 818 21>>*/ throw [0,Assert_failure,_an_];
          break;
         case 12:
          var switch$12=0,_pT_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:
               /*<<camlinternalFormat.ml 821 34>>*/  /*<<camlinternalFormat.ml 821 34>>*/ var
               rest2$11=
                match[1];
               /*<<camlinternalFormat.ml 821 41>>*/ return [12,
                       /*<<camlinternalFormat.ml 821 41>>*/ trans(_pT_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)
            /*<<camlinternalFormat.ml 822 19>>*/ throw [0,Assert_failure,_ao_];
          break;
         case 13:
          var switch$13=0,_pU_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:
               /*<<camlinternalFormat.ml 825 40>>*/  /*<<camlinternalFormat.ml 825 40>>*/ var
               rest2$12=
                match[1];
               /*<<camlinternalFormat.ml 825 50>>*/ return [13,
                       /*<<camlinternalFormat.ml 825 50>>*/ trans(_pU_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)
            /*<<camlinternalFormat.ml 826 22>>*/ throw [0,Assert_failure,_ap_];
          break;
         default:
          var switch$14=0,_pV_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:
               /*<<camlinternalFormat.ml 830 4>>*/  /*<<camlinternalFormat.ml 830 4>>*/ var
               rest2$13=
                match[1];
               /*<<camlinternalFormat.ml 830 22>>*/ return [14,
                       /*<<camlinternalFormat.ml 830 22>>*/ trans(_pV_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)
            /*<<camlinternalFormat.ml 831 30>>*/ throw [0,Assert_failure,_aq_]}
       /*<<camlinternalFormatBasics.ml 528 8>>*/ switch(switch$0)
       {case 0:
          /*<<camlinternalFormat.ml 815 21>>*/ throw [0,Assert_failure,_ae_];
        case 1:
          /*<<camlinternalFormat.ml 819 21>>*/ throw [0,Assert_failure,_af_];
        case 2:
          /*<<camlinternalFormat.ml 823 19>>*/ throw [0,Assert_failure,_ag_];
        case 3:
          /*<<camlinternalFormat.ml 827 22>>*/ throw [0,Assert_failure,_ah_];
        case 4:
          /*<<camlinternalFormat.ml 832 30>>*/ throw [0,Assert_failure,_ai_];
        case 5:
          /*<<camlinternalFormat.ml 837 26>>*/ throw [0,Assert_failure,_ac_];
        case 6:
          /*<<camlinternalFormat.ml 847 28>>*/ throw [0,Assert_failure,_ad_];
        default:
          /*<<camlinternalFormat.ml 851 23>>*/ throw [0,Assert_failure,_aj_]} /*<<camlinternalFormat.ml 851 35>>*/ }
    function fmtty_rel_det(param)
     { /*<<camlinternalFormat.ml 682 8>>*/ if(typeof param === "number")
       { /*<<camlinternalFormat.ml 691 4>>*/ var
          /*<<camlinternalFormat.ml 691 4>>*/ _pf_=
          function(param)
           { /*<<camlinternalFormat.ml 694 17>>*/ return 0 /*<<camlinternalFormat.ml 694 21>>*/ },
          /*<<camlinternalFormat.ml 691 4>>*/ _pg_=
          function(param)
           { /*<<camlinternalFormat.ml 693 17>>*/ return 0 /*<<camlinternalFormat.ml 693 21>>*/ },
          /*<<camlinternalFormat.ml 691 4>>*/ _ph_=
          function(param)
           { /*<<camlinternalFormat.ml 692 17>>*/ return 0 /*<<camlinternalFormat.ml 692 21>>*/ };
         /*<<camlinternalFormat.ml 691 4>>*/ return [0,
                function(param)
                 { /*<<camlinternalFormat.ml 691 17>>*/ return 0 /*<<camlinternalFormat.ml 691 21>>*/ },
                _ph_,
                _pg_,
                _pf_]}
      else
        /*<<camlinternalFormat.ml 682 8>>*/ switch(param[0])
        {case 0:
           /*<<camlinternalFormat.ml 696 4>>*/ var
            /*<<camlinternalFormat.ml 696 4>>*/ rest=param[1],
            /*<<camlinternalFormat.ml 696 25>>*/ match=
             /*<<camlinternalFormat.ml 696 25>>*/ fmtty_rel_det(rest),
            /*<<camlinternalFormat.ml 696 25>>*/ de=match[4],
            /*<<camlinternalFormat.ml 696 25>>*/ ed=match[3],
            /*<<camlinternalFormat.ml 696 25>>*/ af=match[2],
            /*<<camlinternalFormat.ml 696 25>>*/ fa=match[1],
            /*<<camlinternalFormat.ml 696 25>>*/ _pi_=
            function(param)
             { /*<<camlinternalFormat.ml 698 28>>*/  /*<<camlinternalFormat.ml 698 28>>*/ caml_call1
               (af,0);
               /*<<camlinternalFormat.ml 698 28>>*/ return 0 /*<<camlinternalFormat.ml 698 43>>*/ };
           /*<<camlinternalFormat.ml 696 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 697 28>>*/  /*<<camlinternalFormat.ml 697 28>>*/ caml_call1
                     (fa,0);
                     /*<<camlinternalFormat.ml 697 28>>*/ return 0 /*<<camlinternalFormat.ml 697 43>>*/ },
                  _pi_,
                  ed,
                  de];
         case 1:
           /*<<camlinternalFormat.ml 701 4>>*/ var
            /*<<camlinternalFormat.ml 701 4>>*/ rest$0=param[1],
            /*<<camlinternalFormat.ml 701 25>>*/ match$0=
             /*<<camlinternalFormat.ml 701 25>>*/ fmtty_rel_det(rest$0),
            /*<<camlinternalFormat.ml 701 25>>*/ de$0=match$0[4],
            /*<<camlinternalFormat.ml 701 25>>*/ ed$0=match$0[3],
            /*<<camlinternalFormat.ml 701 25>>*/ af$0=match$0[2],
            /*<<camlinternalFormat.ml 701 25>>*/ fa$0=match$0[1],
            /*<<camlinternalFormat.ml 701 25>>*/ _pj_=
            function(param)
             { /*<<camlinternalFormat.ml 703 28>>*/  /*<<camlinternalFormat.ml 703 28>>*/ caml_call1
               (af$0,0);
               /*<<camlinternalFormat.ml 703 28>>*/ return 0 /*<<camlinternalFormat.ml 703 43>>*/ };
           /*<<camlinternalFormat.ml 701 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 702 28>>*/  /*<<camlinternalFormat.ml 702 28>>*/ caml_call1
                     (fa$0,0);
                     /*<<camlinternalFormat.ml 702 28>>*/ return 0 /*<<camlinternalFormat.ml 702 43>>*/ },
                  _pj_,
                  ed$0,
                  de$0];
         case 2:
           /*<<camlinternalFormat.ml 706 4>>*/ var
            /*<<camlinternalFormat.ml 706 4>>*/ rest$1=param[1],
            /*<<camlinternalFormat.ml 706 25>>*/ match$1=
             /*<<camlinternalFormat.ml 706 25>>*/ fmtty_rel_det(rest$1),
            /*<<camlinternalFormat.ml 706 25>>*/ de$1=match$1[4],
            /*<<camlinternalFormat.ml 706 25>>*/ ed$1=match$1[3],
            /*<<camlinternalFormat.ml 706 25>>*/ af$1=match$1[2],
            /*<<camlinternalFormat.ml 706 25>>*/ fa$1=match$1[1],
            /*<<camlinternalFormat.ml 706 25>>*/ _pk_=
            function(param)
             { /*<<camlinternalFormat.ml 708 28>>*/  /*<<camlinternalFormat.ml 708 28>>*/ caml_call1
               (af$1,0);
               /*<<camlinternalFormat.ml 708 28>>*/ return 0 /*<<camlinternalFormat.ml 708 43>>*/ };
           /*<<camlinternalFormat.ml 706 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 707 28>>*/  /*<<camlinternalFormat.ml 707 28>>*/ caml_call1
                     (fa$1,0);
                     /*<<camlinternalFormat.ml 707 28>>*/ return 0 /*<<camlinternalFormat.ml 707 43>>*/ },
                  _pk_,
                  ed$1,
                  de$1];
         case 3:
           /*<<camlinternalFormat.ml 711 4>>*/ var
            /*<<camlinternalFormat.ml 711 4>>*/ rest$2=param[1],
            /*<<camlinternalFormat.ml 711 25>>*/ match$2=
             /*<<camlinternalFormat.ml 711 25>>*/ fmtty_rel_det(rest$2),
            /*<<camlinternalFormat.ml 711 25>>*/ de$2=match$2[4],
            /*<<camlinternalFormat.ml 711 25>>*/ ed$2=match$2[3],
            /*<<camlinternalFormat.ml 711 25>>*/ af$2=match$2[2],
            /*<<camlinternalFormat.ml 711 25>>*/ fa$2=match$2[1],
            /*<<camlinternalFormat.ml 711 25>>*/ _pl_=
            function(param)
             { /*<<camlinternalFormat.ml 713 28>>*/  /*<<camlinternalFormat.ml 713 28>>*/ caml_call1
               (af$2,0);
               /*<<camlinternalFormat.ml 713 28>>*/ return 0 /*<<camlinternalFormat.ml 713 43>>*/ };
           /*<<camlinternalFormat.ml 711 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 712 28>>*/  /*<<camlinternalFormat.ml 712 28>>*/ caml_call1
                     (fa$2,0);
                     /*<<camlinternalFormat.ml 712 28>>*/ return 0 /*<<camlinternalFormat.ml 712 43>>*/ },
                  _pl_,
                  ed$2,
                  de$2];
         case 4:
           /*<<camlinternalFormat.ml 721 4>>*/ var
            /*<<camlinternalFormat.ml 721 4>>*/ rest$3=param[1],
            /*<<camlinternalFormat.ml 721 25>>*/ match$3=
             /*<<camlinternalFormat.ml 721 25>>*/ fmtty_rel_det(rest$3),
            /*<<camlinternalFormat.ml 721 25>>*/ de$3=match$3[4],
            /*<<camlinternalFormat.ml 721 25>>*/ ed$3=match$3[3],
            /*<<camlinternalFormat.ml 721 25>>*/ af$3=match$3[2],
            /*<<camlinternalFormat.ml 721 25>>*/ fa$3=match$3[1],
            /*<<camlinternalFormat.ml 721 25>>*/ _pm_=
            function(param)
             { /*<<camlinternalFormat.ml 723 28>>*/  /*<<camlinternalFormat.ml 723 28>>*/ caml_call1
               (af$3,0);
               /*<<camlinternalFormat.ml 723 28>>*/ return 0 /*<<camlinternalFormat.ml 723 43>>*/ };
           /*<<camlinternalFormat.ml 721 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 722 28>>*/  /*<<camlinternalFormat.ml 722 28>>*/ caml_call1
                     (fa$3,0);
                     /*<<camlinternalFormat.ml 722 28>>*/ return 0 /*<<camlinternalFormat.ml 722 43>>*/ },
                  _pm_,
                  ed$3,
                  de$3];
         case 5:
           /*<<camlinternalFormat.ml 716 4>>*/ var
            /*<<camlinternalFormat.ml 716 4>>*/ rest$4=param[1],
            /*<<camlinternalFormat.ml 716 25>>*/ match$4=
             /*<<camlinternalFormat.ml 716 25>>*/ fmtty_rel_det(rest$4),
            /*<<camlinternalFormat.ml 716 25>>*/ de$4=match$4[4],
            /*<<camlinternalFormat.ml 716 25>>*/ ed$4=match$4[3],
            /*<<camlinternalFormat.ml 716 25>>*/ af$4=match$4[2],
            /*<<camlinternalFormat.ml 716 25>>*/ fa$4=match$4[1],
            /*<<camlinternalFormat.ml 716 25>>*/ _pn_=
            function(param)
             { /*<<camlinternalFormat.ml 718 28>>*/  /*<<camlinternalFormat.ml 718 28>>*/ caml_call1
               (af$4,0);
               /*<<camlinternalFormat.ml 718 28>>*/ return 0 /*<<camlinternalFormat.ml 718 43>>*/ };
           /*<<camlinternalFormat.ml 716 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 717 28>>*/  /*<<camlinternalFormat.ml 717 28>>*/ caml_call1
                     (fa$4,0);
                     /*<<camlinternalFormat.ml 717 28>>*/ return 0 /*<<camlinternalFormat.ml 717 43>>*/ },
                  _pn_,
                  ed$4,
                  de$4];
         case 6:
           /*<<camlinternalFormat.ml 726 4>>*/ var
            /*<<camlinternalFormat.ml 726 4>>*/ rest$5=param[1],
            /*<<camlinternalFormat.ml 726 25>>*/ match$5=
             /*<<camlinternalFormat.ml 726 25>>*/ fmtty_rel_det(rest$5),
            /*<<camlinternalFormat.ml 726 25>>*/ de$5=match$5[4],
            /*<<camlinternalFormat.ml 726 25>>*/ ed$5=match$5[3],
            /*<<camlinternalFormat.ml 726 25>>*/ af$5=match$5[2],
            /*<<camlinternalFormat.ml 726 25>>*/ fa$5=match$5[1],
            /*<<camlinternalFormat.ml 726 25>>*/ _po_=
            function(param)
             { /*<<camlinternalFormat.ml 728 28>>*/  /*<<camlinternalFormat.ml 728 28>>*/ caml_call1
               (af$5,0);
               /*<<camlinternalFormat.ml 728 28>>*/ return 0 /*<<camlinternalFormat.ml 728 43>>*/ };
           /*<<camlinternalFormat.ml 726 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 727 28>>*/  /*<<camlinternalFormat.ml 727 28>>*/ caml_call1
                     (fa$5,0);
                     /*<<camlinternalFormat.ml 727 28>>*/ return 0 /*<<camlinternalFormat.ml 727 43>>*/ },
                  _po_,
                  ed$5,
                  de$5];
         case 7:
           /*<<camlinternalFormat.ml 731 4>>*/ var
            /*<<camlinternalFormat.ml 731 4>>*/ rest$6=param[1],
            /*<<camlinternalFormat.ml 731 25>>*/ match$6=
             /*<<camlinternalFormat.ml 731 25>>*/ fmtty_rel_det(rest$6),
            /*<<camlinternalFormat.ml 731 25>>*/ de$6=match$6[4],
            /*<<camlinternalFormat.ml 731 25>>*/ ed$6=match$6[3],
            /*<<camlinternalFormat.ml 731 25>>*/ af$6=match$6[2],
            /*<<camlinternalFormat.ml 731 25>>*/ fa$6=match$6[1],
            /*<<camlinternalFormat.ml 731 25>>*/ _pp_=
            function(param)
             { /*<<camlinternalFormat.ml 733 28>>*/  /*<<camlinternalFormat.ml 733 28>>*/ caml_call1
               (af$6,0);
               /*<<camlinternalFormat.ml 733 28>>*/ return 0 /*<<camlinternalFormat.ml 733 43>>*/ };
           /*<<camlinternalFormat.ml 731 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 732 28>>*/  /*<<camlinternalFormat.ml 732 28>>*/ caml_call1
                     (fa$6,0);
                     /*<<camlinternalFormat.ml 732 28>>*/ return 0 /*<<camlinternalFormat.ml 732 43>>*/ },
                  _pp_,
                  ed$6,
                  de$6];
         case 8:
           /*<<camlinternalFormat.ml 764 4>>*/ var
            /*<<camlinternalFormat.ml 764 4>>*/ rest$7=param[2],
            /*<<camlinternalFormat.ml 764 25>>*/ match$7=
             /*<<camlinternalFormat.ml 764 25>>*/ fmtty_rel_det(rest$7),
            /*<<camlinternalFormat.ml 764 25>>*/ de$7=match$7[4],
            /*<<camlinternalFormat.ml 764 25>>*/ ed$7=match$7[3],
            /*<<camlinternalFormat.ml 764 25>>*/ af$7=match$7[2],
            /*<<camlinternalFormat.ml 764 25>>*/ fa$7=match$7[1],
            /*<<camlinternalFormat.ml 764 25>>*/ _pq_=
            function(param)
             { /*<<camlinternalFormat.ml 766 28>>*/  /*<<camlinternalFormat.ml 766 28>>*/ caml_call1
               (af$7,0);
               /*<<camlinternalFormat.ml 766 28>>*/ return 0 /*<<camlinternalFormat.ml 766 43>>*/ };
           /*<<camlinternalFormat.ml 764 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 765 28>>*/  /*<<camlinternalFormat.ml 765 28>>*/ caml_call1
                     (fa$7,0);
                     /*<<camlinternalFormat.ml 765 28>>*/ return 0 /*<<camlinternalFormat.ml 765 43>>*/ },
                  _pq_,
                  ed$7,
                  de$7];
         case 9:
           /*<<camlinternalFormat.ml 769 25>>*/ var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
            /*<<camlinternalFormat.ml 769 25>>*/ match$8=
             /*<<camlinternalFormat.ml 769 25>>*/ fmtty_rel_det(rest$8),
            /*<<camlinternalFormat.ml 769 25>>*/ de$8=match$8[4],
            /*<<camlinternalFormat.ml 769 25>>*/ ed$8=match$8[3],
            /*<<camlinternalFormat.ml 769 25>>*/ af$8=match$8[2],
            /*<<camlinternalFormat.ml 769 25>>*/ fa$8=match$8[1],
            /*<<camlinternalFormat.ml 770 13>>*/ ty=
             /*<<camlinternalFormat.ml 770 13>>*/ trans
             ( /*<<camlinternalFormat.ml 770 19>>*/ symm(ty1),ty2),
            /*<<camlinternalFormat.ml 771 25>>*/ match$9=
             /*<<camlinternalFormat.ml 771 25>>*/ fmtty_rel_det(ty),
            /*<<camlinternalFormat.ml 771 25>>*/ jd=match$9[4],
            /*<<camlinternalFormat.ml 771 25>>*/ dj=match$9[3],
            /*<<camlinternalFormat.ml 771 25>>*/ ga=match$9[2],
            /*<<camlinternalFormat.ml 771 25>>*/ ag=match$9[1],
            /*<<camlinternalFormat.ml 771 25>>*/ _pr_=
            function(param)
             { /*<<camlinternalFormat.ml 775 28>>*/  /*<<camlinternalFormat.ml 775 28>>*/ caml_call1
               (jd,0);
               /*<<camlinternalFormat.ml 775 50>>*/  /*<<camlinternalFormat.ml 775 50>>*/ caml_call1
               (de$8,0);
               /*<<camlinternalFormat.ml 775 50>>*/ return 0 /*<<camlinternalFormat.ml 775 65>>*/ },
            /*<<camlinternalFormat.ml 771 25>>*/ _ps_=
            function(param)
             { /*<<camlinternalFormat.ml 774 28>>*/  /*<<camlinternalFormat.ml 774 28>>*/ caml_call1
               (ed$8,0);
               /*<<camlinternalFormat.ml 774 50>>*/  /*<<camlinternalFormat.ml 774 50>>*/ caml_call1
               (dj,0);
               /*<<camlinternalFormat.ml 774 50>>*/ return 0 /*<<camlinternalFormat.ml 774 65>>*/ },
            /*<<camlinternalFormat.ml 771 25>>*/ _pt_=
            function(param)
             { /*<<camlinternalFormat.ml 773 28>>*/  /*<<camlinternalFormat.ml 773 28>>*/ caml_call1
               (ga,0);
               /*<<camlinternalFormat.ml 773 50>>*/  /*<<camlinternalFormat.ml 773 50>>*/ caml_call1
               (af$8,0);
               /*<<camlinternalFormat.ml 773 50>>*/ return 0 /*<<camlinternalFormat.ml 773 65>>*/ };
           /*<<camlinternalFormat.ml 771 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 772 28>>*/  /*<<camlinternalFormat.ml 772 28>>*/ caml_call1
                     (fa$8,0);
                     /*<<camlinternalFormat.ml 772 50>>*/  /*<<camlinternalFormat.ml 772 50>>*/ caml_call1
                     (ag,0);
                     /*<<camlinternalFormat.ml 772 50>>*/ return 0 /*<<camlinternalFormat.ml 772 65>>*/ },
                  _pt_,
                  _ps_,
                  _pr_];
         case 10:
           /*<<camlinternalFormat.ml 742 4>>*/ var
            /*<<camlinternalFormat.ml 742 4>>*/ rest$9=param[1],
            /*<<camlinternalFormat.ml 742 25>>*/ match$10=
             /*<<camlinternalFormat.ml 742 25>>*/ fmtty_rel_det(rest$9),
            /*<<camlinternalFormat.ml 742 25>>*/ de$9=match$10[4],
            /*<<camlinternalFormat.ml 742 25>>*/ ed$9=match$10[3],
            /*<<camlinternalFormat.ml 742 25>>*/ af$9=match$10[2],
            /*<<camlinternalFormat.ml 742 25>>*/ fa$9=match$10[1],
            /*<<camlinternalFormat.ml 742 25>>*/ _pu_=
            function(param)
             { /*<<camlinternalFormat.ml 744 28>>*/  /*<<camlinternalFormat.ml 744 28>>*/ caml_call1
               (af$9,0);
               /*<<camlinternalFormat.ml 744 28>>*/ return 0 /*<<camlinternalFormat.ml 744 43>>*/ };
           /*<<camlinternalFormat.ml 742 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 743 28>>*/  /*<<camlinternalFormat.ml 743 28>>*/ caml_call1
                     (fa$9,0);
                     /*<<camlinternalFormat.ml 743 28>>*/ return 0 /*<<camlinternalFormat.ml 743 43>>*/ },
                  _pu_,
                  ed$9,
                  de$9];
         case 11:
           /*<<camlinternalFormat.ml 737 4>>*/ var
            /*<<camlinternalFormat.ml 737 4>>*/ rest$10=param[1],
            /*<<camlinternalFormat.ml 737 25>>*/ match$11=
             /*<<camlinternalFormat.ml 737 25>>*/ fmtty_rel_det(rest$10),
            /*<<camlinternalFormat.ml 737 25>>*/ de$10=match$11[4],
            /*<<camlinternalFormat.ml 737 25>>*/ ed$10=match$11[3],
            /*<<camlinternalFormat.ml 737 25>>*/ af$10=match$11[2],
            /*<<camlinternalFormat.ml 737 25>>*/ fa$10=match$11[1],
            /*<<camlinternalFormat.ml 737 25>>*/ _pv_=
            function(param)
             { /*<<camlinternalFormat.ml 739 28>>*/  /*<<camlinternalFormat.ml 739 28>>*/ caml_call1
               (af$10,0);
               /*<<camlinternalFormat.ml 739 28>>*/ return 0 /*<<camlinternalFormat.ml 739 43>>*/ };
           /*<<camlinternalFormat.ml 737 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 738 28>>*/  /*<<camlinternalFormat.ml 738 28>>*/ caml_call1
                     (fa$10,0);
                     /*<<camlinternalFormat.ml 738 28>>*/ return 0 /*<<camlinternalFormat.ml 738 43>>*/ },
                  _pv_,
                  ed$10,
                  de$10];
         case 12:
           /*<<camlinternalFormat.ml 747 4>>*/ var
            /*<<camlinternalFormat.ml 747 4>>*/ rest$11=param[1],
            /*<<camlinternalFormat.ml 747 25>>*/ match$12=
             /*<<camlinternalFormat.ml 747 25>>*/ fmtty_rel_det(rest$11),
            /*<<camlinternalFormat.ml 747 25>>*/ de$11=match$12[4],
            /*<<camlinternalFormat.ml 747 25>>*/ ed$11=match$12[3],
            /*<<camlinternalFormat.ml 747 25>>*/ af$11=match$12[2],
            /*<<camlinternalFormat.ml 747 25>>*/ fa$11=match$12[1],
            /*<<camlinternalFormat.ml 747 25>>*/ _pw_=
            function(param)
             { /*<<camlinternalFormat.ml 749 28>>*/  /*<<camlinternalFormat.ml 749 28>>*/ caml_call1
               (af$11,0);
               /*<<camlinternalFormat.ml 749 28>>*/ return 0 /*<<camlinternalFormat.ml 749 43>>*/ };
           /*<<camlinternalFormat.ml 747 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 748 28>>*/  /*<<camlinternalFormat.ml 748 28>>*/ caml_call1
                     (fa$11,0);
                     /*<<camlinternalFormat.ml 748 28>>*/ return 0 /*<<camlinternalFormat.ml 748 43>>*/ },
                  _pw_,
                  ed$11,
                  de$11];
         case 13:
           /*<<camlinternalFormat.ml 752 4>>*/ var
            /*<<camlinternalFormat.ml 752 4>>*/ rest$12=param[1],
            /*<<camlinternalFormat.ml 752 25>>*/ match$13=
             /*<<camlinternalFormat.ml 752 25>>*/ fmtty_rel_det(rest$12),
            /*<<camlinternalFormat.ml 752 25>>*/ de$12=match$13[4],
            /*<<camlinternalFormat.ml 752 25>>*/ ed$12=match$13[3],
            /*<<camlinternalFormat.ml 752 25>>*/ af$12=match$13[2],
            /*<<camlinternalFormat.ml 752 25>>*/ fa$12=match$13[1],
            /*<<camlinternalFormat.ml 752 25>>*/ _px_=
            function(param)
             { /*<<camlinternalFormat.ml 756 28>>*/  /*<<camlinternalFormat.ml 756 28>>*/ caml_call1
               (de$12,0);
               /*<<camlinternalFormat.ml 756 28>>*/ return 0 /*<<camlinternalFormat.ml 756 43>>*/ },
            /*<<camlinternalFormat.ml 752 25>>*/ _py_=
            function(param)
             { /*<<camlinternalFormat.ml 755 28>>*/  /*<<camlinternalFormat.ml 755 28>>*/ caml_call1
               (ed$12,0);
               /*<<camlinternalFormat.ml 755 28>>*/ return 0 /*<<camlinternalFormat.ml 755 43>>*/ },
            /*<<camlinternalFormat.ml 752 25>>*/ _pz_=
            function(param)
             { /*<<camlinternalFormat.ml 754 28>>*/  /*<<camlinternalFormat.ml 754 28>>*/ caml_call1
               (af$12,0);
               /*<<camlinternalFormat.ml 754 28>>*/ return 0 /*<<camlinternalFormat.ml 754 43>>*/ };
           /*<<camlinternalFormat.ml 752 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 753 28>>*/  /*<<camlinternalFormat.ml 753 28>>*/ caml_call1
                     (fa$12,0);
                     /*<<camlinternalFormat.ml 753 28>>*/ return 0 /*<<camlinternalFormat.ml 753 43>>*/ },
                  _pz_,
                  _py_,
                  _px_];
         default:
           /*<<camlinternalFormat.ml 758 4>>*/ var
            /*<<camlinternalFormat.ml 758 4>>*/ rest$13=param[1],
            /*<<camlinternalFormat.ml 758 25>>*/ match$14=
             /*<<camlinternalFormat.ml 758 25>>*/ fmtty_rel_det(rest$13),
            /*<<camlinternalFormat.ml 758 25>>*/ de$13=match$14[4],
            /*<<camlinternalFormat.ml 758 25>>*/ ed$13=match$14[3],
            /*<<camlinternalFormat.ml 758 25>>*/ af$13=match$14[2],
            /*<<camlinternalFormat.ml 758 25>>*/ fa$13=match$14[1],
            /*<<camlinternalFormat.ml 758 25>>*/ _pA_=
            function(param)
             { /*<<camlinternalFormat.ml 762 28>>*/  /*<<camlinternalFormat.ml 762 28>>*/ caml_call1
               (de$13,0);
               /*<<camlinternalFormat.ml 762 28>>*/ return 0 /*<<camlinternalFormat.ml 762 43>>*/ },
            /*<<camlinternalFormat.ml 758 25>>*/ _pB_=
            function(param)
             { /*<<camlinternalFormat.ml 761 28>>*/  /*<<camlinternalFormat.ml 761 28>>*/ caml_call1
               (ed$13,0);
               /*<<camlinternalFormat.ml 761 28>>*/ return 0 /*<<camlinternalFormat.ml 761 43>>*/ },
            /*<<camlinternalFormat.ml 758 25>>*/ _pC_=
            function(param)
             { /*<<camlinternalFormat.ml 760 28>>*/  /*<<camlinternalFormat.ml 760 28>>*/ caml_call1
               (af$13,0);
               /*<<camlinternalFormat.ml 760 28>>*/ return 0 /*<<camlinternalFormat.ml 760 43>>*/ };
           /*<<camlinternalFormat.ml 758 25>>*/ return [0,
                  function(param)
                   { /*<<camlinternalFormat.ml 759 28>>*/  /*<<camlinternalFormat.ml 759 28>>*/ caml_call1
                     (fa$13,0);
                     /*<<camlinternalFormat.ml 759 28>>*/ return 0 /*<<camlinternalFormat.ml 759 43>>*/ },
                  _pC_,
                  _pB_,
                  _pA_]} /*<<camlinternalFormat.ml 775 66>>*/ }
    var Type_mismatch=[248,_ar_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     { /*<<camlinternalFormat.ml 977 17>>*/ if(typeof pad === "number")
        /*<<camlinternalFormat.ml 978 21>>*/ return [0,0,match];
      else
       { /*<<camlinternalFormat.ml 977 17>>*/ if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
         /*<<camlinternalFormat.ml 981 9>>*/ throw Type_mismatch} /*<<camlinternalFormat.ml 981 28>>*/ }
    function type_padprec(pad,prec,fmtty)
     { /*<<camlinternalFormat.ml 989 34>>*/  /*<<camlinternalFormat.ml 989 34>>*/ var
       match=
         /*<<camlinternalFormat.ml 989 34>>*/ type_padding(pad,fmtty);
       /*<<camlinternalFormat.ml 989 34>>*/ if(typeof prec === "number")
       {if(prec)
         {var _pe_=match[2];
          if(typeof _pe_ !== "number" && 2 === _pe_[0])
           {var rest=_pe_[1],pad$0=match[1];return [0,pad$0,1,rest]}
           /*<<camlinternalFormat.ml 996 35>>*/ throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
       /*<<camlinternalFormat.ml 989 34>>*/ var
       rest$1=match[2],
       pad$2=match[1],
       p=prec[1];
      return [0,pad$2,[0,p],rest$1] /*<<camlinternalFormat.ml 996 54>>*/ }
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     { /*<<camlinternalFormat.ml 1202 27>>*/ if(typeof sub_fmtty === "number")
        /*<<camlinternalFormat.ml 1276 33>>*/ return [0,
               0,
                /*<<camlinternalFormat.ml 1276 33>>*/ type_format_gen
                (fmt,match)];
      else
        /*<<camlinternalFormat.ml 1202 27>>*/ switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           { /*<<camlinternalFormat.ml 1205 6>>*/ var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1205 6>>*/ match$0=
               /*<<camlinternalFormat.ml 1205 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest,fmt,fmtty_rest),
              /*<<camlinternalFormat.ml 1205 6>>*/ fmt$0=match$0[2],
              /*<<camlinternalFormat.ml 1205 6>>*/ sub_fmtty_rest$0=match$0[1];
             /*<<camlinternalFormat.ml 1205 6>>*/ return [0,
                    [0,sub_fmtty_rest$0],
                    fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           { /*<<camlinternalFormat.ml 1209 6>>*/ var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1209 6>>*/ match$1=
               /*<<camlinternalFormat.ml 1209 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
              /*<<camlinternalFormat.ml 1209 6>>*/ fmt$1=match$1[2],
              /*<<camlinternalFormat.ml 1209 6>>*/ sub_fmtty_rest$2=match$1[1];
             /*<<camlinternalFormat.ml 1209 6>>*/ return [0,
                    [1,sub_fmtty_rest$2],
                    fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           { /*<<camlinternalFormat.ml 1213 6>>*/ var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1213 6>>*/ match$2=
               /*<<camlinternalFormat.ml 1213 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
              /*<<camlinternalFormat.ml 1213 6>>*/ fmt$2=match$2[2],
              /*<<camlinternalFormat.ml 1213 6>>*/ sub_fmtty_rest$4=match$2[1];
             /*<<camlinternalFormat.ml 1213 6>>*/ return [0,
                    [2,sub_fmtty_rest$4],
                    fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           { /*<<camlinternalFormat.ml 1217 6>>*/ var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1217 6>>*/ match$3=
               /*<<camlinternalFormat.ml 1217 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
              /*<<camlinternalFormat.ml 1217 6>>*/ fmt$3=match$3[2],
              /*<<camlinternalFormat.ml 1217 6>>*/ sub_fmtty_rest$6=match$3[1];
             /*<<camlinternalFormat.ml 1217 6>>*/ return [0,
                    [3,sub_fmtty_rest$6],
                    fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           { /*<<camlinternalFormat.ml 1221 6>>*/ var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1221 6>>*/ match$4=
               /*<<camlinternalFormat.ml 1221 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
              /*<<camlinternalFormat.ml 1221 6>>*/ fmt$4=match$4[2],
              /*<<camlinternalFormat.ml 1221 6>>*/ sub_fmtty_rest$8=match$4[1];
             /*<<camlinternalFormat.ml 1221 6>>*/ return [0,
                    [4,sub_fmtty_rest$8],
                    fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           { /*<<camlinternalFormat.ml 1225 6>>*/ var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1225 6>>*/ match$5=
               /*<<camlinternalFormat.ml 1225 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
              /*<<camlinternalFormat.ml 1225 6>>*/ fmt$5=match$5[2],
              /*<<camlinternalFormat.ml 1225 6>>*/ sub_fmtty_rest$10=
              match$5[1];
             /*<<camlinternalFormat.ml 1225 6>>*/ return [0,
                    [5,sub_fmtty_rest$10],
                    fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           { /*<<camlinternalFormat.ml 1229 6>>*/ var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1229 6>>*/ match$6=
               /*<<camlinternalFormat.ml 1229 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
              /*<<camlinternalFormat.ml 1229 6>>*/ fmt$6=match$6[2],
              /*<<camlinternalFormat.ml 1229 6>>*/ sub_fmtty_rest$12=
              match$6[1];
             /*<<camlinternalFormat.ml 1229 6>>*/ return [0,
                    [6,sub_fmtty_rest$12],
                    fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           { /*<<camlinternalFormat.ml 1233 6>>*/ var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1233 6>>*/ match$7=
               /*<<camlinternalFormat.ml 1233 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
              /*<<camlinternalFormat.ml 1233 6>>*/ fmt$7=match$7[2],
              /*<<camlinternalFormat.ml 1233 6>>*/ sub_fmtty_rest$14=
              match$7[1];
             /*<<camlinternalFormat.ml 1233 6>>*/ return [0,
                    [7,sub_fmtty_rest$14],
                    fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
             /*<<camlinternalFormat.ml 1254 7>>*/ if
             ( /*<<camlinternalFormat.ml 1254 7>>*/ caml_notequal
               ([0,sub2_fmtty$0],[0,sub2_fmtty]))
              /*<<camlinternalFormat.ml 1254 58>>*/ throw Type_mismatch;
             /*<<camlinternalFormat.ml 1256 6>>*/ var
              /*<<camlinternalFormat.ml 1256 6>>*/ match$8=
               /*<<camlinternalFormat.ml 1256 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
              /*<<camlinternalFormat.ml 1256 6>>*/ fmt$8=match$8[2],
              /*<<camlinternalFormat.ml 1256 6>>*/ sub_fmtty_rest$16=
              match$8[1];
             /*<<camlinternalFormat.ml 1256 6>>*/ return [0,
                    [8,sub2_fmtty,sub_fmtty_rest$16],
                    fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           { /*<<camlinternalFormat.ml 1261 53>>*/ var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1261 53>>*/ _pc_=
              [0, /*<<camlinternalFormat.ml 1261 53>>*/ erase_rel(sub1_fmtty)];
             /*<<camlinternalFormat.ml 1261 7>>*/ if
             ( /*<<camlinternalFormat.ml 1261 7>>*/ caml_notequal
               ([0,
                  /*<<camlinternalFormat.ml 1261 17>>*/ erase_rel
                  (sub1_fmtty$0)],
                _pc_))
              /*<<camlinternalFormat.ml 1262 9>>*/ throw Type_mismatch;
             /*<<camlinternalFormat.ml 1261 53>>*/  /*<<camlinternalFormat.ml 1263 53>>*/ var
             _pd_=
              [0,
                /*<<camlinternalFormat.ml 1263 53>>*/ erase_rel(sub2_fmtty$1)];
             /*<<camlinternalFormat.ml 1263 7>>*/ if
             ( /*<<camlinternalFormat.ml 1263 7>>*/ caml_notequal
               ([0,
                  /*<<camlinternalFormat.ml 1263 17>>*/ erase_rel
                  (sub2_fmtty$2)],
                _pd_))
              /*<<camlinternalFormat.ml 1264 9>>*/ throw Type_mismatch;
             /*<<camlinternalFormat.ml 1261 53>>*/ var
              /*<<camlinternalFormat.ml 1265 21>>*/ sub_fmtty$0=
               /*<<camlinternalFormat.ml 1265 21>>*/ trans
               ( /*<<camlinternalFormat.ml 1265 27>>*/ symm(sub1_fmtty),
                sub2_fmtty$1),
              /*<<camlinternalFormat.ml 1266 23>>*/ match$9=
               /*<<camlinternalFormat.ml 1266 23>>*/ fmtty_rel_det
               (sub_fmtty$0),
              /*<<camlinternalFormat.ml 1266 23>>*/ f4=match$9[4],
              /*<<camlinternalFormat.ml 1266 23>>*/ f2=match$9[2];
             /*<<camlinternalFormat.ml 1267 15>>*/  /*<<camlinternalFormat.ml 1267 15>>*/ caml_call1
             (f2,0);
             /*<<camlinternalFormat.ml 1268 15>>*/  /*<<camlinternalFormat.ml 1268 15>>*/ caml_call1
             (f4,0);
             /*<<camlinternalFormat.ml 1261 53>>*/ var
              /*<<camlinternalFormat.ml 1270 6>>*/ match$10=
               /*<<camlinternalFormat.ml 1270 6>>*/ type_ignored_format_substituti
               ( /*<<camlinternalFormat.ml 1270 39>>*/ erase_rel
                 (sub_fmtty_rest$17),
                fmt,
                fmtty_rest$8),
              /*<<camlinternalFormat.ml 1270 6>>*/ fmt$9=match$10[2],
              /*<<camlinternalFormat.ml 1270 6>>*/ sub_fmtty_rest$18=
              match$10[1];
             /*<<camlinternalFormat.ml 1273 36>>*/ return [0,
                    [9,
                     sub1_fmtty,
                     sub2_fmtty$1,
                      /*<<camlinternalFormat.ml 1273 36>>*/ symm
                      (sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           { /*<<camlinternalFormat.ml 1237 6>>*/ var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1237 6>>*/ match$11=
               /*<<camlinternalFormat.ml 1237 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
              /*<<camlinternalFormat.ml 1237 6>>*/ fmt$10=match$11[2],
              /*<<camlinternalFormat.ml 1237 6>>*/ sub_fmtty_rest$20=
              match$11[1];
             /*<<camlinternalFormat.ml 1237 6>>*/ return [0,
                    [10,sub_fmtty_rest$20],
                    fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           { /*<<camlinternalFormat.ml 1241 6>>*/ var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1241 6>>*/ match$12=
               /*<<camlinternalFormat.ml 1241 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
              /*<<camlinternalFormat.ml 1241 6>>*/ fmt$11=match$12[2],
              /*<<camlinternalFormat.ml 1241 6>>*/ sub_fmtty_rest$22=
              match$12[1];
             /*<<camlinternalFormat.ml 1241 6>>*/ return [0,
                    [11,sub_fmtty_rest$22],
                    fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           { /*<<camlinternalFormat.ml 1245 6>>*/ var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1245 6>>*/ match$13=
               /*<<camlinternalFormat.ml 1245 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
              /*<<camlinternalFormat.ml 1245 6>>*/ fmt$12=match$13[2],
              /*<<camlinternalFormat.ml 1245 6>>*/ sub_fmtty_rest$24=
              match$13[1];
             /*<<camlinternalFormat.ml 1245 6>>*/ return [0,
                    [13,sub_fmtty_rest$24],
                    fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           { /*<<camlinternalFormat.ml 1249 6>>*/ var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
              /*<<camlinternalFormat.ml 1249 6>>*/ match$14=
               /*<<camlinternalFormat.ml 1249 6>>*/ type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
              /*<<camlinternalFormat.ml 1249 6>>*/ fmt$13=match$14[2],
              /*<<camlinternalFormat.ml 1249 6>>*/ sub_fmtty_rest$26=
              match$14[1];
             /*<<camlinternalFormat.ml 1249 6>>*/ return [0,
                    [14,sub_fmtty_rest$26],
                    fmt$13]}
          break
         }
       /*<<camlinternalFormat.ml 1277 9>>*/ throw Type_mismatch /*<<camlinternalFormat.ml 1277 28>>*/ }
    function type_format_gen(fmt,fmtty)
     { /*<<camlinternalFormat.ml 1018 19>>*/ if(typeof fmt === "number")
        /*<<camlinternalFormat.ml 1133 33>>*/ return [0,0,fmtty];
      else
        /*<<camlinternalFormat.ml 1018 19>>*/ switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           { /*<<camlinternalFormat.ml 1020 39>>*/ var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
              /*<<camlinternalFormat.ml 1020 39>>*/ match=
               /*<<camlinternalFormat.ml 1020 39>>*/ type_format_gen
               (fmt_rest,fmtty_rest),
              /*<<camlinternalFormat.ml 1020 39>>*/ fmtty$0=match[2],
              /*<<camlinternalFormat.ml 1020 39>>*/ fmt$0=match[1];
             /*<<camlinternalFormat.ml 1020 39>>*/ return [0,
                    [0,fmt$0],
                    fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           { /*<<camlinternalFormat.ml 1023 39>>*/ var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
              /*<<camlinternalFormat.ml 1023 39>>*/ match$0=
               /*<<camlinternalFormat.ml 1023 39>>*/ type_format_gen
               (fmt_rest$0,fmtty_rest$0),
              /*<<camlinternalFormat.ml 1023 39>>*/ fmtty$1=match$0[2],
              /*<<camlinternalFormat.ml 1023 39>>*/ fmt$1=match$0[1];
             /*<<camlinternalFormat.ml 1023 39>>*/ return [0,
                    [1,fmt$1],
                    fmtty$1]}
          break;
         case 2:
           /*<<camlinternalFormat.ml 1026 10>>*/ var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
            /*<<camlinternalFormat.ml 1026 10>>*/ match$1=
             /*<<camlinternalFormat.ml 1026 10>>*/ type_padding(pad,fmtty),
            /*<<camlinternalFormat.ml 1026 10>>*/ _oX_=match$1[2],
            /*<<camlinternalFormat.ml 1026 10>>*/ _oW_=match$1[1];
           /*<<camlinternalFormat.ml 1026 10>>*/ if
           (typeof _oX_ !== "number" && 1 === _oX_[0])
           { /*<<camlinternalFormat.ml 1028 6>>*/ var
              /*<<camlinternalFormat.ml 1028 6>>*/ fmtty_rest$1=_oX_[1],
              /*<<camlinternalFormat.ml 1028 41>>*/ match$2=
               /*<<camlinternalFormat.ml 1028 41>>*/ type_format_gen
               (fmt_rest$1,fmtty_rest$1),
              /*<<camlinternalFormat.ml 1028 41>>*/ fmtty$2=match$2[2],
              /*<<camlinternalFormat.ml 1028 41>>*/ fmt$2=match$2[1];
             /*<<camlinternalFormat.ml 1028 41>>*/ return [0,
                    [2,_oW_,fmt$2],
                    fmtty$2]}
           /*<<camlinternalFormat.ml 1030 34>>*/ throw Type_mismatch;
         case 3:
           /*<<camlinternalFormat.ml 1033 10>>*/ var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
            /*<<camlinternalFormat.ml 1033 10>>*/ match$3=
             /*<<camlinternalFormat.ml 1033 10>>*/ type_padding(pad$0,fmtty),
            /*<<camlinternalFormat.ml 1033 10>>*/ _oZ_=match$3[2],
            /*<<camlinternalFormat.ml 1033 10>>*/ _oY_=match$3[1];
           /*<<camlinternalFormat.ml 1033 10>>*/ if
           (typeof _oZ_ !== "number" && 1 === _oZ_[0])
           { /*<<camlinternalFormat.ml 1035 6>>*/ var
              /*<<camlinternalFormat.ml 1035 6>>*/ fmtty_rest$2=_oZ_[1],
              /*<<camlinternalFormat.ml 1035 41>>*/ match$4=
               /*<<camlinternalFormat.ml 1035 41>>*/ type_format_gen
               (fmt_rest$2,fmtty_rest$2),
              /*<<camlinternalFormat.ml 1035 41>>*/ fmtty$3=match$4[2],
              /*<<camlinternalFormat.ml 1035 41>>*/ fmt$3=match$4[1];
             /*<<camlinternalFormat.ml 1035 41>>*/ return [0,
                    [3,_oY_,fmt$3],
                    fmtty$3]}
           /*<<camlinternalFormat.ml 1037 34>>*/ throw Type_mismatch;
         case 4:
           /*<<camlinternalFormat.ml 1040 10>>*/ var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
            /*<<camlinternalFormat.ml 1040 10>>*/ match$5=
             /*<<camlinternalFormat.ml 1040 10>>*/ type_padprec
             (pad$1,prec,fmtty),
            /*<<camlinternalFormat.ml 1040 10>>*/ _o1_=match$5[3],
            /*<<camlinternalFormat.ml 1040 10>>*/ _o0_=match$5[1];
           /*<<camlinternalFormat.ml 1040 10>>*/ if
           (typeof _o1_ !== "number" && 2 === _o1_[0])
           { /*<<camlinternalFormat.ml 1042 41>>*/ var
             fmtty_rest$3=_o1_[1],
             prec$0=match$5[2],
              /*<<camlinternalFormat.ml 1042 41>>*/ match$6=
               /*<<camlinternalFormat.ml 1042 41>>*/ type_format_gen
               (fmt_rest$3,fmtty_rest$3),
              /*<<camlinternalFormat.ml 1042 41>>*/ fmtty$4=match$6[2],
              /*<<camlinternalFormat.ml 1042 41>>*/ fmt$4=match$6[1];
             /*<<camlinternalFormat.ml 1042 41>>*/ return [0,
                    [4,iconv,_o0_,prec$0,fmt$4],
                    fmtty$4]}
           /*<<camlinternalFormat.ml 1044 37>>*/ throw Type_mismatch;
         case 5:
           /*<<camlinternalFormat.ml 1047 10>>*/ var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
            /*<<camlinternalFormat.ml 1047 10>>*/ match$7=
             /*<<camlinternalFormat.ml 1047 10>>*/ type_padprec
             (pad$2,prec$1,fmtty),
            /*<<camlinternalFormat.ml 1047 10>>*/ _o3_=match$7[3],
            /*<<camlinternalFormat.ml 1047 10>>*/ _o2_=match$7[1];
           /*<<camlinternalFormat.ml 1047 10>>*/ if
           (typeof _o3_ !== "number" && 3 === _o3_[0])
           { /*<<camlinternalFormat.ml 1049 41>>*/ var
             fmtty_rest$4=_o3_[1],
             prec$2=match$7[2],
              /*<<camlinternalFormat.ml 1049 41>>*/ match$8=
               /*<<camlinternalFormat.ml 1049 41>>*/ type_format_gen
               (fmt_rest$4,fmtty_rest$4),
              /*<<camlinternalFormat.ml 1049 41>>*/ fmtty$5=match$8[2],
              /*<<camlinternalFormat.ml 1049 41>>*/ fmt$5=match$8[1];
             /*<<camlinternalFormat.ml 1049 41>>*/ return [0,
                    [5,iconv$0,_o2_,prec$2,fmt$5],
                    fmtty$5]}
           /*<<camlinternalFormat.ml 1051 37>>*/ throw Type_mismatch;
         case 6:
           /*<<camlinternalFormat.ml 1054 10>>*/ var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
            /*<<camlinternalFormat.ml 1054 10>>*/ match$9=
             /*<<camlinternalFormat.ml 1054 10>>*/ type_padprec
             (pad$3,prec$3,fmtty),
            /*<<camlinternalFormat.ml 1054 10>>*/ _o5_=match$9[3],
            /*<<camlinternalFormat.ml 1054 10>>*/ _o4_=match$9[1];
           /*<<camlinternalFormat.ml 1054 10>>*/ if
           (typeof _o5_ !== "number" && 4 === _o5_[0])
           { /*<<camlinternalFormat.ml 1056 41>>*/ var
             fmtty_rest$5=_o5_[1],
             prec$4=match$9[2],
              /*<<camlinternalFormat.ml 1056 41>>*/ match$10=
               /*<<camlinternalFormat.ml 1056 41>>*/ type_format_gen
               (fmt_rest$5,fmtty_rest$5),
              /*<<camlinternalFormat.ml 1056 41>>*/ fmtty$6=match$10[2],
              /*<<camlinternalFormat.ml 1056 41>>*/ fmt$6=match$10[1];
             /*<<camlinternalFormat.ml 1056 41>>*/ return [0,
                    [6,iconv$1,_o4_,prec$4,fmt$6],
                    fmtty$6]}
           /*<<camlinternalFormat.ml 1058 37>>*/ throw Type_mismatch;
         case 7:
           /*<<camlinternalFormat.ml 1061 10>>*/ var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
            /*<<camlinternalFormat.ml 1061 10>>*/ match$11=
             /*<<camlinternalFormat.ml 1061 10>>*/ type_padprec
             (pad$4,prec$5,fmtty),
            /*<<camlinternalFormat.ml 1061 10>>*/ _o7_=match$11[3],
            /*<<camlinternalFormat.ml 1061 10>>*/ _o6_=match$11[1];
           /*<<camlinternalFormat.ml 1061 10>>*/ if
           (typeof _o7_ !== "number" && 5 === _o7_[0])
           { /*<<camlinternalFormat.ml 1063 41>>*/ var
             fmtty_rest$6=_o7_[1],
             prec$6=match$11[2],
              /*<<camlinternalFormat.ml 1063 41>>*/ match$12=
               /*<<camlinternalFormat.ml 1063 41>>*/ type_format_gen
               (fmt_rest$6,fmtty_rest$6),
              /*<<camlinternalFormat.ml 1063 41>>*/ fmtty$7=match$12[2],
              /*<<camlinternalFormat.ml 1063 41>>*/ fmt$7=match$12[1];
             /*<<camlinternalFormat.ml 1063 41>>*/ return [0,
                    [7,iconv$2,_o6_,prec$6,fmt$7],
                    fmtty$7]}
           /*<<camlinternalFormat.ml 1065 37>>*/ throw Type_mismatch;
         case 8:
           /*<<camlinternalFormat.ml 1068 10>>*/ var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
            /*<<camlinternalFormat.ml 1068 10>>*/ match$13=
             /*<<camlinternalFormat.ml 1068 10>>*/ type_padprec
             (pad$5,prec$7,fmtty),
            /*<<camlinternalFormat.ml 1068 10>>*/ _o9_=match$13[3],
            /*<<camlinternalFormat.ml 1068 10>>*/ _o8_=match$13[1];
           /*<<camlinternalFormat.ml 1068 10>>*/ if
           (typeof _o9_ !== "number" && 6 === _o9_[0])
           { /*<<camlinternalFormat.ml 1070 41>>*/ var
             fmtty_rest$7=_o9_[1],
             prec$8=match$13[2],
              /*<<camlinternalFormat.ml 1070 41>>*/ match$14=
               /*<<camlinternalFormat.ml 1070 41>>*/ type_format_gen
               (fmt_rest$7,fmtty_rest$7),
              /*<<camlinternalFormat.ml 1070 41>>*/ fmtty$8=match$14[2],
              /*<<camlinternalFormat.ml 1070 41>>*/ fmt$8=match$14[1];
             /*<<camlinternalFormat.ml 1070 41>>*/ return [0,
                    [8,fconv,_o8_,prec$8,fmt$8],
                    fmtty$8]}
           /*<<camlinternalFormat.ml 1072 37>>*/ throw Type_mismatch;
         case 9:
           /*<<camlinternalFormat.ml 1075 10>>*/ var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
            /*<<camlinternalFormat.ml 1075 10>>*/ match$15=
             /*<<camlinternalFormat.ml 1075 10>>*/ type_padding(pad$6,fmtty),
            /*<<camlinternalFormat.ml 1075 10>>*/ _o$_=match$15[2],
            /*<<camlinternalFormat.ml 1075 10>>*/ _o__=match$15[1];
           /*<<camlinternalFormat.ml 1075 10>>*/ if
           (typeof _o$_ !== "number" && 7 === _o$_[0])
           { /*<<camlinternalFormat.ml 1077 6>>*/ var
              /*<<camlinternalFormat.ml 1077 6>>*/ fmtty_rest$8=_o$_[1],
              /*<<camlinternalFormat.ml 1077 41>>*/ match$16=
               /*<<camlinternalFormat.ml 1077 41>>*/ type_format_gen
               (fmt_rest$8,fmtty_rest$8),
              /*<<camlinternalFormat.ml 1077 41>>*/ fmtty$9=match$16[2],
              /*<<camlinternalFormat.ml 1077 41>>*/ fmt$9=match$16[1];
             /*<<camlinternalFormat.ml 1077 41>>*/ return [0,
                    [9,_o__,fmt$9],
                    fmtty$9]}
           /*<<camlinternalFormat.ml 1079 34>>*/ throw Type_mismatch;
         case 10:
           /*<<camlinternalFormat.ml 1082 39>>*/ var
           fmt_rest$9=fmt[1],
            /*<<camlinternalFormat.ml 1082 39>>*/ match$17=
             /*<<camlinternalFormat.ml 1082 39>>*/ type_format_gen
             (fmt_rest$9,fmtty),
            /*<<camlinternalFormat.ml 1082 39>>*/ fmtty$10=match$17[2],
            /*<<camlinternalFormat.ml 1082 39>>*/ fmt$10=match$17[1];
           /*<<camlinternalFormat.ml 1082 39>>*/ return [0,
                  [10,fmt$10],
                  fmtty$10];
         case 11:
           /*<<camlinternalFormat.ml 1086 39>>*/ var
           fmt_rest$10=fmt[2],
           str=fmt[1],
            /*<<camlinternalFormat.ml 1086 39>>*/ match$18=
             /*<<camlinternalFormat.ml 1086 39>>*/ type_format_gen
             (fmt_rest$10,fmtty),
            /*<<camlinternalFormat.ml 1086 39>>*/ fmtty$11=match$18[2],
            /*<<camlinternalFormat.ml 1086 39>>*/ fmt$11=match$18[1];
           /*<<camlinternalFormat.ml 1086 39>>*/ return [0,
                  [11,str,fmt$11],
                  fmtty$11];
         case 12:
           /*<<camlinternalFormat.ml 1089 39>>*/ var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
            /*<<camlinternalFormat.ml 1089 39>>*/ match$19=
             /*<<camlinternalFormat.ml 1089 39>>*/ type_format_gen
             (fmt_rest$11,fmtty),
            /*<<camlinternalFormat.ml 1089 39>>*/ fmtty$12=match$19[2],
            /*<<camlinternalFormat.ml 1089 39>>*/ fmt$12=match$19[1];
           /*<<camlinternalFormat.ml 1089 39>>*/ return [0,
                  [12,chr,fmt$12],
                  fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
             /*<<camlinternalFormat.ml 1094 7>>*/ if
             ( /*<<camlinternalFormat.ml 1094 7>>*/ caml_notequal
               ([0,sub_fmtty$0],[0,sub_fmtty]))
              /*<<camlinternalFormat.ml 1094 56>>*/ throw Type_mismatch;
             /*<<camlinternalFormat.ml 1095 39>>*/ var
              /*<<camlinternalFormat.ml 1095 39>>*/ match$20=
               /*<<camlinternalFormat.ml 1095 39>>*/ type_format_gen
               (fmt_rest$12,fmtty_rest$9),
              /*<<camlinternalFormat.ml 1095 39>>*/ fmtty$13=match$20[2],
              /*<<camlinternalFormat.ml 1095 39>>*/ fmt$13=match$20[1];
             /*<<camlinternalFormat.ml 1095 39>>*/ return [0,
                    [13,pad_opt,sub_fmtty,fmt$13],
                    fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           { /*<<camlinternalFormat.ml 1099 52>>*/ var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
              /*<<camlinternalFormat.ml 1099 52>>*/ _pa_=
              [0, /*<<camlinternalFormat.ml 1099 52>>*/ erase_rel(sub_fmtty1)];
             /*<<camlinternalFormat.ml 1099 7>>*/ if
             ( /*<<camlinternalFormat.ml 1099 7>>*/ caml_notequal
               ([0,
                  /*<<camlinternalFormat.ml 1099 17>>*/ erase_rel(sub_fmtty$1)],
                _pa_))
              /*<<camlinternalFormat.ml 1100 6>>*/ throw Type_mismatch;
             /*<<camlinternalFormat.ml 1099 52>>*/ var
              /*<<camlinternalFormat.ml 1102 6>>*/ match$21=
               /*<<camlinternalFormat.ml 1102 6>>*/ type_format_gen
               (fmt_rest$13,
                 /*<<camlinternalFormat.ml 1102 31>>*/ erase_rel
                 (fmtty_rest$10)),
              /*<<camlinternalFormat.ml 1102 6>>*/ fmtty$14=match$21[2],
              /*<<camlinternalFormat.ml 1102 6>>*/ fmt$14=match$21[1];
             /*<<camlinternalFormat.ml 1102 6>>*/ return [0,
                    [14,pad_opt$0,sub_fmtty1,fmt$14],
                    fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           { /*<<camlinternalFormat.ml 1107 39>>*/ var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
              /*<<camlinternalFormat.ml 1107 39>>*/ match$22=
               /*<<camlinternalFormat.ml 1107 39>>*/ type_format_gen
               (fmt_rest$14,fmtty_rest$11),
              /*<<camlinternalFormat.ml 1107 39>>*/ fmtty$15=match$22[2],
              /*<<camlinternalFormat.ml 1107 39>>*/ fmt$15=match$22[1];
             /*<<camlinternalFormat.ml 1107 39>>*/ return [0,
                    [15,fmt$15],
                    fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           { /*<<camlinternalFormat.ml 1110 39>>*/ var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
              /*<<camlinternalFormat.ml 1110 39>>*/ match$23=
               /*<<camlinternalFormat.ml 1110 39>>*/ type_format_gen
               (fmt_rest$15,fmtty_rest$12),
              /*<<camlinternalFormat.ml 1110 39>>*/ fmtty$16=match$23[2],
              /*<<camlinternalFormat.ml 1110 39>>*/ fmt$16=match$23[1];
             /*<<camlinternalFormat.ml 1110 39>>*/ return [0,
                    [16,fmt$16],
                    fmtty$16]}
          break;
         case 17:
           /*<<camlinternalFormat.ml 1115 39>>*/ var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
            /*<<camlinternalFormat.ml 1115 39>>*/ match$24=
             /*<<camlinternalFormat.ml 1115 39>>*/ type_format_gen
             (fmt_rest$16,fmtty),
            /*<<camlinternalFormat.ml 1115 39>>*/ fmtty$17=match$24[2],
            /*<<camlinternalFormat.ml 1115 39>>*/ fmt$17=match$24[1];
           /*<<camlinternalFormat.ml 1115 39>>*/ return [0,
                  [17,formatting_lit,fmt$17],
                  fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
           /*<<camlinternalFormat.ml 1142 34>>*/ if(0 === formatting_gen[0])
           { /*<<camlinternalFormat.ml 1144 39>>*/ var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
              /*<<camlinternalFormat.ml 1144 39>>*/ match$29=
               /*<<camlinternalFormat.ml 1144 39>>*/ type_format_gen
               (fmt1,fmtty),
              /*<<camlinternalFormat.ml 1144 39>>*/ fmtty2=match$29[2],
              /*<<camlinternalFormat.ml 1144 39>>*/ fmt2=match$29[1],
              /*<<camlinternalFormat.ml 1145 39>>*/ match$30=
               /*<<camlinternalFormat.ml 1145 39>>*/ type_format_gen
               (fmt_rest$17,fmtty2),
              /*<<camlinternalFormat.ml 1145 39>>*/ fmtty3=match$30[2],
              /*<<camlinternalFormat.ml 1145 39>>*/ fmt3=match$30[1];
             /*<<camlinternalFormat.ml 1145 39>>*/ return [0,
                    [18,[0,[0,fmt2,str$0]],fmt3],
                    fmtty3]}
           /*<<camlinternalFormat.ml 1148 39>>*/ var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
            /*<<camlinternalFormat.ml 1148 39>>*/ match$32=
             /*<<camlinternalFormat.ml 1148 39>>*/ type_format_gen
             (fmt1$0,fmtty),
            /*<<camlinternalFormat.ml 1148 39>>*/ fmtty2$0=match$32[2],
            /*<<camlinternalFormat.ml 1148 39>>*/ fmt2$0=match$32[1],
            /*<<camlinternalFormat.ml 1149 39>>*/ match$33=
             /*<<camlinternalFormat.ml 1149 39>>*/ type_format_gen
             (fmt_rest$17,fmtty2$0),
            /*<<camlinternalFormat.ml 1149 39>>*/ fmtty3$0=match$33[2],
            /*<<camlinternalFormat.ml 1149 39>>*/ fmt3$0=match$33[1];
           /*<<camlinternalFormat.ml 1149 39>>*/ return [0,
                  [18,[1,[0,fmt2$0,str$1]],fmt3$0],
                  fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           { /*<<camlinternalFormat.ml 1122 39>>*/ var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
              /*<<camlinternalFormat.ml 1122 39>>*/ match$25=
               /*<<camlinternalFormat.ml 1122 39>>*/ type_format_gen
               (fmt_rest$18,fmtty_rest$13),
              /*<<camlinternalFormat.ml 1122 39>>*/ fmtty$18=match$25[2],
              /*<<camlinternalFormat.ml 1122 39>>*/ fmt$18=match$25[1];
             /*<<camlinternalFormat.ml 1122 39>>*/ return [0,
                    [19,fmt$18],
                    fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           { /*<<camlinternalFormat.ml 1125 39>>*/ var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
              /*<<camlinternalFormat.ml 1125 39>>*/ match$26=
               /*<<camlinternalFormat.ml 1125 39>>*/ type_format_gen
               (fmt_rest$19,fmtty_rest$14),
              /*<<camlinternalFormat.ml 1125 39>>*/ fmtty$19=match$26[2],
              /*<<camlinternalFormat.ml 1125 39>>*/ fmt$19=match$26[1];
             /*<<camlinternalFormat.ml 1125 39>>*/ return [0,
                    [20,width_opt,char_set,fmt$19],
                    fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           { /*<<camlinternalFormat.ml 1128 39>>*/ var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
              /*<<camlinternalFormat.ml 1128 39>>*/ match$27=
               /*<<camlinternalFormat.ml 1128 39>>*/ type_format_gen
               (fmt_rest$20,fmtty_rest$15),
              /*<<camlinternalFormat.ml 1128 39>>*/ fmtty$20=match$27[2],
              /*<<camlinternalFormat.ml 1128 39>>*/ fmt$20=match$27[1];
             /*<<camlinternalFormat.ml 1128 39>>*/ return [0,
                    [21,counter,fmt$20],
                    fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
           /*<<camlinternalFormat.ml 1158 21>>*/ if(typeof ign === "number")
            /*<<camlinternalFormat.ml 1158 21>>*/ switch(ign)
            {case 0:
               /*<<camlinternalFormat.ml 1159 42>>*/ return  /*<<camlinternalFormat.ml 1159 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 1:
               /*<<camlinternalFormat.ml 1160 42>>*/ return  /*<<camlinternalFormat.ml 1160 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 2:
               /*<<camlinternalFormat.ml 1180 22>>*/ if
               (typeof fmtty !== "number" && 14 === fmtty[0])
               { /*<<camlinternalFormat.ml 1183 6>>*/ var
                  /*<<camlinternalFormat.ml 1183 6>>*/ fmtty_rest$16=fmtty[1],
                  /*<<camlinternalFormat.ml 1183 41>>*/ match$34=
                   /*<<camlinternalFormat.ml 1183 41>>*/ type_format_gen
                   (rest,fmtty_rest$16),
                  /*<<camlinternalFormat.ml 1183 41>>*/ fmtty$21=match$34[2],
                  /*<<camlinternalFormat.ml 1183 41>>*/ fmt$21=match$34[1];
                 /*<<camlinternalFormat.ml 1183 41>>*/ return [0,
                        [23,2,fmt$21],
                        fmtty$21]}
               /*<<camlinternalFormat.ml 1185 11>>*/ throw Type_mismatch;
             default:
               /*<<camlinternalFormat.ml 1171 42>>*/ return  /*<<camlinternalFormat.ml 1171 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty)}
          else
            /*<<camlinternalFormat.ml 1158 21>>*/ switch(ign[0])
            {case 0:
               /*<<camlinternalFormat.ml 1161 42>>*/ return  /*<<camlinternalFormat.ml 1161 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 1:
               /*<<camlinternalFormat.ml 1162 42>>*/ return  /*<<camlinternalFormat.ml 1162 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 2:
               /*<<camlinternalFormat.ml 1163 42>>*/ return  /*<<camlinternalFormat.ml 1163 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 3:
               /*<<camlinternalFormat.ml 1164 42>>*/ return  /*<<camlinternalFormat.ml 1164 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 4:
               /*<<camlinternalFormat.ml 1165 42>>*/ return  /*<<camlinternalFormat.ml 1165 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 5:
               /*<<camlinternalFormat.ml 1166 42>>*/ return  /*<<camlinternalFormat.ml 1166 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 6:
               /*<<camlinternalFormat.ml 1167 42>>*/ return  /*<<camlinternalFormat.ml 1167 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 7:
               /*<<camlinternalFormat.ml 1168 42>>*/ return  /*<<camlinternalFormat.ml 1168 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
               /*<<camlinternalFormat.ml 1176 6>>*/ var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
                /*<<camlinternalFormat.ml 1176 6>>*/ _pb_=
                 /*<<camlinternalFormat.ml 1176 6>>*/ type_ignored_format_substituti
                 (sub_fmtty$3,rest,fmtty),
                /*<<camlinternalFormat.ml 1176 6>>*/ match$35=_pb_[2],
                /*<<camlinternalFormat.ml 1176 6>>*/ fmtty$22=match$35[2],
                /*<<camlinternalFormat.ml 1176 6>>*/ fmt$22=match$35[1],
                /*<<camlinternalFormat.ml 1176 6>>*/ sub_fmtty$4=_pb_[1];
               /*<<camlinternalFormat.ml 1176 6>>*/ return [0,
                      [23,[9,pad_opt$2,sub_fmtty$4],fmt$22],
                      fmtty$22];
             case 10:
               /*<<camlinternalFormat.ml 1169 42>>*/ return  /*<<camlinternalFormat.ml 1169 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty);
             default:
               /*<<camlinternalFormat.ml 1170 42>>*/ return  /*<<camlinternalFormat.ml 1170 42>>*/ type_ignored_param_one
                      (ign,rest,fmtty)}
         }
       /*<<camlinternalFormat.ml 1135 9>>*/ throw Type_mismatch /*<<camlinternalFormat.ml 1135 28>>*/ }
    function type_ignored_param_one(ign,fmt,fmtty)
     { /*<<camlinternalFormat.ml 1194 37>>*/ var
        /*<<camlinternalFormat.ml 1194 37>>*/ match=
         /*<<camlinternalFormat.ml 1194 37>>*/ type_format_gen(fmt,fmtty),
        /*<<camlinternalFormat.ml 1194 37>>*/ fmtty$0=match[2],
        /*<<camlinternalFormat.ml 1194 37>>*/ fmt$0=match[1];
       /*<<camlinternalFormat.ml 1194 37>>*/ return [0,[23,ign,fmt$0],fmtty$0] /*<<camlinternalFormat.ml 1195 51>>*/ }
    function fix_padding(padty,width,str)
     { /*<<camlinternalFormat.ml 1319 2>>*/ var
        /*<<camlinternalFormat.ml 1319 2>>*/ len=
         /*<<camlinternalFormat.ml 1319 2>>*/ caml_ml_string_length(str),
        /*<<camlinternalFormat.ml 1319 2>>*/ padty$0=0 <= width?padty:0,
        /*<<camlinternalFormat.ml 1321 4>>*/ width$0=
         /*<<camlinternalFormat.ml 1321 4>>*/ abs(width);
       /*<<camlinternalFormat.ml 1321 4>>*/ if(width$0 <= len)
        /*<<camlinternalFormat.ml 1332 23>>*/ return str;
       /*<<camlinternalFormat.ml 1319 2>>*/ var
        /*<<camlinternalFormat.ml 1333 4>>*/ _oV_=2 === padty$0?48:32,
        /*<<camlinternalFormat.ml 1333 14>>*/ res=
         /*<<camlinternalFormat.ml 1333 14>>*/ make(width$0,_oV_);
       /*<<camlinternalFormat.ml 1333 14>>*/ switch(padty$0)
       {case 0:
          /*<<camlinternalFormat.ml 1335 15>>*/  /*<<camlinternalFormat.ml 1335 15>>*/ blit$0
          (str,0,res,0,len);
         break;
        case 1:
          /*<<camlinternalFormat.ml 1336 15>>*/  /*<<camlinternalFormat.ml 1336 15>>*/ blit$0
          (str,0,res,width$0 - len | 0,len);
         break;
        default:
         var switch$0=0;
          /*<<camlinternalFormat.ml 1337 17>>*/ if(0 < len)
          {var switch$1=0;
            /*<<camlinternalFormat.ml 1337 63>>*/ if
            (43
             !==
              /*<<camlinternalFormat.ml 1337 29>>*/ caml_string_get(str,0)
             &&
             45
             !==
              /*<<camlinternalFormat.ml 1337 46>>*/ caml_string_get(str,0)
             &&
             32
             !==
              /*<<camlinternalFormat.ml 1337 63>>*/ caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            { /*<<camlinternalFormat.ml 1338 6>>*/  /*<<camlinternalFormat.ml 1338 6>>*/ caml_bytes_set
              (res,
               0,
                /*<<camlinternalFormat.ml 1338 22>>*/ caml_string_get(str,0));
              /*<<camlinternalFormat.ml 1339 6>>*/  /*<<camlinternalFormat.ml 1339 6>>*/ blit$0
              (str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
          /*<<camlinternalFormatBasics.ml 528 8>>*/ if(switch$0)
          {var switch$2=0;
            /*<<camlinternalFormat.ml 1340 28>>*/ if
            (1
             <
             len
             &&
             48
             ===
              /*<<camlinternalFormat.ml 1340 28>>*/ caml_string_get(str,0))
            {var switch$3=0;
              /*<<camlinternalFormat.ml 1340 63>>*/ if
              (120
               !==
                /*<<camlinternalFormat.ml 1340 46>>*/ caml_string_get(str,1)
               &&
               88
               !==
                /*<<camlinternalFormat.ml 1340 63>>*/ caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              { /*<<camlinternalFormat.ml 1341 6>>*/  /*<<camlinternalFormat.ml 1341 6>>*/ caml_bytes_set
                (res,
                 1,
                  /*<<camlinternalFormat.ml 1341 22>>*/ caml_string_get(str,1));
                /*<<camlinternalFormat.ml 1342 6>>*/  /*<<camlinternalFormat.ml 1342 6>>*/ blit$0
                (str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)
             /*<<camlinternalFormat.ml 1344 6>>*/  /*<<camlinternalFormat.ml 1344 6>>*/ blit$0
             (str,0,res,width$0 - len | 0,len)}}
       /*<<camlinternalFormat.ml 1346 4>>*/ return  /*<<camlinternalFormat.ml 1346 4>>*/ caml_string_of_bytes
              (res) /*<<camlinternalFormat.ml 1346 30>>*/ }
    function fix_int_precision(prec,str)
     { /*<<camlinternalFormat.ml 1350 13>>*/ var
        /*<<camlinternalFormat.ml 1350 13>>*/ prec$0=
         /*<<camlinternalFormat.ml 1350 13>>*/ abs(prec),
        /*<<camlinternalFormat.ml 1350 13>>*/ len=
         /*<<camlinternalFormat.ml 1350 13>>*/ caml_ml_string_length(str),
        /*<<camlinternalFormat.ml 1352 8>>*/ c=
         /*<<camlinternalFormat.ml 1352 8>>*/ caml_string_get(str,0),
       switch$0=0;
       /*<<camlinternalFormat.ml 1352 8>>*/ if(58 <= c)
       {if(71 <= c)
         {if(! (5 < (c - 97 | 0) >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0) && 1 < len)
               {var switch$2=0;
                 /*<<camlinternalFormat.ml 1358 60>>*/ if
                 (120
                  ===
                   /*<<camlinternalFormat.ml 1358 43>>*/ caml_string_get
                   (str,1)
                  ||
                  88
                  ===
                   /*<<camlinternalFormat.ml 1358 60>>*/ caml_string_get
                   (str,1))
                 switch$2 = 1;
                if(switch$2)
                 { /*<<camlinternalFormat.ml 1359 14>>*/  /*<<camlinternalFormat.ml 1359 14>>*/ var
                   res$1=
                     /*<<camlinternalFormat.ml 1359 14>>*/ make
                     (prec$0 + 2 | 0,48);
                   /*<<camlinternalFormat.ml 1360 4>>*/  /*<<camlinternalFormat.ml 1360 4>>*/ caml_bytes_set
                   (res$1,
                    1,
                     /*<<camlinternalFormat.ml 1360 20>>*/ caml_string_get
                     (str,1));
                   /*<<camlinternalFormat.ml 1361 4>>*/  /*<<camlinternalFormat.ml 1361 4>>*/ blit$0
                   (str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   /*<<camlinternalFormat.ml 1361 4>>*/ return  /*<<camlinternalFormat.ml 1361 4>>*/ caml_string_of_bytes
                          (res$1)}}
              switch$0 = 1;
              switch$1 = 1;
              break;
             case 0:
             case 2:break;
             case 1:
             case 3:
             case 4:switch$1 = 1;break;
             default:switch$0 = 1;switch$1 = 1}}
         else
          switch$1 = 1;
         /*<<camlinternalFormat.ml 1353 32>>*/ if
         (! switch$1 && len < (prec$0 + 1 | 0))
         { /*<<camlinternalFormat.ml 1354 14>>*/  /*<<camlinternalFormat.ml 1354 14>>*/ var
           res$0=
             /*<<camlinternalFormat.ml 1354 14>>*/ make(prec$0 + 1 | 0,48);
           /*<<camlinternalFormat.ml 1355 4>>*/  /*<<camlinternalFormat.ml 1355 4>>*/ caml_bytes_set
           (res$0,0,c);
           /*<<camlinternalFormat.ml 1356 4>>*/  /*<<camlinternalFormat.ml 1356 4>>*/ blit$0
           (str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
           /*<<camlinternalFormat.ml 1356 4>>*/ return  /*<<camlinternalFormat.ml 1356 4>>*/ caml_string_of_bytes
                  (res$0)}}
       /*<<camlinternalFormat.ml 1363 46>>*/ if(switch$0 && len < prec$0)
       { /*<<camlinternalFormat.ml 1364 14>>*/  /*<<camlinternalFormat.ml 1364 14>>*/ var
         res=
           /*<<camlinternalFormat.ml 1364 14>>*/ make(prec$0,48);
         /*<<camlinternalFormat.ml 1365 4>>*/  /*<<camlinternalFormat.ml 1365 4>>*/ blit$0
         (str,0,res,prec$0 - len | 0,len);
         /*<<camlinternalFormat.ml 1365 4>>*/ return  /*<<camlinternalFormat.ml 1365 4>>*/ caml_string_of_bytes
                (res)}
       /*<<camlinternalFormat.ml 1368 4>>*/ return str /*<<camlinternalFormat.ml 1368 7>>*/ }
    function string_to_caml_string(str)
     { /*<<string.ml 104 2>>*/ var
        /*<<string.ml 104 2>>*/ n$0=
         /*<<string.ml 104 2>>*/ caml_ml_string_length(str),
       i$1=0;
       /*<<string.ml 105 4>>*/ for(;;)
       { /*<<string.ml 105 4>>*/ if(n$0 <= i$1)
         var str$0=str;
        else
         { /*<<string.ml 106 6>>*/ var
            /*<<string.ml 106 6>>*/ match$0=
             /*<<string.ml 106 6>>*/ caml_string_unsafe_get(str,i$1),
            /*<<string.ml 106 6>>*/ _oT_=match$0 - 32 | 0,
           switch$0=0;
           /*<<string.ml 106 6>>*/ if(59 < _oT_ >>> 0)
           {if(33 < (_oT_ - 61 | 0) >>> 0)switch$0 = 1}
          else
           if(2 === _oT_)switch$0 = 1;
           /*<<camlinternalFormatBasics.ml 528 8>>*/ if(! switch$0)
           { /*<<string.ml 109 13>>*/ var
              /*<<string.ml 109 13>>*/ i$2=i$1 + 1 | 0,
             i$1=i$2;
            continue}
           /*<<string.ml 106 6>>*/ var
            /*<<string.ml 108 25>>*/ s$0=
             /*<<string.ml 108 25>>*/ caml_bytes_of_string(str),
            /*<<bytes.ml 171 2>>*/ n=[0,0],
            /*<<bytes.ml 171 2>>*/ _oM_=
             /*<<bytes.ml 171 2>>*/ caml_ml_bytes_length(s$0)
            -
            1
            |
            0,
            /*<<bytes.ml 171 2>>*/ _oL_=0;
           /*<<bytes.ml 171 2>>*/ if(! (_oM_ < 0))
           {var i$0=_oL_;
             /*<<bytes.ml 173 4>>*/ for(;;)
             { /*<<bytes.ml 173 4>>*/ var
                /*<<bytes.ml 173 4>>*/ match=
                 /*<<bytes.ml 173 4>>*/ caml_bytes_unsafe_get(s$0,i$0),
               switch$1=0;
               /*<<bytes.ml 173 4>>*/ if(32 <= match)
               {var _oQ_=match - 34 | 0,switch$2=0;
                if(58 < _oQ_ >>> 0)
                 {if(93 <= _oQ_)switch$2 = 1}
                else
                 if(56 < (_oQ_ - 1 | 0) >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _oR_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _oR_=4;break;case 1:var _oR_=2;break}
              n[1] = n[1] + _oR_ | 0;
               /*<<bytes.ml 173 4>>*/ var _oS_=i$0 + 1 | 0;
              if(_oM_ !== i$0){var i$0=_oS_;continue}
              break}}
           /*<<bytes.ml 179 2>>*/ if
           (n[1] ===  /*<<bytes.ml 179 2>>*/ caml_ml_bytes_length(s$0))
           var _oU_= /*<<bytes.ml 179 24>>*/ copy(s$0);
          else
           { /*<<bytes.ml 180 13>>*/  /*<<bytes.ml 180 13>>*/ var
             s=
               /*<<bytes.ml 180 13>>*/ caml_create_bytes(n[1]);
             /*<<bytes.ml 180 13>>*/ n[1] = 0;
             /*<<bytes.ml 180 13>>*/ var
              /*<<bytes.ml 180 13>>*/ _oO_=
               /*<<bytes.ml 180 13>>*/ caml_ml_bytes_length(s$0)
              -
              1
              |
              0,
              /*<<bytes.ml 180 13>>*/ _oN_=0;
             /*<<bytes.ml 180 13>>*/ if(! (_oO_ < 0))
             {var i=_oN_;
               /*<<bytes.ml 183 6>>*/ for(;;)
               { /*<<bytes.ml 183 6>>*/ var
                  /*<<bytes.ml 183 6>>*/ c=
                   /*<<bytes.ml 183 6>>*/ caml_bytes_unsafe_get(s$0,i),
                 switch$3=0;
                 /*<<bytes.ml 183 6>>*/ if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                       /*<<bytes.ml 193 10>>*/  /*<<bytes.ml 193 10>>*/ caml_bytes_unsafe_set
                       (s,n[1],92);
                       /*<<bytes.ml 193 10>>*/ n[1]++;
                       /*<<bytes.ml 193 10>>*/  /*<<bytes.ml 193 10>>*/ caml_bytes_unsafe_set
                       (s,n[1],98);
                      break;
                     case 9:
                       /*<<bytes.ml 189 10>>*/  /*<<bytes.ml 189 10>>*/ caml_bytes_unsafe_set
                       (s,n[1],92);
                       /*<<bytes.ml 189 10>>*/ n[1]++;
                       /*<<bytes.ml 189 10>>*/  /*<<bytes.ml 189 10>>*/ caml_bytes_unsafe_set
                       (s,n[1],116);
                      break;
                     case 10:
                       /*<<bytes.ml 187 10>>*/  /*<<bytes.ml 187 10>>*/ caml_bytes_unsafe_set
                       (s,n[1],92);
                       /*<<bytes.ml 187 10>>*/ n[1]++;
                       /*<<bytes.ml 187 10>>*/  /*<<bytes.ml 187 10>>*/ caml_bytes_unsafe_set
                       (s,n[1],110);
                      break;
                     case 13:
                       /*<<bytes.ml 191 10>>*/  /*<<bytes.ml 191 10>>*/ caml_bytes_unsafe_set
                       (s,n[1],92);
                       /*<<bytes.ml 191 10>>*/ n[1]++;
                       /*<<bytes.ml 191 10>>*/  /*<<bytes.ml 191 10>>*/ caml_bytes_unsafe_set
                       (s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                    /*<<bytes.ml 196 10>>*/  /*<<bytes.ml 196 10>>*/ caml_bytes_unsafe_set
                    (s,n[1],92);
                    /*<<bytes.ml 196 10>>*/ n[1]++;
                    /*<<bytes.ml 196 10>>*/  /*<<bytes.ml 196 10>>*/ caml_bytes_unsafe_set
                    (s,n[1],48 + (c / 100 | 0) | 0);
                    /*<<bytes.ml 196 10>>*/ n[1]++;
                    /*<<bytes.ml 196 10>>*/  /*<<bytes.ml 196 10>>*/ caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                    /*<<bytes.ml 196 10>>*/ n[1]++;
                    /*<<bytes.ml 196 10>>*/  /*<<bytes.ml 196 10>>*/ caml_bytes_unsafe_set
                    (s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                    /*<<bytes.ml 185 10>>*/  /*<<bytes.ml 185 10>>*/ caml_bytes_unsafe_set
                    (s,n[1],92);
                    /*<<bytes.ml 185 10>>*/ n[1]++;
                    /*<<bytes.ml 185 10>>*/  /*<<bytes.ml 185 10>>*/ caml_bytes_unsafe_set
                    (s,n[1],c);
                   break;
                  case 3:
                    /*<<bytes.ml 194 29>>*/  /*<<bytes.ml 194 29>>*/ caml_bytes_unsafe_set
                    (s,n[1],c);
                   break
                  }
                 /*<<bytes.ml 205 6>>*/ n[1]++;
                 /*<<bytes.ml 183 6>>*/  /*<<bytes.ml 205 6>>*/ var
                 _oP_=
                  i + 1 | 0;
                if(_oO_ !== i){var i=_oP_;continue}
                break}}
             /*<<bytes.ml 180 13>>*/ var _oU_=s}
           /*<<string.ml 106 6>>*/ var str$0=caml_string_of_bytes(_oU_)}
         /*<<camlinternalFormat.ml 1374 12>>*/ var
         l=caml_ml_string_length(str$0),
          /*<<camlinternalFormat.ml 1374 12>>*/ res=
           /*<<camlinternalFormat.ml 1374 12>>*/ make(l + 2 | 0,34);
         /*<<camlinternalFormat.ml 1375 2>>*/  /*<<camlinternalFormat.ml 1375 2>>*/ caml_blit_string
         (str$0,0,res,1,l);
         /*<<camlinternalFormat.ml 1375 2>>*/ return  /*<<camlinternalFormat.ml 1375 2>>*/ caml_string_of_bytes
                (res)} /*<<camlinternalFormat.ml 1376 28>>*/ }
    function format_of_fconv(fconv,prec)
     { /*<<camlinternalFormat.ml 1414 15>>*/  /*<<camlinternalFormat.ml 1414 15>>*/ var
       prec$0=
         /*<<camlinternalFormat.ml 1414 15>>*/ abs(prec);
       /*<<camlinternalFormat.ml 296 36>>*/ if(opt)
        /*<<camlinternalFormat.ml 296 23>>*/ var
         /*<<camlinternalFormat.ml 296 23>>*/ sth=opt[1],
        cF=sth;
      else
       var cF=70;
       /*<<camlinternalFormat.ml 296 36>>*/ switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=cF;break;
        case 6:var symb=104;break;
        case 7:var symb=72;break;
        default:var symb=70}
       /*<<camlinternalFormat.ml 1414 15>>*/  /*<<camlinternalFormat.ml 1416 14>>*/ var
       buf=
         /*<<camlinternalFormat.ml 1416 14>>*/ buffer_create(16);
       /*<<camlinternalFormat.ml 1417 4>>*/  /*<<camlinternalFormat.ml 1417 4>>*/ buffer_add_char
       (buf,37);
       /*<<camlinternalFormat.ml 445 2>>*/ switch(fconv[1])
       {case 0:break;
        case 1:
          /*<<camlinternalFormat.ml 446 20>>*/  /*<<camlinternalFormat.ml 446 20>>*/ buffer_add_char
          (buf,43);
         break;
        default:
          /*<<camlinternalFormat.ml 447 20>>*/  /*<<camlinternalFormat.ml 447 20>>*/ buffer_add_char
          (buf,32)}
       /*<<camlinternalFormat.ml 449 2>>*/ if(8 <= fconv[2])
        /*<<camlinternalFormat.ml 450 16>>*/  /*<<camlinternalFormat.ml 450 16>>*/ buffer_add_char
        (buf,35);
       /*<<camlinternalFormat.ml 1419 4>>*/  /*<<camlinternalFormat.ml 1419 4>>*/ buffer_add_char
       (buf,46);
       /*<<camlinternalFormat.ml 1420 4>>*/  /*<<camlinternalFormat.ml 1420 4>>*/ buffer_add_string
       (buf,
         /*<<camlinternalFormat.ml 1420 26>>*/ caml_string_of_jsbytes
         ("" + prec$0));
       /*<<camlinternalFormat.ml 1421 4>>*/  /*<<camlinternalFormat.ml 1421 4>>*/ buffer_add_char
       (buf,symb);
       /*<<camlinternalFormat.ml 1421 4>>*/ return  /*<<camlinternalFormat.ml 1421 4>>*/ buffer_contents
              (buf) /*<<camlinternalFormat.ml 1422 23>>*/ }
    function transform_int_alt(iconv,s)
     { /*<<camlinternalFormat.ml 1425 2>>*/ if(13 <= iconv)
       { /*<<camlinternalFormat.ml 1427 4>>*/ var
          /*<<camlinternalFormat.ml 1427 4>>*/ n=[0,0],
          /*<<camlinternalFormat.ml 1427 4>>*/ _oG_=
           /*<<camlinternalFormat.ml 1427 4>>*/ caml_ml_string_length(s)
          -
          1
          |
          0,
          /*<<camlinternalFormat.ml 1427 4>>*/ _oF_=0;
         /*<<camlinternalFormat.ml 1427 4>>*/ if(! (_oG_ < 0))
         {var i$0=_oF_;
           /*<<camlinternalFormat.ml 1430 8>>*/ for(;;)
           { /*<<camlinternalFormat.ml 1430 8>>*/ var
              /*<<camlinternalFormat.ml 1430 8>>*/ match=
               /*<<camlinternalFormat.ml 1430 8>>*/ caml_string_unsafe_get
               (s,i$0),
              /*<<camlinternalFormat.ml 1430 8>>*/ switcher$0=match - 48 | 0;
             /*<<camlinternalFormat.ml 1430 8>>*/ if(! (9 < switcher$0 >>> 0))
              /*<<camlinternalFormat.ml 1431 22>>*/ n[1]++;
             /*<<camlinternalFormat.ml 1430 8>>*/ var _oK_=i$0 + 1 | 0;
            if(_oG_ !== i$0){var i$0=_oK_;continue}
            break}}
         /*<<camlinternalFormat.ml 1427 4>>*/ var
          /*<<camlinternalFormat.ml 1434 6>>*/ digits=n[1],
          /*<<camlinternalFormat.ml 1436 14>>*/ buf=
           /*<<camlinternalFormat.ml 1436 14>>*/ caml_create_bytes
           ( /*<<camlinternalFormat.ml 1434 6>>*/ caml_ml_string_length(s)
            +
            ((digits - 1 | 0) / 3 | 0)
            |
            0),
          /*<<camlinternalFormat.ml 1436 14>>*/ pos=[0,0],
          /*<<camlinternalFormat.ml 1436 14>>*/ put=
          function(c)
           { /*<<camlinternalFormat.ml 1438 16>>*/  /*<<camlinternalFormat.ml 1438 16>>*/ caml_bytes_set
             (buf,pos[1],c);
             /*<<camlinternalFormat.ml 1438 16>>*/ pos[1]++;
             /*<<camlinternalFormat.ml 1438 16>>*/ return 0 /*<<camlinternalFormat.ml 1438 46>>*/ },
          /*<<camlinternalFormat.ml 1436 14>>*/ left=
          [0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
          /*<<camlinternalFormat.ml 1436 14>>*/ _oI_=
           /*<<camlinternalFormat.ml 1436 14>>*/ caml_ml_string_length(s)
          -
          1
          |
          0,
          /*<<camlinternalFormat.ml 1436 14>>*/ _oH_=0;
         /*<<camlinternalFormat.ml 1436 14>>*/ if(! (_oI_ < 0))
         {var i=_oH_;
           /*<<camlinternalFormat.ml 1441 6>>*/ for(;;)
           { /*<<camlinternalFormat.ml 1441 6>>*/ var
              /*<<camlinternalFormat.ml 1441 6>>*/ c=
               /*<<camlinternalFormat.ml 1441 6>>*/ caml_string_unsafe_get
               (s,i),
              /*<<camlinternalFormat.ml 1441 6>>*/ switcher=c - 48 | 0;
             /*<<camlinternalFormat.ml 1441 6>>*/ if(9 < switcher >>> 0)
              /*<<camlinternalFormat.ml 1444 13>>*/  /*<<camlinternalFormat.ml 1444 13>>*/ put
              (c);
            else
             { /*<<camlinternalFormat.ml 1443 10>>*/ if(0 === left[1])
               { /*<<camlinternalFormat.ml 1443 29>>*/  /*<<camlinternalFormat.ml 1443 29>>*/ put
                 (95);
                 /*<<camlinternalFormat.ml 1443 29>>*/ left[1] = 3}
               /*<<camlinternalFormat.ml 1443 50>>*/ left[1] += -1;
               /*<<camlinternalFormat.ml 1443 61>>*/  /*<<camlinternalFormat.ml 1443 61>>*/ put
               (c)}
             /*<<camlinternalFormat.ml 1441 6>>*/  /*<<camlinternalFormat.ml 1443 66>>*/ var
             _oJ_=
              i + 1 | 0;
            if(_oI_ !== i){var i=_oJ_;continue}
            break}}
         /*<<camlinternalFormat.ml 1446 4>>*/ return  /*<<camlinternalFormat.ml 1446 4>>*/ caml_string_of_bytes
                (buf)}
       /*<<camlinternalFormat.ml 1447 9>>*/ return s /*<<camlinternalFormat.ml 1447 10>>*/ }
    function convert_int(iconv,n)
     { /*<<camlinternalFormat.ml 1380 22>>*/ switch(iconv)
       {case 1:var _oE_=_at_;break;
        case 2:var _oE_=_au_;break;
        case 4:var _oE_=_aw_;break;
        case 5:var _oE_=_ax_;break;
        case 6:var _oE_=_ay_;break;
        case 7:var _oE_=_az_;break;
        case 8:var _oE_=_aA_;break;
        case 9:var _oE_=_aB_;break;
        case 10:var _oE_=_aC_;break;
        case 11:var _oE_=_aD_;break;
        case 0:
        case 13:var _oE_=_as_;break;
        case 3:
        case 14:var _oE_=_av_;break;
        default:var _oE_=_aE_}
       /*<<camlinternalFormat.ml 1451 61>>*/ return  /*<<camlinternalFormat.ml 1451 61>>*/ transform_int_alt
              (iconv,
                /*<<camlinternalFormat.ml 1451 61>>*/ caml_format_int(_oE_,n)) /*<<camlinternalFormat.ml 1451 64>>*/ }
    function convert_int32(iconv,n)
     { /*<<camlinternalFormat.ml 1396 23>>*/ switch(iconv)
       {case 1:var _oD_=_aT_;break;
        case 2:var _oD_=_aU_;break;
        case 4:var _oD_=_aW_;break;
        case 5:var _oD_=_aX_;break;
        case 6:var _oD_=_aY_;break;
        case 7:var _oD_=_aZ_;break;
        case 8:var _oD_=_a0_;break;
        case 9:var _oD_=_a1_;break;
        case 10:var _oD_=_a2_;break;
        case 11:var _oD_=_a3_;break;
        case 0:
        case 13:var _oD_=_aS_;break;
        case 3:
        case 14:var _oD_=_aV_;break;
        default:var _oD_=_a4_}
       /*<<camlinternalFormat.ml 1453 64>>*/ return  /*<<camlinternalFormat.ml 1453 64>>*/ transform_int_alt
              (iconv,
                /*<<camlinternalFormat.ml 1453 64>>*/ caml_format_int(_oD_,n)) /*<<camlinternalFormat.ml 1453 67>>*/ }
    function convert_nativeint(iconv,n)
     { /*<<camlinternalFormat.ml 1404 23>>*/ switch(iconv)
       {case 1:var _oC_=_a6_;break;
        case 2:var _oC_=_a7_;break;
        case 4:var _oC_=_a9_;break;
        case 5:var _oC_=_a__;break;
        case 6:var _oC_=_a$_;break;
        case 7:var _oC_=_ba_;break;
        case 8:var _oC_=_bb_;break;
        case 9:var _oC_=_bc_;break;
        case 10:var _oC_=_bd_;break;
        case 11:var _oC_=_be_;break;
        case 0:
        case 13:var _oC_=_a5_;break;
        case 3:
        case 14:var _oC_=_a8_;break;
        default:var _oC_=_bf_}
       /*<<camlinternalFormat.ml 1455 68>>*/ return  /*<<camlinternalFormat.ml 1455 68>>*/ transform_int_alt
              (iconv,
                /*<<camlinternalFormat.ml 1455 68>>*/ caml_format_int(_oC_,n)) /*<<camlinternalFormat.ml 1455 71>>*/ }
    function convert_int64(iconv,n)
     { /*<<camlinternalFormat.ml 1388 23>>*/ switch(iconv)
       {case 1:var _oB_=_aG_;break;
        case 2:var _oB_=_aH_;break;
        case 4:var _oB_=_aJ_;break;
        case 5:var _oB_=_aK_;break;
        case 6:var _oB_=_aL_;break;
        case 7:var _oB_=_aM_;break;
        case 8:var _oB_=_aN_;break;
        case 9:var _oB_=_aO_;break;
        case 10:var _oB_=_aP_;break;
        case 11:var _oB_=_aQ_;break;
        case 0:
        case 13:var _oB_=_aF_;break;
        case 3:
        case 14:var _oB_=_aI_;break;
        default:var _oB_=_aR_}
       /*<<camlinternalFormat.ml 1457 64>>*/ return  /*<<camlinternalFormat.ml 1457 64>>*/ transform_int_alt
              (iconv,
                /*<<camlinternalFormat.ml 1457 64>>*/ caml_int64_format
                (_oB_,n)) /*<<camlinternalFormat.ml 1457 67>>*/ }
    function convert_float(fconv,prec,x)
     { /*<<camlinternalFormat.ml 1462 2>>*/ function hex(param)
       { /*<<camlinternalFormat.ml 1463 4>>*/ switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
         /*<<camlinternalFormat.ml 1468 4>>*/ return  /*<<camlinternalFormat.ml 1468 4>>*/ caml_hexstring_of_float
                (x,prec,sign) /*<<camlinternalFormat.ml 1468 34>>*/ }
       /*<<camlinternalFormat.ml 1462 2>>*/ function caml_special_val(str)
       { /*<<camlinternalFormat.ml 1477 35>>*/  /*<<camlinternalFormat.ml 1477 35>>*/ var
         match=
           /*<<camlinternalFormat.ml 1477 35>>*/ caml_classify_float(x);
         /*<<camlinternalFormat.ml 1477 35>>*/ return 3 === match
                ?x < 0.?_bh_:_bi_
                :4 <= match?_bj_:str /*<<camlinternalFormat.ml 1480 21>>*/ }
       /*<<camlinternalFormat.ml 1462 2>>*/ switch(fconv[2])
       {case 5:
          /*<<camlinternalFormat.ml 1486 55>>*/ var
           /*<<camlinternalFormat.ml 1486 55>>*/ str=
            /*<<camlinternalFormat.ml 1486 55>>*/ caml_format_float
            ( /*<<camlinternalFormat.ml 1486 27>>*/ format_of_fconv
              (fconv,prec),
             x),
           /*<<camlinternalFormat.ml 1470 4>>*/ len=
            /*<<camlinternalFormat.ml 1470 4>>*/ caml_ml_string_length(str),
          i$0=0;
          /*<<camlinternalFormat.ml 1472 6>>*/ for(;;)
          { /*<<camlinternalFormat.ml 1472 6>>*/ if(i$0 === len)
            var _oz_=0;
           else
            { /*<<camlinternalFormat.ml 1473 14>>*/ var
               /*<<camlinternalFormat.ml 1473 14>>*/ match=
                /*<<camlinternalFormat.ml 1473 14>>*/ caml_string_get(str,i$0),
               /*<<camlinternalFormat.ml 1473 14>>*/ _oy_=match - 46 | 0,
              switch$0=0;
              /*<<camlinternalFormat.ml 1473 14>>*/ if(23 < _oy_ >>> 0)
              {if(55 === _oy_)switch$0 = 1}
             else
              if(21 < (_oy_ - 1 | 0) >>> 0)switch$0 = 1;
              /*<<camlinternalFormatBasics.ml 528 8>>*/ if(! switch$0)
              { /*<<camlinternalFormat.ml 1475 15>>*/ var
                 /*<<camlinternalFormat.ml 1475 15>>*/ i$1=i$0 + 1 | 0,
                i$0=i$1;
               continue}
              /*<<camlinternalFormat.ml 1473 14>>*/ var _oz_=1}
           var
            _oA_=
             _oz_?str: /*<<camlinternalFormat.ml 1476 32>>*/ symbol(str,_bg_);
           return caml_special_val(_oA_)}
        case 6:
          /*<<camlinternalFormat.ml 1482 15>>*/ return  /*<<camlinternalFormat.ml 1482 15>>*/ hex
                 (0);
        case 7:
          /*<<camlinternalFormat.ml 1483 38>>*/ var
           /*<<camlinternalFormat.ml 1483 38>>*/ s$0=
            /*<<camlinternalFormat.ml 1483 38>>*/ hex(0),
           /*<<string.ml 192 20>>*/ s=
            /*<<string.ml 192 20>>*/ caml_bytes_of_string(s$0),
           /*<<bytes.ml 211 2>>*/ l=
            /*<<bytes.ml 211 2>>*/ caml_ml_bytes_length(s);
          /*<<bytes.ml 211 2>>*/ if(0 === l)
          var _ox_=s;
         else
          { /*<<bytes.ml 213 12>>*/ var
             /*<<bytes.ml 213 12>>*/ r=
              /*<<bytes.ml 213 12>>*/ caml_create_bytes(l),
             /*<<bytes.ml 213 12>>*/ _ov_=l - 1 | 0,
             /*<<bytes.ml 213 12>>*/ _ou_=0;
            /*<<bytes.ml 213 12>>*/ if(! (_ov_ < 0))
            {var i=_ou_;
              /*<<bytes.ml 214 26>>*/ for(;;)
              { /*<<bytes.ml 214 41>>*/  /*<<bytes.ml 214 41>>*/ caml_bytes_unsafe_set
                (r,
                 i,
                  /*<<bytes.ml 214 41>>*/ f
                  ( /*<<bytes.ml 214 26>>*/ caml_bytes_unsafe_get(s,i)));
                /*<<bytes.ml 214 41>>*/  /*<<bytes.ml 214 41>>*/ var
                _ow_=
                 i + 1 | 0;
               if(_ov_ !== i){var i=_ow_;continue}
               break}}
            /*<<bytes.ml 213 12>>*/ var _ox_=r}
         return caml_string_of_bytes(_ox_);
        case 8:
          /*<<camlinternalFormat.ml 1484 33>>*/ return  /*<<camlinternalFormat.ml 1484 33>>*/ caml_special_val
                 ( /*<<camlinternalFormat.ml 1484 33>>*/ hex(0));
        default:
          /*<<camlinternalFormat.ml 1489 45>>*/ return  /*<<camlinternalFormat.ml 1489 45>>*/ caml_format_float
                 ( /*<<camlinternalFormat.ml 1489 17>>*/ format_of_fconv
                   (fconv,prec),
                  x)} /*<<camlinternalFormat.ml 1489 47>>*/ }
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
       /*<<camlinternalFormat.ml 1518 17>>*/ for(;;)
        /*<<camlinternalFormat.ml 1518 17>>*/ if(typeof fmt$0 === "number")
         /*<<camlinternalFormat.ml 1605 4>>*/ return  /*<<camlinternalFormat.ml 1605 4>>*/ caml_call1
                (k$0,acc$0);
       else
         /*<<camlinternalFormat.ml 1518 17>>*/ switch(fmt$0[0])
         {case 0:
            /*<<camlinternalFormat.ml 1520 4>>*/  /*<<camlinternalFormat.ml 1520 4>>*/ var
            rest=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1520 4>>*/ return function(c)
            { /*<<camlinternalFormat.ml 1521 6>>*/  /*<<camlinternalFormat.ml 1521 6>>*/ var
              new_acc=
               [5,acc$0,c];
              /*<<camlinternalFormat.ml 1521 6>>*/ return  /*<<camlinternalFormat.ml 1521 6>>*/ make_printf
                     (k$0,new_acc,rest) /*<<camlinternalFormat.ml 1522 32>>*/ };
          case 1:
            /*<<camlinternalFormat.ml 1524 4>>*/  /*<<camlinternalFormat.ml 1524 4>>*/ var
            rest$0=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1524 4>>*/ return function(c)
            { /*<<?>>*/ var switch$0=0;
              /*<<char.ml 29 14>>*/ if(40 <= c)
              if(92 === c)
               var str=_j_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_k_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_l_;break;
                  case 9:var str=_m_;break;
                  case 10:var str=_n_;break;
                  case 13:var str=_o_;break;
                  default:switch$0 = 1}
              /*<<camlinternalFormatBasics.ml 528 8>>*/ switch(switch$0)
              {case 1:
                 /*<<char.ml 42 6>>*/  /*<<char.ml 42 6>>*/ var
                 s=
                   /*<<char.ml 42 6>>*/ caml_create_bytes(4);
                 /*<<char.ml 42 6>>*/  /*<<char.ml 42 6>>*/ caml_bytes_unsafe_set
                 (s,0,92);
                 /*<<char.ml 42 6>>*/  /*<<char.ml 42 6>>*/ caml_bytes_unsafe_set
                 (s,1,48 + (c / 100 | 0) | 0);
                 /*<<char.ml 42 6>>*/  /*<<char.ml 42 6>>*/ caml_bytes_unsafe_set
                 (s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                 /*<<char.ml 42 6>>*/  /*<<char.ml 42 6>>*/ caml_bytes_unsafe_set
                 (s,3,48 + (c % 10 | 0) | 0);
                 /*<<char.ml 42 6>>*/ var
                 str=
                   /*<<char.ml 42 6>>*/ caml_string_of_bytes(s);
                break;
               case 2:
                 /*<<char.ml 37 14>>*/  /*<<char.ml 37 14>>*/ var
                 s$0=
                   /*<<char.ml 37 14>>*/ caml_create_bytes(1);
                 /*<<char.ml 37 14>>*/  /*<<char.ml 37 14>>*/ caml_bytes_unsafe_set
                 (s$0,0,c);
                 /*<<char.ml 37 14>>*/ var
                 str=
                   /*<<char.ml 37 14>>*/ caml_string_of_bytes(s$0);
                break
               }
              /*<<camlinternalFormat.ml 1495 12>>*/ var
              l=caml_ml_string_length(str),
               /*<<camlinternalFormat.ml 1495 12>>*/ res=
                /*<<camlinternalFormat.ml 1495 12>>*/ make(l + 2 | 0,39);
              /*<<camlinternalFormat.ml 1496 2>>*/  /*<<camlinternalFormat.ml 1496 2>>*/ caml_blit_string
              (str,0,res,1,l);
              /*<<camlinternalFormat.ml 1495 12>>*/ var
              new_acc=
               [4,
                acc$0,
                 /*<<camlinternalFormat.ml 1496 2>>*/ caml_string_of_bytes
                 (res)];
             return make_printf(k$0,new_acc,rest$0) /*<<camlinternalFormat.ml 1526 32>>*/ };
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding
                   (k$0,
                    acc$0,
                    rest$1,
                    pad,
                    function(str)
                     { /*<<camlinternalFormat.ml 1528 44>>*/ return str /*<<camlinternalFormat.ml 1528 47>>*/ });
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
            /*<<camlinternalFormat.ml 1735 34>>*/ if
            (typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
               /*<<camlinternalFormat.ml 1745 4>>*/ return prec$3
                      ?function(p,x)
                        { /*<<camlinternalFormat.ml 1746 16>>*/  /*<<camlinternalFormat.ml 1746 16>>*/ var
                          str=
                            /*<<camlinternalFormat.ml 1746 16>>*/ convert_float
                            (fconv,p,x);
                          /*<<camlinternalFormat.ml 1746 16>>*/ return  /*<<camlinternalFormat.ml 1746 16>>*/ make_printf
                                 (k$0,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1747 52>>*/ }
                      :function(x)
                        { /*<<camlinternalFormat.ml 1738 16>>*/  /*<<camlinternalFormat.ml 1738 16>>*/ var
                          str=
                            /*<<camlinternalFormat.ml 1738 16>>*/ convert_float
                            (fconv,
                              /*<<camlinternalFormat.ml 1738 36>>*/ default_float_precision
                              (fconv),
                             x);
                          /*<<camlinternalFormat.ml 1738 16>>*/ return  /*<<camlinternalFormat.ml 1738 16>>*/ make_printf
                                 (k$0,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1739 52>>*/ };
              /*<<camlinternalFormat.ml 1741 4>>*/  /*<<camlinternalFormat.ml 1741 4>>*/ var
              p=
               prec$3[1];
              /*<<camlinternalFormat.ml 1741 4>>*/ return function(x)
              { /*<<camlinternalFormat.ml 1742 16>>*/  /*<<camlinternalFormat.ml 1742 16>>*/ var
                str=
                  /*<<camlinternalFormat.ml 1742 16>>*/ convert_float
                  (fconv,p,x);
                /*<<camlinternalFormat.ml 1742 16>>*/ return  /*<<camlinternalFormat.ml 1742 16>>*/ make_printf
                       (k$0,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1743 52>>*/ }}
           else
            { /*<<camlinternalFormat.ml 1735 34>>*/ if(0 === pad$5[0])
              {var _oq_=pad$5[2],_or_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          { /*<<camlinternalFormat.ml 1759 16>>*/  /*<<camlinternalFormat.ml 1759 16>>*/ var
                            str=
                              /*<<camlinternalFormat.ml 1759 16>>*/ fix_padding
                              (_or_,
                               _oq_,
                                /*<<camlinternalFormat.ml 1759 36>>*/ convert_float
                                (fconv,p,x));
                            /*<<camlinternalFormat.ml 1759 16>>*/ return  /*<<camlinternalFormat.ml 1759 16>>*/ make_printf
                                   (k$0,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1760 52>>*/ }
                        :function(x)
                          { /*<<camlinternalFormat.ml 1750 16>>*/ var
                             /*<<camlinternalFormat.ml 1750 16>>*/ str=
                              /*<<camlinternalFormat.ml 1750 16>>*/ convert_float
                              (fconv,
                                /*<<camlinternalFormat.ml 1750 36>>*/ default_float_precision
                                (fconv),
                               x),
                             /*<<camlinternalFormat.ml 1751 17>>*/ str$0=
                              /*<<camlinternalFormat.ml 1751 17>>*/ fix_padding
                              (_or_,_oq_,str);
                            /*<<camlinternalFormat.ml 1751 17>>*/ return  /*<<camlinternalFormat.ml 1751 17>>*/ make_printf
                                   (k$0,[4,acc$0,str$0],rest$7) /*<<camlinternalFormat.ml 1752 53>>*/ };
               var p$0=prec$3[1];
               return function(x)
                { /*<<camlinternalFormat.ml 1755 16>>*/  /*<<camlinternalFormat.ml 1755 16>>*/ var
                  str=
                    /*<<camlinternalFormat.ml 1755 16>>*/ fix_padding
                    (_or_,
                     _oq_,
                      /*<<camlinternalFormat.ml 1755 36>>*/ convert_float
                      (fconv,p$0,x));
                  /*<<camlinternalFormat.ml 1755 16>>*/ return  /*<<camlinternalFormat.ml 1755 16>>*/ make_printf
                         (k$0,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1756 52>>*/ }}
             var _os_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        { /*<<camlinternalFormat.ml 1772 16>>*/  /*<<camlinternalFormat.ml 1772 16>>*/ var
                          str=
                            /*<<camlinternalFormat.ml 1772 16>>*/ fix_padding
                            (_os_,
                             w,
                              /*<<camlinternalFormat.ml 1772 36>>*/ convert_float
                              (fconv,p,x));
                          /*<<camlinternalFormat.ml 1772 16>>*/ return  /*<<camlinternalFormat.ml 1772 16>>*/ make_printf
                                 (k$0,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1773 52>>*/ }
                      :function(w,x)
                        { /*<<camlinternalFormat.ml 1763 16>>*/ var
                           /*<<camlinternalFormat.ml 1763 16>>*/ str=
                            /*<<camlinternalFormat.ml 1763 16>>*/ convert_float
                            (fconv,
                              /*<<camlinternalFormat.ml 1763 36>>*/ default_float_precision
                              (fconv),
                             x),
                           /*<<camlinternalFormat.ml 1764 17>>*/ str$0=
                            /*<<camlinternalFormat.ml 1764 17>>*/ fix_padding
                            (_os_,w,str);
                          /*<<camlinternalFormat.ml 1764 17>>*/ return  /*<<camlinternalFormat.ml 1764 17>>*/ make_printf
                                 (k$0,[4,acc$0,str$0],rest$7) /*<<camlinternalFormat.ml 1765 53>>*/ };
             var p$1=prec$3[1];
             return function(w,x)
              { /*<<camlinternalFormat.ml 1768 16>>*/  /*<<camlinternalFormat.ml 1768 16>>*/ var
                str=
                  /*<<camlinternalFormat.ml 1768 16>>*/ fix_padding
                  (_os_,
                   w,
                    /*<<camlinternalFormat.ml 1768 36>>*/ convert_float
                    (fconv,p$1,x));
                /*<<camlinternalFormat.ml 1768 16>>*/ return  /*<<camlinternalFormat.ml 1768 16>>*/ make_printf
                       (k$0,[4,acc$0,str],rest$7) /*<<camlinternalFormat.ml 1769 52>>*/ }}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
            /*<<camlinternalFormat.ml 1560 4>>*/ var
             /*<<camlinternalFormat.ml 1560 4>>*/ fmt$1=fmt$0[1],
             /*<<camlinternalFormat.ml 1560 4>>*/ acc$1=[7,acc$0],
            acc$0=acc$1,
            fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
            /*<<camlinternalFormat.ml 1501 12>>*/ var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
             /*<<camlinternalFormat.ml 1501 12>>*/ buf=
              /*<<camlinternalFormat.ml 1501 12>>*/ buffer_create(16);
            /*<<camlinternalFormat.ml 1502 2>>*/  /*<<camlinternalFormat.ml 1502 2>>*/ bprint_fmtty
            (buf,sub_fmtty);
            /*<<camlinternalFormat.ml 1501 12>>*/  /*<<camlinternalFormat.ml 1502 2>>*/ var
            ty=
              /*<<camlinternalFormat.ml 1502 2>>*/ buffer_contents(buf);
           return function(str)
            { /*<<camlinternalFormat.ml 1570 6>>*/ return  /*<<camlinternalFormat.ml 1570 6>>*/ make_printf
                     (k$0,[4,acc$0,ty],rest$9) /*<<camlinternalFormat.ml 1571 52>>*/ };
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            { /*<<camlinternalFormat.ml 1573 4>>*/ var
               /*<<camlinternalFormat.ml 1573 4>>*/ fmt$0=param[1],
               /*<<camlinternalFormat.ml 1312 18>>*/ fmtty$0=
                /*<<camlinternalFormat.ml 1312 18>>*/ erase_rel
                ( /*<<camlinternalFormat.ml 1312 29>>*/ symm(fmtty)),
               /*<<camlinternalFormat.ml 1008 25>>*/ _ot_=
                /*<<camlinternalFormat.ml 1008 25>>*/ type_format_gen
                (fmt$0,fmtty$0);
              /*<<camlinternalFormat.ml 1008 25>>*/ if
              (typeof _ot_[2] === "number")
              { /*<<camlinternalFormat.ml 1009 42>>*/  /*<<camlinternalFormat.ml 1009 42>>*/ var
                fmt=
                 _ot_[1];
                /*<<camlinternalFormat.ml 1574 6>>*/ return  /*<<camlinternalFormat.ml 1574 6>>*/ make_printf
                       (k$0,
                        acc$0,
                         /*<<camlinternalFormat.ml 1574 6>>*/ concat_fmt
                         (fmt,rest$10))}
              /*<<camlinternalFormat.ml 1010 9>>*/ throw Type_mismatch /*<<camlinternalFormat.ml 1574 42>>*/ };
          case 15:
            /*<<camlinternalFormat.ml 1544 4>>*/  /*<<camlinternalFormat.ml 1544 4>>*/ var
            rest$11=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1544 4>>*/ return function(f,x)
            { /*<<camlinternalFormat.ml 1544 15>>*/ return  /*<<camlinternalFormat.ml 1544 15>>*/ make_printf
                     (k$0,
                      [6,
                       acc$0,
                       function(o)
                        { /*<<camlinternalFormat.ml 1544 55>>*/ return  /*<<camlinternalFormat.ml 1544 55>>*/ caml_call2
                                 (f,o,x) /*<<camlinternalFormat.ml 1544 60>>*/ }],
                      rest$11) /*<<camlinternalFormat.ml 1544 67>>*/ };
          case 16:
            /*<<camlinternalFormat.ml 1546 4>>*/  /*<<camlinternalFormat.ml 1546 4>>*/ var
            rest$12=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1546 4>>*/ return function(f)
            { /*<<camlinternalFormat.ml 1546 13>>*/ return  /*<<camlinternalFormat.ml 1546 13>>*/ make_printf
                     (k$0,[6,acc$0,f],rest$12) /*<<camlinternalFormat.ml 1546 52>>*/ };
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _oo_=fmt$0[1];
           if(0 === _oo_[0])
            {var
              rest$13=fmt$0[2],
              match=_oo_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  { /*<<camlinternalFormat.ml 1597 6>>*/ return  /*<<camlinternalFormat.ml 1597 6>>*/ make_printf
                           (k,[1,acc,[0,kacc]],rest) /*<<camlinternalFormat.ml 1597 70>>*/ }
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_oo_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc)
                { /*<<camlinternalFormat.ml 1601 6>>*/ return  /*<<camlinternalFormat.ml 1601 6>>*/ make_printf
                         (k,[1,acc,[1,kacc]],rest) /*<<camlinternalFormat.ml 1601 70>>*/ }
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:
            /*<<camlinternalFormat.ml 1558 4>>*/ throw [0,Assert_failure,_bk_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bl_];
           return function(param)
            { /*<<camlinternalFormat.ml 1578 13>>*/ return  /*<<camlinternalFormat.ml 1578 13>>*/ make_printf
                     (k$0,new_acc,rest$15) /*<<camlinternalFormat.ml 1578 39>>*/ };
          case 21:
            /*<<camlinternalFormat.ml 1583 4>>*/  /*<<camlinternalFormat.ml 1583 4>>*/ var
            rest$16=
             fmt$0[2];
            /*<<camlinternalFormat.ml 1583 4>>*/ return function(n)
            { /*<<camlinternalFormat.ml 1584 42>>*/  /*<<camlinternalFormat.ml 1584 42>>*/ var
              new_acc=
               [4,
                acc$0,
                 /*<<camlinternalFormat.ml 1584 42>>*/ caml_format_int(_bm_,n)];
              /*<<camlinternalFormat.ml 1584 42>>*/ return  /*<<camlinternalFormat.ml 1584 42>>*/ make_printf
                     (k$0,new_acc,rest$16) /*<<camlinternalFormat.ml 1585 32>>*/ };
          case 22:
            /*<<camlinternalFormat.ml 1587 4>>*/  /*<<camlinternalFormat.ml 1587 4>>*/ var
            rest$17=
             fmt$0[1];
            /*<<camlinternalFormat.ml 1587 4>>*/ return function(c)
            { /*<<camlinternalFormat.ml 1588 6>>*/  /*<<camlinternalFormat.ml 1588 6>>*/ var
              new_acc=
               [5,acc$0,c];
              /*<<camlinternalFormat.ml 1588 6>>*/ return  /*<<camlinternalFormat.ml 1588 6>>*/ make_printf
                     (k$0,new_acc,rest$17) /*<<camlinternalFormat.ml 1589 32>>*/ };
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
            /*<<camlinternalFormat.ml 1613 21>>*/ if(typeof ign === "number")
             /*<<camlinternalFormat.ml 1613 21>>*/ switch(ign)
             {case 0:
                /*<<camlinternalFormat.ml 1614 39>>*/ if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
                /*<<camlinternalFormat.ml 1615 39>>*/ if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
                /*<<camlinternalFormat.ml 1626 39>>*/ throw [0,
                      Assert_failure,
                      _bn_];
              default:
                /*<<camlinternalFormat.ml 1629 39>>*/ if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
             /*<<camlinternalFormat.ml 1613 21>>*/ switch(ign[0])
             {case 0:
                /*<<camlinternalFormat.ml 1616 39>>*/ if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
                /*<<camlinternalFormat.ml 1617 39>>*/ if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
                /*<<camlinternalFormat.ml 1618 39>>*/ if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
                /*<<camlinternalFormat.ml 1619 39>>*/ if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
                /*<<camlinternalFormat.ml 1620 39>>*/ if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
                /*<<camlinternalFormat.ml 1621 39>>*/ if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
                /*<<camlinternalFormat.ml 1622 39>>*/ if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
                /*<<camlinternalFormat.ml 1623 39>>*/ if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
                /*<<camlinternalFormat.ml 1624 39>>*/ if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
                /*<<camlinternalFormat.ml 1625 39>>*/  /*<<camlinternalFormat.ml 1625 39>>*/ var
                fmtty$0=
                 ign[2];
                /*<<camlinternalFormat.ml 1625 39>>*/ if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
                /*<<camlinternalFormat.ml 1627 39>>*/ if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
                /*<<camlinternalFormat.ml 1628 39>>*/ if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
            /*<<camlinternalFormat.ml 1548 33>>*/ var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
             /*<<camlinternalFormat.ml 1548 33>>*/ _op_=
              /*<<camlinternalFormat.ml 1548 33>>*/ caml_call1(f,0);
            /*<<camlinternalFormat.ml 1548 33>>*/ if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_op_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_op_])} /*<<camlinternalFormat.ml 1605 9>>*/ }
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     { /*<<camlinternalFormat.ml 1637 23>>*/ if(typeof fmtty === "number")
       { /*<<camlinternalFormat.ml 1652 31>>*/ if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
        /*<<camlinternalFormat.ml 1637 23>>*/ switch(fmtty[0])
        {case 0:
           /*<<camlinternalFormat.ml 1638 31>>*/  /*<<camlinternalFormat.ml 1638 31>>*/ var
           rest=
            fmtty[1];
           /*<<camlinternalFormat.ml 1638 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1638 40>>*/ return  /*<<camlinternalFormat.ml 1638 40>>*/ make_from_fmtty
                    (k,acc,rest,fmt) /*<<camlinternalFormat.ml 1638 70>>*/ };
         case 1:
           /*<<camlinternalFormat.ml 1639 31>>*/  /*<<camlinternalFormat.ml 1639 31>>*/ var
           rest$0=
            fmtty[1];
           /*<<camlinternalFormat.ml 1639 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1639 40>>*/ return  /*<<camlinternalFormat.ml 1639 40>>*/ make_from_fmtty
                    (k,acc,rest$0,fmt) /*<<camlinternalFormat.ml 1639 70>>*/ };
         case 2:
           /*<<camlinternalFormat.ml 1640 31>>*/  /*<<camlinternalFormat.ml 1640 31>>*/ var
           rest$1=
            fmtty[1];
           /*<<camlinternalFormat.ml 1640 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1640 40>>*/ return  /*<<camlinternalFormat.ml 1640 40>>*/ make_from_fmtty
                    (k,acc,rest$1,fmt) /*<<camlinternalFormat.ml 1640 70>>*/ };
         case 3:
           /*<<camlinternalFormat.ml 1641 31>>*/  /*<<camlinternalFormat.ml 1641 31>>*/ var
           rest$2=
            fmtty[1];
           /*<<camlinternalFormat.ml 1641 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1641 40>>*/ return  /*<<camlinternalFormat.ml 1641 40>>*/ make_from_fmtty
                    (k,acc,rest$2,fmt) /*<<camlinternalFormat.ml 1641 70>>*/ };
         case 4:
           /*<<camlinternalFormat.ml 1642 31>>*/  /*<<camlinternalFormat.ml 1642 31>>*/ var
           rest$3=
            fmtty[1];
           /*<<camlinternalFormat.ml 1642 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1642 40>>*/ return  /*<<camlinternalFormat.ml 1642 40>>*/ make_from_fmtty
                    (k,acc,rest$3,fmt) /*<<camlinternalFormat.ml 1642 70>>*/ };
         case 5:
           /*<<camlinternalFormat.ml 1643 31>>*/  /*<<camlinternalFormat.ml 1643 31>>*/ var
           rest$4=
            fmtty[1];
           /*<<camlinternalFormat.ml 1643 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1643 40>>*/ return  /*<<camlinternalFormat.ml 1643 40>>*/ make_from_fmtty
                    (k,acc,rest$4,fmt) /*<<camlinternalFormat.ml 1643 70>>*/ };
         case 6:
           /*<<camlinternalFormat.ml 1644 31>>*/  /*<<camlinternalFormat.ml 1644 31>>*/ var
           rest$5=
            fmtty[1];
           /*<<camlinternalFormat.ml 1644 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1644 40>>*/ return  /*<<camlinternalFormat.ml 1644 40>>*/ make_from_fmtty
                    (k,acc,rest$5,fmt) /*<<camlinternalFormat.ml 1644 70>>*/ };
         case 7:
           /*<<camlinternalFormat.ml 1645 31>>*/  /*<<camlinternalFormat.ml 1645 31>>*/ var
           rest$6=
            fmtty[1];
           /*<<camlinternalFormat.ml 1645 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1645 40>>*/ return  /*<<camlinternalFormat.ml 1645 40>>*/ make_from_fmtty
                    (k,acc,rest$6,fmt) /*<<camlinternalFormat.ml 1645 70>>*/ };
         case 8:
           /*<<camlinternalFormat.ml 1651 31>>*/  /*<<camlinternalFormat.ml 1651 31>>*/ var
           rest$7=
            fmtty[2];
           /*<<camlinternalFormat.ml 1651 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1651 40>>*/ return  /*<<camlinternalFormat.ml 1651 40>>*/ make_from_fmtty
                    (k,acc,rest$7,fmt) /*<<camlinternalFormat.ml 1651 70>>*/ };
         case 9:
           /*<<camlinternalFormat.ml 1654 13>>*/ var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
            /*<<camlinternalFormat.ml 1654 13>>*/ ty=
             /*<<camlinternalFormat.ml 1654 13>>*/ trans
             ( /*<<camlinternalFormat.ml 1654 19>>*/ symm(ty1),ty2);
           /*<<camlinternalFormat.ml 1654 13>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1655 35>>*/ return  /*<<camlinternalFormat.ml 1655 35>>*/ make_from_fmtty
                    (k,
                     acc,
                      /*<<camlinternalFormat.ml 1655 35>>*/ concat_fmtty
                      (ty,rest$8),
                     fmt) /*<<camlinternalFormat.ml 1655 61>>*/ };
         case 10:
           /*<<camlinternalFormat.ml 1646 31>>*/  /*<<camlinternalFormat.ml 1646 31>>*/ var
           rest$9=
            fmtty[1];
           /*<<camlinternalFormat.ml 1646 31>>*/ return function(param,_on_)
           { /*<<camlinternalFormat.ml 1646 42>>*/ return  /*<<camlinternalFormat.ml 1646 42>>*/ make_from_fmtty
                    (k,acc,rest$9,fmt) /*<<camlinternalFormat.ml 1646 72>>*/ };
         case 11:
           /*<<camlinternalFormat.ml 1647 31>>*/  /*<<camlinternalFormat.ml 1647 31>>*/ var
           rest$10=
            fmtty[1];
           /*<<camlinternalFormat.ml 1647 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1647 40>>*/ return  /*<<camlinternalFormat.ml 1647 40>>*/ make_from_fmtty
                    (k,acc,rest$10,fmt) /*<<camlinternalFormat.ml 1647 70>>*/ };
         case 12:
           /*<<camlinternalFormat.ml 1648 31>>*/  /*<<camlinternalFormat.ml 1648 31>>*/ var
           rest$11=
            fmtty[1];
           /*<<camlinternalFormat.ml 1648 31>>*/ return function(param)
           { /*<<camlinternalFormat.ml 1648 40>>*/ return  /*<<camlinternalFormat.ml 1648 40>>*/ make_from_fmtty
                    (k,acc,rest$11,fmt) /*<<camlinternalFormat.ml 1648 70>>*/ };
         case 13:
           /*<<camlinternalFormat.ml 1649 31>>*/ throw [0,Assert_failure,_bo_];
         default:
           /*<<camlinternalFormat.ml 1650 31>>*/ throw [0,Assert_failure,_bp_]} /*<<camlinternalFormat.ml 1655 61>>*/ }
    function make_invalid_arg(counter,k,acc,fmt)
     { /*<<camlinternalFormat.ml 1663 2>>*/  /*<<camlinternalFormat.ml 1663 2>>*/ var
       _om_=
        [8,acc,_bq_];
       /*<<camlinternalFormat.ml 1663 2>>*/ if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_om_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_om_,fmt]) /*<<camlinternalFormat.ml 1663 72>>*/ }
    function make_custom$0(counter,k,acc,rest,arity,f)
     { /*<<camlinternalFormat.ml 1778 28>>*/ if(arity)
       { /*<<camlinternalFormat.ml 1781 4>>*/  /*<<camlinternalFormat.ml 1781 4>>*/ var
         arity$0=
          arity[1];
         /*<<camlinternalFormat.ml 1781 4>>*/ return function(x)
         { /*<<camlinternalFormat.ml 1782 35>>*/ return  /*<<camlinternalFormat.ml 1782 35>>*/ make_custom
                  (k,
                   acc,
                   rest,
                   arity$0,
                    /*<<camlinternalFormat.ml 1782 35>>*/ caml_call1(f,x)) /*<<camlinternalFormat.ml 1782 40>>*/ }}
       /*<<camlinternalFormat.ml 1779 19>>*/  /*<<camlinternalFormat.ml 1779 19>>*/ var
       _ol_=
        [4,acc,f];
       /*<<camlinternalFormat.ml 1779 19>>*/ if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_ol_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_ol_,rest]) /*<<camlinternalFormat.ml 1782 40>>*/ }
    function make_printf(k,acc,fmt)
     { /*<<?>>*/ return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     { /*<<?>>*/ return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     { /*<<?>>*/ return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     { /*<<camlinternalFormat.ml 1670 29>>*/ if(typeof pad === "number")
        /*<<camlinternalFormat.ml 1672 4>>*/ return function(x)
        { /*<<camlinternalFormat.ml 1673 42>>*/  /*<<camlinternalFormat.ml 1673 42>>*/ var
          new_acc=
           [4,acc, /*<<camlinternalFormat.ml 1673 42>>*/ caml_call1(trans,x)];
          /*<<camlinternalFormat.ml 1673 42>>*/ return  /*<<camlinternalFormat.ml 1673 42>>*/ make_printf
                 (k,new_acc,fmt) /*<<camlinternalFormat.ml 1674 31>>*/ };
      else
       { /*<<camlinternalFormat.ml 1670 29>>*/ if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           { /*<<camlinternalFormat.ml 1677 42>>*/  /*<<camlinternalFormat.ml 1677 42>>*/ var
             new_acc=
              [4,
               acc,
                /*<<camlinternalFormat.ml 1677 42>>*/ fix_padding
                (padty,
                 width,
                  /*<<camlinternalFormat.ml 1677 66>>*/ caml_call1(trans,x))];
             /*<<camlinternalFormat.ml 1677 42>>*/ return  /*<<camlinternalFormat.ml 1677 42>>*/ make_printf
                    (k,new_acc,fmt) /*<<camlinternalFormat.ml 1678 31>>*/ }}
         /*<<camlinternalFormat.ml 1680 4>>*/  /*<<camlinternalFormat.ml 1680 4>>*/ var
         padty$0=
          pad[1];
         /*<<camlinternalFormat.ml 1680 4>>*/ return function(w,x)
         { /*<<camlinternalFormat.ml 1681 42>>*/  /*<<camlinternalFormat.ml 1681 42>>*/ var
           new_acc=
            [4,
             acc,
              /*<<camlinternalFormat.ml 1681 42>>*/ fix_padding
              (padty$0,
               w,
                /*<<camlinternalFormat.ml 1681 62>>*/ caml_call1(trans,x))];
           /*<<camlinternalFormat.ml 1681 42>>*/ return  /*<<camlinternalFormat.ml 1681 42>>*/ make_printf
                  (k,new_acc,fmt) /*<<camlinternalFormat.ml 1682 31>>*/ }} /*<<camlinternalFormat.ml 1682 31>>*/ }
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     { /*<<camlinternalFormat.ml 1691 40>>*/ if(typeof pad === "number")
       {if(typeof match === "number")
          /*<<camlinternalFormat.ml 1701 4>>*/ return match
                 ?function(p,x)
                   { /*<<camlinternalFormat.ml 1702 16>>*/  /*<<camlinternalFormat.ml 1702 16>>*/ var
                     str=
                       /*<<camlinternalFormat.ml 1702 16>>*/ fix_int_precision
                       (p,
                         /*<<camlinternalFormat.ml 1702 36>>*/ caml_call2
                         (trans,iconv,x));
                     /*<<camlinternalFormat.ml 1702 16>>*/ return  /*<<camlinternalFormat.ml 1702 16>>*/ make_printf
                            (k,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1703 52>>*/ }
                 :function(x)
                   { /*<<camlinternalFormat.ml 1694 16>>*/  /*<<camlinternalFormat.ml 1694 16>>*/ var
                     str=
                       /*<<camlinternalFormat.ml 1694 16>>*/ caml_call2
                       (trans,iconv,x);
                     /*<<camlinternalFormat.ml 1694 16>>*/ return  /*<<camlinternalFormat.ml 1694 16>>*/ make_printf
                            (k,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1695 52>>*/ };
         /*<<camlinternalFormat.ml 1697 4>>*/  /*<<camlinternalFormat.ml 1697 4>>*/ var
         p=
          match[1];
         /*<<camlinternalFormat.ml 1697 4>>*/ return function(x)
         { /*<<camlinternalFormat.ml 1698 16>>*/  /*<<camlinternalFormat.ml 1698 16>>*/ var
           str=
             /*<<camlinternalFormat.ml 1698 16>>*/ fix_int_precision
             (p,
               /*<<camlinternalFormat.ml 1698 36>>*/ caml_call2(trans,iconv,x));
           /*<<camlinternalFormat.ml 1698 16>>*/ return  /*<<camlinternalFormat.ml 1698 16>>*/ make_printf
                  (k,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1699 52>>*/ }}
      else
       { /*<<camlinternalFormat.ml 1691 40>>*/ if(0 === pad[0])
         {var _oi_=pad[2],_oj_=pad[1];
          if(typeof match === "number")
           return match
                   ?function(p,x)
                     { /*<<camlinternalFormat.ml 1714 16>>*/  /*<<camlinternalFormat.ml 1714 16>>*/ var
                       str=
                         /*<<camlinternalFormat.ml 1714 16>>*/ fix_padding
                         (_oj_,
                          _oi_,
                           /*<<camlinternalFormat.ml 1714 36>>*/ fix_int_precision
                           (p,
                             /*<<camlinternalFormat.ml 1714 57>>*/ caml_call2
                             (trans,iconv,x)));
                       /*<<camlinternalFormat.ml 1714 16>>*/ return  /*<<camlinternalFormat.ml 1714 16>>*/ make_printf
                              (k,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1715 52>>*/ }
                   :function(x)
                     { /*<<camlinternalFormat.ml 1706 16>>*/  /*<<camlinternalFormat.ml 1706 16>>*/ var
                       str=
                         /*<<camlinternalFormat.ml 1706 16>>*/ fix_padding
                         (_oj_,
                          _oi_,
                           /*<<camlinternalFormat.ml 1706 36>>*/ caml_call2
                           (trans,iconv,x));
                       /*<<camlinternalFormat.ml 1706 16>>*/ return  /*<<camlinternalFormat.ml 1706 16>>*/ make_printf
                              (k,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1707 52>>*/ };
          var p$0=match[1];
          return function(x)
           { /*<<camlinternalFormat.ml 1710 16>>*/  /*<<camlinternalFormat.ml 1710 16>>*/ var
             str=
               /*<<camlinternalFormat.ml 1710 16>>*/ fix_padding
               (_oj_,
                _oi_,
                 /*<<camlinternalFormat.ml 1710 36>>*/ fix_int_precision
                 (p$0,
                   /*<<camlinternalFormat.ml 1710 57>>*/ caml_call2
                   (trans,iconv,x)));
             /*<<camlinternalFormat.ml 1710 16>>*/ return  /*<<camlinternalFormat.ml 1710 16>>*/ make_printf
                    (k,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1711 52>>*/ }}
        var _ok_=pad[1];
        if(typeof match === "number")
         return match
                 ?function(w,p,x)
                   { /*<<camlinternalFormat.ml 1726 16>>*/  /*<<camlinternalFormat.ml 1726 16>>*/ var
                     str=
                       /*<<camlinternalFormat.ml 1726 16>>*/ fix_padding
                       (_ok_,
                        w,
                         /*<<camlinternalFormat.ml 1726 36>>*/ fix_int_precision
                         (p,
                           /*<<camlinternalFormat.ml 1726 57>>*/ caml_call2
                           (trans,iconv,x)));
                     /*<<camlinternalFormat.ml 1726 16>>*/ return  /*<<camlinternalFormat.ml 1726 16>>*/ make_printf
                            (k,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1727 52>>*/ }
                 :function(w,x)
                   { /*<<camlinternalFormat.ml 1718 16>>*/  /*<<camlinternalFormat.ml 1718 16>>*/ var
                     str=
                       /*<<camlinternalFormat.ml 1718 16>>*/ fix_padding
                       (_ok_,
                        w,
                         /*<<camlinternalFormat.ml 1718 36>>*/ caml_call2
                         (trans,iconv,x));
                     /*<<camlinternalFormat.ml 1718 16>>*/ return  /*<<camlinternalFormat.ml 1718 16>>*/ make_printf
                            (k,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1719 52>>*/ };
        var p$1=match[1];
        return function(w,x)
         { /*<<camlinternalFormat.ml 1722 16>>*/  /*<<camlinternalFormat.ml 1722 16>>*/ var
           str=
             /*<<camlinternalFormat.ml 1722 16>>*/ fix_padding
             (_ok_,
              w,
               /*<<camlinternalFormat.ml 1722 36>>*/ fix_int_precision
               (p$1,
                 /*<<camlinternalFormat.ml 1722 57>>*/ caml_call2
                 (trans,iconv,x)));
           /*<<camlinternalFormat.ml 1722 16>>*/ return  /*<<camlinternalFormat.ml 1722 16>>*/ make_printf
                  (k,[4,acc,str],fmt) /*<<camlinternalFormat.ml 1723 52>>*/ }} /*<<camlinternalFormat.ml 1727 52>>*/ }
    function output_acc(o,acc)
     { /*<<?>>*/ var acc$0=acc;
       /*<<camlinternalFormat.ml 1897 27>>*/ for(;;)
        /*<<camlinternalFormat.ml 1897 27>>*/ if(typeof acc$0 === "number")
         /*<<camlinternalFormat.ml 1912 32>>*/ return 0;
       else
         /*<<camlinternalFormat.ml 1897 27>>*/ switch(acc$0[0])
         {case 0:
            /*<<camlinternalFormat.ml 1899 12>>*/ var
            fmting_lit=acc$0[2],
            p=acc$0[1],
             /*<<camlinternalFormat.ml 1899 12>>*/ s=
              /*<<camlinternalFormat.ml 1899 12>>*/ string_of_formatting_lit
              (fmting_lit);
            /*<<camlinternalFormat.ml 1900 4>>*/  /*<<camlinternalFormat.ml 1900 4>>*/ output_acc
            (o,p);
            /*<<camlinternalFormat.ml 1900 4>>*/ return  /*<<camlinternalFormat.ml 1900 4>>*/ output_string
                   (o,s);
          case 1:
           var _og_=acc$0[2],_oh_=acc$0[1];
           if(0 === _og_[0])
            { /*<<camlinternalFormat.ml 1902 4>>*/  /*<<camlinternalFormat.ml 1902 4>>*/ var
              acc$1=
               _og_[1];
              /*<<camlinternalFormat.ml 1902 4>>*/  /*<<camlinternalFormat.ml 1902 4>>*/ output_acc
              (o,_oh_);
              /*<<camlinternalFormat.ml 1902 20>>*/  /*<<camlinternalFormat.ml 1902 20>>*/ output_string
              (o,_br_);
              /*<<camlinternalFormat.ml 1902 4>>*/ var acc$0=acc$1;
             continue}
           var acc$2=_og_[1];
            /*<<camlinternalFormat.ml 1904 4>>*/  /*<<camlinternalFormat.ml 1904 4>>*/ output_acc
            (o,_oh_);
            /*<<camlinternalFormat.ml 1904 20>>*/  /*<<camlinternalFormat.ml 1904 20>>*/ output_string
            (o,_bs_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
            /*<<camlinternalFormat.ml 1909 32>>*/  /*<<camlinternalFormat.ml 1909 32>>*/ output_acc
            (o,p$2);
            /*<<camlinternalFormat.ml 1909 32>>*/ return  /*<<camlinternalFormat.ml 1909 32>>*/ caml_call1
                   (f,o);
          case 7:
            /*<<camlinternalFormat.ml 1910 32>>*/  /*<<camlinternalFormat.ml 1910 32>>*/ var
            p$3=
             acc$0[1];
            /*<<camlinternalFormat.ml 1910 32>>*/  /*<<camlinternalFormat.ml 1910 32>>*/ output_acc
            (o,p$3);
            /*<<camlinternalFormat.ml 1910 32>>*/ return  /*<<camlinternalFormat.ml 1910 32>>*/ caml_ml_flush
                   (o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
            /*<<camlinternalFormat.ml 1911 32>>*/  /*<<camlinternalFormat.ml 1911 32>>*/ output_acc
            (o,p$4);
            /*<<camlinternalFormat.ml 1911 32>>*/ return  /*<<camlinternalFormat.ml 1911 32>>*/ invalid_arg
                   (msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
            /*<<camlinternalFormat.ml 1906 32>>*/  /*<<camlinternalFormat.ml 1906 32>>*/ output_acc
            (o,p$0);
            /*<<camlinternalFormat.ml 1906 32>>*/ return  /*<<camlinternalFormat.ml 1906 32>>*/ output_string
                   (o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
            /*<<camlinternalFormat.ml 1908 32>>*/  /*<<camlinternalFormat.ml 1908 32>>*/ output_acc
            (o,p$1);
            /*<<camlinternalFormat.ml 1908 32>>*/ return  /*<<camlinternalFormat.ml 1908 32>>*/ caml_ml_output_char
                   (o,c)} /*<<camlinternalFormat.ml 1912 34>>*/ }
    function strput_acc(b,acc)
     { /*<<?>>*/ var acc$0=acc;
       /*<<camlinternalFormat.ml 1938 27>>*/ for(;;)
        /*<<camlinternalFormat.ml 1938 27>>*/ if(typeof acc$0 === "number")
         /*<<camlinternalFormat.ml 1953 32>>*/ return 0;
       else
         /*<<camlinternalFormat.ml 1938 27>>*/ switch(acc$0[0])
         {case 0:
            /*<<camlinternalFormat.ml 1940 12>>*/ var
            fmting_lit=acc$0[2],
            p=acc$0[1],
             /*<<camlinternalFormat.ml 1940 12>>*/ s=
              /*<<camlinternalFormat.ml 1940 12>>*/ string_of_formatting_lit
              (fmting_lit);
            /*<<camlinternalFormat.ml 1941 4>>*/  /*<<camlinternalFormat.ml 1941 4>>*/ strput_acc
            (b,p);
            /*<<camlinternalFormat.ml 1941 4>>*/ return  /*<<camlinternalFormat.ml 1941 4>>*/ add_string
                   (b,s);
          case 1:
           var _oe_=acc$0[2],_of_=acc$0[1];
           if(0 === _oe_[0])
            { /*<<camlinternalFormat.ml 1943 4>>*/  /*<<camlinternalFormat.ml 1943 4>>*/ var
              acc$1=
               _oe_[1];
              /*<<camlinternalFormat.ml 1943 4>>*/  /*<<camlinternalFormat.ml 1943 4>>*/ strput_acc
              (b,_of_);
              /*<<camlinternalFormat.ml 1943 20>>*/  /*<<camlinternalFormat.ml 1943 20>>*/ add_string
              (b,_bt_);
              /*<<camlinternalFormat.ml 1943 4>>*/ var acc$0=acc$1;
             continue}
           var acc$2=_oe_[1];
            /*<<camlinternalFormat.ml 1945 4>>*/  /*<<camlinternalFormat.ml 1945 4>>*/ strput_acc
            (b,_of_);
            /*<<camlinternalFormat.ml 1945 20>>*/  /*<<camlinternalFormat.ml 1945 20>>*/ add_string
            (b,_bu_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
            /*<<camlinternalFormat.ml 1950 32>>*/  /*<<camlinternalFormat.ml 1950 32>>*/ strput_acc
            (b,p$2);
            /*<<camlinternalFormat.ml 1950 68>>*/ return  /*<<camlinternalFormat.ml 1950 68>>*/ add_string
                   (b, /*<<camlinternalFormat.ml 1950 68>>*/ caml_call1(f,0));
          case 7:
            /*<<camlinternalFormat.ml 1951 32>>*/ var
             /*<<camlinternalFormat.ml 1951 32>>*/ acc$3=acc$0[1],
            acc$0=acc$3;
           continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
            /*<<camlinternalFormat.ml 1952 32>>*/  /*<<camlinternalFormat.ml 1952 32>>*/ strput_acc
            (b,p$3);
            /*<<camlinternalFormat.ml 1952 32>>*/ return  /*<<camlinternalFormat.ml 1952 32>>*/ invalid_arg
                   (msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
            /*<<camlinternalFormat.ml 1947 32>>*/  /*<<camlinternalFormat.ml 1947 32>>*/ strput_acc
            (b,p$0);
            /*<<camlinternalFormat.ml 1947 32>>*/ return  /*<<camlinternalFormat.ml 1947 32>>*/ add_string
                   (b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
            /*<<camlinternalFormat.ml 1949 32>>*/  /*<<camlinternalFormat.ml 1949 32>>*/ strput_acc
            (b,p$1);
            /*<<buffer.ml 132 2>>*/  /*<<buffer.ml 132 2>>*/ var pos=b[2];
            /*<<buffer.ml 132 2>>*/ if(b[3] <= pos)
             /*<<buffer.ml 133 26>>*/  /*<<buffer.ml 133 26>>*/ resize(b,1);
            /*<<buffer.ml 133 36>>*/  /*<<buffer.ml 133 36>>*/ caml_bytes_unsafe_set
            (b[1],pos,c);
            /*<<buffer.ml 133 36>>*/ b[2] = pos + 1 | 0;
            /*<<buffer.ml 133 36>>*/ return 0} /*<<camlinternalFormat.ml 1953 34>>*/ }
    function eprintf(fmt$0)
     {var fmt=fmt$0[1],_od_=0;
      return make_printf
              (function(acc)
                { /*<<printf.ml 20 26>>*/  /*<<printf.ml 20 26>>*/ output_acc
                  (oc,acc);
                  /*<<printf.ml 20 26>>*/ return 0 /*<<printf.ml 20 47>>*/ },
               _od_,
               fmt) /*<<printf.ml 32 36>>*/ }
    function sprintf(fmt$0)
     { /*<<?>>*/ var fmt=fmt$0[1];
      function k(acc)
       { /*<<printf.ml 36 14>>*/  /*<<printf.ml 36 14>>*/ var
         b=
           /*<<printf.ml 36 14>>*/ create$0(64);
         /*<<printf.ml 37 4>>*/  /*<<printf.ml 37 4>>*/ strput_acc(b,acc);
        return  /*<<buffer.ml 37 17>>*/ sub_string(b[1],0,b[2]) /*<<printf.ml 38 27>>*/ }
      return make_printf(k,0,fmt) /*<<printf.ml 41 43>>*/ }
     /*<<printexc.ml 20 15>>*/  /*<<printexc.ml 20 15>>*/ var printers=[0,0];
     /*<<printexc.ml 20 15>>*/ function register_printer(fn)
     { /*<<printexc.ml 264 2>>*/ printers[1] = [0,fn,printers[1]];
       /*<<printexc.ml 264 2>>*/ return 0 /*<<printexc.ml 264 29>>*/ }
    function bits(s)
     { /*<<random.ml 77 4>>*/ s[2] = (s[2] + 1 | 0) % 55 | 0;
       /*<<random.ml 77 4>>*/ var
        /*<<random.ml 77 4>>*/ _oa_=s[2],
        /*<<random.ml 78 17>>*/ curval=
         /*<<random.ml 78 17>>*/ caml_check_bound(s[1],_oa_)[1 + _oa_],
        /*<<random.ml 78 17>>*/ _ob_=(s[2] + 24 | 0) % 55 | 0,
        /*<<random.ml 79 17>>*/ newval=
         /*<<random.ml 79 17>>*/ caml_check_bound(s[1],_ob_)[1 + _ob_]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
        /*<<random.ml 79 17>>*/ newval30=newval & 1073741823,
        /*<<random.ml 79 17>>*/ _oc_=s[2];
       /*<<random.ml 82 4>>*/  /*<<random.ml 82 4>>*/ caml_check_bound
        (s[1],_oc_)
       [1 + _oc_]
      =
      newval30;
       /*<<random.ml 82 4>>*/ return newval30 /*<<random.ml 83 12>>*/ }
     /*<<random.ml 131 9>>*/  /*<<random.ml 131 9>>*/ var
     s=
      [0, /*<<random.ml 131 9>>*/ _bx_.slice(),0];
     /*<<random.ml 131 9>>*/ function int$0(bound)
     { /*<<?>>*/ if(! (1073741823 < bound) && 0 < bound)
        /*<<random.ml 87 4>>*/ for(;;)
        { /*<<random.ml 87 12>>*/ var
           /*<<random.ml 87 12>>*/ r= /*<<random.ml 87 12>>*/ bits(s),
           /*<<random.ml 87 12>>*/ v=
            /*<<random.ml 87 12>>*/ caml_mod(r,bound);
          /*<<random.ml 87 12>>*/ if
          (((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))
          continue;
          /*<<random.ml 89 55>>*/ return v}
       /*<<random.ml 93 9>>*/ return  /*<<random.ml 93 9>>*/ invalid_arg(_bw_) /*<<random.ml 167 39>>*/ }
    function ongoing_traversal(h)
     { /*<<hashtbl.ml 41 2>>*/ var
        /*<<hashtbl.ml 41 2>>*/ _n__=h.length - 1 < 4?1:0,
        /*<<hashtbl.ml 41 2>>*/ _n$_=_n__ || (h[4] < 0?1:0);
      return _n$_ /*<<hashtbl.ml 42 23>>*/ }
    function flip_ongoing_traversal(h)
     { /*<<hashtbl.ml 45 2>>*/ h[4] = - h[4] | 0;
       /*<<hashtbl.ml 45 2>>*/ return 0 /*<<hashtbl.ml 45 36>>*/ }
    try
     { /*<<hashtbl.ml 51 8>>*/ var
        /*<<hashtbl.ml 51 8>>*/ _hB_=
         /*<<hashtbl.ml 51 8>>*/ caml_sys_getenv(_hA_),
       params=_hB_}
    catch(_n8_)
     {_n8_ = caml_wrap_exception(_n8_);
      if(_n8_ !== Not_found)throw _n8_;
       /*<<hashtbl.ml 52 4>>*/ try
       { /*<<hashtbl.ml 52 8>>*/ var
          /*<<hashtbl.ml 52 8>>*/ _hz_=
           /*<<hashtbl.ml 52 8>>*/ caml_sys_getenv(_hy_),
         _bz_=_hz_}
      catch(_n9_)
       {_n9_ = caml_wrap_exception(_n9_);
        if(_n9_ !== Not_found)throw _n9_;
        var _bz_=_by_}
      var params=_bz_}
     /*<<hashtbl.ml 53 2>>*/ var
      /*<<hashtbl.ml 53 2>>*/ randomized_default=
       /*<<hashtbl.ml 53 2>>*/ contains(params,82),
      /*<<hashtbl.ml 53 2>>*/ prng=
      [246,
       function(_n7_)
        { /*<<random.ml 67 31>>*/ var
           /*<<random.ml 67 31>>*/ seed$0=
            /*<<random.ml 67 31>>*/ caml_sys_random_seed(0),
           /*<<random.ml 34 28>>*/ result=
           [0, /*<<random.ml 34 28>>*/ caml_make_vect(55,0),0],
           /*<<random.ml 41 4>>*/ seed=0 === seed$0.length - 1?[0,0]:seed$0,
           /*<<random.ml 47 4>>*/ l=seed.length - 1,
          i$0=0;
          /*<<random.ml 49 6>>*/ for(;;)
          { /*<<random.ml 49 6>>*/  /*<<random.ml 49 6>>*/ caml_check_bound
             (result[1],i$0)
            [1 + i$0]
           =
           i$0;
            /*<<random.ml 49 6>>*/  /*<<random.ml 49 6>>*/ var
            _n6_=
             i$0 + 1 | 0;
           if(54 !== i$0){var i$0=_n6_;continue}
            /*<<random.ml 49 6>>*/ var
             /*<<random.ml 51 4>>*/ accu=[0,_bv_],
             /*<<random.ml 52 22>>*/ _n2_=
             54
             +
              /*<<random.ml 52 22>>*/ max(55,l)
             |
             0,
             /*<<random.ml 51 4>>*/ _n1_=0;
            /*<<random.ml 52 22>>*/ if(! (_n2_ < 0))
            {var i=_n1_;
              /*<<random.ml 53 6>>*/ for(;;)
              { /*<<random.ml 53 6>>*/ var
                 /*<<random.ml 53 6>>*/ j=i % 55 | 0,
                 /*<<random.ml 53 6>>*/ k=
                  /*<<random.ml 53 6>>*/ caml_mod(i,l),
                 /*<<random.ml 55 28>>*/ x=
                  /*<<random.ml 55 28>>*/ caml_check_bound(seed,k)[1 + k],
                 /*<<random.ml 41 39>>*/ str=
                  /*<<random.ml 41 39>>*/ symbol
                  (accu[1],
                    /*<<random.ml 41 47>>*/ caml_string_of_jsbytes("" + x));
               accu[1]
               =
                /*<<digest.ml 27 2>>*/ caml_md5_string
                (str,0, /*<<digest.ml 27 2>>*/ caml_ml_string_length(str));
                /*<<random.ml 53 6>>*/ var
                _n3_=accu[1],
                 /*<<random.ml 44 19>>*/ _nX_=
                  /*<<random.ml 44 19>>*/ caml_string_get(_n3_,3)
                 <<
                 24,
                 /*<<random.ml 43 61>>*/ _nY_=
                  /*<<random.ml 43 61>>*/ caml_string_get(_n3_,2)
                 <<
                 16,
                 /*<<random.ml 43 35>>*/ _nZ_=
                  /*<<random.ml 43 35>>*/ caml_string_get(_n3_,1)
                 <<
                 8,
                 /*<<random.ml 43 16>>*/ _n0_=
                 (( /*<<random.ml 43 16>>*/ caml_string_get(_n3_,0)
                   +
                   _nZ_
                   |
                   0)
                  +
                  _nY_
                  |
                  0)
                 +
                 _nX_
                 |
                 0,
                 /*<<random.ml 56 19>>*/ _n4_=
                 ( /*<<random.ml 56 19>>*/ caml_check_bound(result[1],j)
                   [1 + j]
                  ^
                  _n0_)
                 &
                 1073741823;
                /*<<random.ml 56 6>>*/  /*<<random.ml 56 6>>*/ caml_check_bound
                 (result[1],j)
                [1 + j]
               =
               _n4_;
                /*<<random.ml 53 6>>*/  /*<<random.ml 56 6>>*/ var
                _n5_=
                 i + 1 | 0;
               if(_n2_ !== i){var i=_n5_;continue}
               break}}
            /*<<random.ml 58 4>>*/ result[2] = 0;
           return result}}];
     /*<<hashtbl.ml 53 2>>*/ function create$1(opt,initial_size)
     { /*<<hashtbl.ml 74 2>>*/ if(opt)
        /*<<hashtbl.ml 73 22>>*/ var
         /*<<hashtbl.ml 73 22>>*/ sth=opt[1],
        random=sth;
      else
       var random=randomized_default;
      var x=16;
       /*<<hashtbl.ml 69 2>>*/ for(;;)
       { /*<<hashtbl.ml 70 7>>*/ if
         (! (initial_size <= x) && ! (max_array_length < (x * 2 | 0)))
         { /*<<hashtbl.ml 71 7>>*/ var
            /*<<hashtbl.ml 71 7>>*/ x$0=x * 2 | 0,
           x=x$0;
          continue}
        if(random)
          /*<<hashtbl.ml 75 28>>*/ var
           /*<<hashtbl.ml 75 28>>*/ _nV_=
            /*<<hashtbl.ml 75 28>>*/ caml_obj_tag(prng),
           /*<<hashtbl.ml 75 28>>*/ _nW_=
           250 === _nV_?prng[1]:246 === _nV_?force_lazy_block(prng):prng,
          seed= /*<<hashtbl.ml 75 28>>*/ bits(_nW_);
        else
         var seed=0;
         /*<<hashtbl.ml 76 52>>*/ return [0,
                0,
                 /*<<hashtbl.ml 76 52>>*/ caml_make_vect(x,0),
                seed,
                x]} /*<<hashtbl.ml 76 72>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function clear$1(h)
     { /*<<hashtbl.ml 79 2>>*/  /*<<hashtbl.ml 79 2>>*/ var _nT_=0 < h[1]?1:0;
       /*<<hashtbl.ml 79 2>>*/ if(_nT_)
       { /*<<hashtbl.ml 79 21>>*/ h[1] = 0;
         /*<<hashtbl.ml 79 21>>*/ var
          /*<<hashtbl.ml 79 21>>*/ len=h[2].length - 1,
          /*<<hashtbl.ml 79 21>>*/ _nU_=h[2];
        if(0 <= len && ! ((_nU_.length - 1 - len | 0) < 0))
          /*<<array.ml 86 7>>*/ return  /*<<array.ml 86 7>>*/ caml_array_fill
                 (_nU_,0,len,0);
         /*<<array.ml 85 7>>*/ return  /*<<array.ml 85 7>>*/ invalid_arg(_w_)}
      return _nT_ /*<<hashtbl.ml 82 5>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function reset(h)
     { /*<<hashtbl.ml 85 2>>*/  /*<<hashtbl.ml 85 2>>*/ var
       len=
        h[2].length - 1;
       /*<<hashtbl.ml 87 13>>*/ if
       (4 <= h.length - 1 && len !==  /*<<hashtbl.ml 87 13>>*/ abs(h[4]))
       { /*<<hashtbl.ml 89 7>>*/ h[1] = 0;
         /*<<hashtbl.ml 91 45>>*/ h[2]
        =
         /*<<hashtbl.ml 91 45>>*/ caml_make_vect
         ( /*<<hashtbl.ml 91 25>>*/ abs(h[4]),0);
         /*<<hashtbl.ml 91 45>>*/ return 0}
       /*<<hashtbl.ml 88 4>>*/ return  /*<<hashtbl.ml 88 4>>*/ clear$1(h) /*<<hashtbl.ml 92 5>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function f$0(param)
     { /*<<hashtbl.ml 94 22>>*/ if(param)
       {var
         key=param[1],
         data=param[2],
         next=param[3],
         prec$0=[0,key,data,next],
         prec=prec$0,
         param$0=next;
        for(;;)
         {if(param$0)
           {var
             key$0=param$0[1],
             data$0=param$0[2],
             next$0=param$0[3],
             r=[0,key$0,data$0,next$0];
            if(prec)
             { /*<<hashtbl.ml 103 28>>*/ prec[3] = r;
              var prec=r,param$0=next$0;
              continue}
             /*<<hashtbl.ml 102 23>>*/ throw [0,Assert_failure,_bA_]}
          return prec$0}}
       /*<<hashtbl.ml 95 13>>*/ return 0 /*<<hashtbl.ml 109 7>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function copy$0(init)
     { /*<<hashtbl.ml 111 13>>*/ var
        /*<<hashtbl.ml 111 13>>*/ _nR_=init[2],
        /*<<array.ml 104 2>>*/ l=_nR_.length - 1,
        /*<<hashtbl.ml 111 13>>*/ _nP_=init[4],
        /*<<hashtbl.ml 111 13>>*/ _nQ_=init[3];
       /*<<array.ml 104 2>>*/ if(0 === l)
       var _nS_=[0];
      else
       { /*<<array.ml 106 12>>*/ var
          /*<<array.ml 106 12>>*/ r=
           /*<<array.ml 106 12>>*/ caml_make_vect
           (l, /*<<array.ml 106 21>>*/ f$0(_nR_[1])),
          /*<<array.ml 106 12>>*/ _nN_=l - 1 | 0,
          /*<<array.ml 106 12>>*/ _nM_=1;
         /*<<array.ml 106 12>>*/ if(! (_nN_ < 1))
         {var i=_nM_;
           /*<<array.ml 108 6>>*/ for(;;)
           { /*<<array.ml 108 6>>*/ r[1 + i]
            =
             /*<<array.ml 108 21>>*/ f$0(_nR_[1 + i]);
             /*<<array.ml 108 6>>*/  /*<<array.ml 108 6>>*/ var
             _nO_=
              i + 1 | 0;
            if(_nN_ !== i){var i=_nO_;continue}
            break}}
         /*<<array.ml 106 12>>*/ var _nS_=r}
      return [0,init[1],_nS_,_nQ_,_nP_] /*<<hashtbl.ml 111 63>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function length(h)
     { /*<<hashtbl.ml 113 15>>*/ return h[1] /*<<hashtbl.ml 113 21>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function resize$0(indexfun,h)
     { /*<<hashtbl.ml 116 2>>*/ var
        /*<<hashtbl.ml 116 2>>*/ odata=h[2],
        /*<<hashtbl.ml 116 2>>*/ osize=odata.length - 1,
        /*<<hashtbl.ml 116 2>>*/ nsize=osize * 2 | 0,
        /*<<hashtbl.ml 116 2>>*/ _nD_=nsize < max_array_length?1:0;
       /*<<hashtbl.ml 116 2>>*/ if(_nD_)
       { /*<<hashtbl.ml 120 16>>*/ var
          /*<<hashtbl.ml 120 16>>*/ ndata=
           /*<<hashtbl.ml 120 16>>*/ caml_make_vect(nsize,0),
          /*<<hashtbl.ml 121 21>>*/ ndata_tail=
           /*<<hashtbl.ml 121 21>>*/ caml_make_vect(nsize,0),
          /*<<hashtbl.ml 122 22>>*/ inplace=
          1
          -
           /*<<hashtbl.ml 122 22>>*/ ongoing_traversal(h);
         /*<<hashtbl.ml 122 22>>*/ h[2] = ndata;
         /*<<hashtbl.ml 120 16>>*/ var
          /*<<hashtbl.ml 122 22>>*/ _nF_=osize - 1 | 0,
          /*<<hashtbl.ml 122 22>>*/ _nE_=0;
         /*<<hashtbl.ml 122 22>>*/ if(! (_nF_ < 0))
         {var i$0=_nE_;
          a:
           /*<<hashtbl.ml 140 6>>*/ for(;;)
           { /*<<hashtbl.ml 140 20>>*/ var
              /*<<hashtbl.ml 140 20>>*/ cell$1=
               /*<<hashtbl.ml 140 20>>*/ caml_check_bound(odata,i$0)[1 + i$0],
             cell=cell$1;
             /*<<hashtbl.ml 124 28>>*/ for(;;)
             { /*<<hashtbl.ml 124 28>>*/ if(cell)
               { /*<<hashtbl.ml 131 21>>*/ var
                 key=cell[1],
                 data=cell[2],
                 next=cell[3],
                 cell$0=inplace?cell:[0,key,data,0],
                  /*<<hashtbl.ml 131 21>>*/ nidx=
                   /*<<hashtbl.ml 131 21>>*/ caml_call2(indexfun,h,key),
                  /*<<hashtbl.ml 132 22>>*/ match=
                   /*<<hashtbl.ml 132 22>>*/ caml_check_bound(ndata_tail,nidx)
                   [1 + nidx];
                 /*<<hashtbl.ml 132 22>>*/ if(match)
                  /*<<hashtbl.ml 134 25>>*/ match[3] = cell$0;
                else
                  /*<<hashtbl.ml 133 21>>*/  /*<<hashtbl.ml 133 21>>*/ caml_check_bound
                   (ndata,nidx)
                  [1 + nidx]
                 =
                 cell$0;
                 /*<<hashtbl.ml 136 10>>*/  /*<<hashtbl.ml 136 10>>*/ caml_check_bound
                  (ndata_tail,nidx)
                 [1 + nidx]
                =
                cell$0;
                 /*<<hashtbl.ml 131 21>>*/ var cell=next;
                continue}
              var _nL_=i$0 + 1 | 0;
              if(_nF_ !== i$0){var i$0=_nL_;continue a}
              break}
            break}}
         /*<<hashtbl.ml 142 4>>*/ if(inplace)
         { /*<<hashtbl.ml 143 6>>*/ var
            /*<<hashtbl.ml 143 6>>*/ _nH_=nsize - 1 | 0,
            /*<<hashtbl.ml 143 6>>*/ _nG_=0;
           /*<<hashtbl.ml 143 6>>*/ if(! (_nH_ < 0))
           {var i=_nG_;
             /*<<hashtbl.ml 144 8>>*/ for(;;)
             { /*<<hashtbl.ml 144 14>>*/  /*<<hashtbl.ml 144 14>>*/ var
               match$0=
                 /*<<hashtbl.ml 144 14>>*/ caml_check_bound(ndata_tail,i)
                 [1 + i];
               /*<<hashtbl.ml 144 14>>*/ if(match$0)
                /*<<hashtbl.ml 146 23>>*/ match$0[3] = 0;
               /*<<hashtbl.ml 144 14>>*/ var _nK_=i + 1 | 0;
              if(_nH_ !== i){var i=_nK_;continue}
              break}}
           /*<<hashtbl.ml 143 6>>*/ var _nI_=0}
        else
         var _nI_=inplace;
         /*<<hashtbl.ml 120 16>>*/ var _nJ_=_nI_}
      else
       var _nJ_=_nD_;
       /*<<hashtbl.ml 113 15>>*/ return _nJ_ /*<<hashtbl.ml 148 5>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function iter$1(f,h)
     { /*<<hashtbl.ml 151 2>>*/ function do_bucket(param)
       { /*<<?>>*/ var param$0=param;
         /*<<hashtbl.ml 151 22>>*/ for(;;)
         { /*<<hashtbl.ml 151 22>>*/ if(param$0)
           {var key=param$0[1],data=param$0[2],next=param$0[3];
             /*<<hashtbl.ml 155 8>>*/  /*<<hashtbl.ml 155 8>>*/ caml_call2
             (f,key,data);
            var param$0=next;
            continue}
           /*<<hashtbl.ml 153 8>>*/ return 0} /*<<hashtbl.ml 155 34>>*/ }
       /*<<hashtbl.ml 156 17>>*/  /*<<hashtbl.ml 156 17>>*/ var
       old_trav=
         /*<<hashtbl.ml 156 17>>*/ ongoing_traversal(h);
       /*<<hashtbl.ml 156 17>>*/ if(1 - old_trav)
        /*<<hashtbl.ml 157 23>>*/  /*<<hashtbl.ml 157 23>>*/ flip_ongoing_traversal
        (h);
       /*<<hashtbl.ml 157 47>>*/ try
       { /*<<hashtbl.ml 160 4>>*/ var
          /*<<hashtbl.ml 160 4>>*/ d=h[2],
          /*<<hashtbl.ml 160 4>>*/ _nz_=d.length - 1 - 1 | 0,
          /*<<hashtbl.ml 160 4>>*/ _ny_=0;
         /*<<hashtbl.ml 160 4>>*/ if(! (_nz_ < 0))
         {var i=_ny_;
           /*<<hashtbl.ml 161 6>>*/ for(;;)
           { /*<<hashtbl.ml 161 6>>*/  /*<<hashtbl.ml 161 6>>*/ do_bucket
             ( /*<<hashtbl.ml 161 16>>*/ caml_check_bound(d,i)[1 + i]);
             /*<<hashtbl.ml 161 6>>*/  /*<<hashtbl.ml 161 6>>*/ var
             _nC_=
              i + 1 | 0;
            if(_nz_ !== i){var i=_nC_;continue}
            break}}
         /*<<hashtbl.ml 160 4>>*/ var
          /*<<hashtbl.ml 163 4>>*/ _nA_=1 - old_trav,
          /*<<hashtbl.ml 163 4>>*/ _nB_=
          _nA_? /*<<hashtbl.ml 163 25>>*/ flip_ongoing_traversal(h):_nA_;
         /*<<hashtbl.ml 164 16>>*/ return _nB_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
         /*<<hashtbl.ml 164 16>>*/ if(old_trav)
          /*<<hashtbl.ml 124 28>>*/ throw exn;
         /*<<hashtbl.ml 165 4>>*/  /*<<hashtbl.ml 165 4>>*/ flip_ongoing_traversal
         (h);
         /*<<hashtbl.ml 165 4>>*/ throw exn} /*<<hashtbl.ml 166 13>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function filter_map_inplace_bucket
     (f,h,i,prec,slot)
     {var prec$0=prec,slot$0=slot;
      for(;;)
       {if(slot$0)
         { /*<<hashtbl.ml 175 18>>*/ var
           key=slot$0[1],
           data=slot$0[2],
           next=slot$0[3],
            /*<<hashtbl.ml 175 18>>*/ match=
             /*<<hashtbl.ml 175 18>>*/ caml_call2(f,key,data);
           /*<<hashtbl.ml 175 18>>*/ if(match)
           {var data$0=match[1];
            if(prec$0)
             prec$0[3] = slot$0;
            else
              /*<<hashtbl.ml 181 21>>*/  /*<<hashtbl.ml 181 21>>*/ caml_check_bound
               (h[2],i)
              [1 + i]
             =
             slot$0;
             /*<<hashtbl.ml 181 39>>*/ slot$0[2] = data$0;
            var prec$0=slot$0,slot$0=next;
            continue}
           /*<<hashtbl.ml 177 10>>*/ h[1] = h[1] - 1 | 0;
           /*<<hashtbl.ml 175 18>>*/ var slot$0=next;
          continue}
         /*<<hashtbl.ml 170 6>>*/ return prec$0
                ?(prec$0[3] = 0,0)
                :( /*<<hashtbl.ml 171 17>>*/ caml_check_bound(h[2],i)[1 + i]
                  =
                  0,
                  0)}}
     /*<<hashtbl.ml 53 2>>*/ function filter_map_inplace(f,h)
     { /*<<hashtbl.ml 189 2>>*/ var
        /*<<hashtbl.ml 189 2>>*/ d=h[2],
        /*<<hashtbl.ml 190 17>>*/ old_trav=
         /*<<hashtbl.ml 190 17>>*/ ongoing_traversal(h);
       /*<<hashtbl.ml 190 17>>*/ if(1 - old_trav)
        /*<<hashtbl.ml 191 23>>*/  /*<<hashtbl.ml 191 23>>*/ flip_ongoing_traversal
        (h);
       /*<<hashtbl.ml 191 47>>*/ try
       {var _nv_=d.length - 1 - 1 | 0,_nu_=0;
        if(! (_nv_ < 0))
         {var i=_nu_;
           /*<<hashtbl.ml 194 6>>*/ for(;;)
           { /*<<hashtbl.ml 194 6>>*/  /*<<hashtbl.ml 194 6>>*/ filter_map_inplace_bucket
             (f,
              h,
              i,
              0,
               /*<<hashtbl.ml 194 44>>*/ caml_check_bound(h[2],i)[1 + i]);
             /*<<hashtbl.ml 194 6>>*/  /*<<hashtbl.ml 194 6>>*/ var
             _nx_=
              i + 1 | 0;
            if(_nv_ !== i){var i=_nx_;continue}
            break}}
        var _nw_=0;
         /*<<hashtbl.ml 196 16>>*/ return _nw_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
         /*<<hashtbl.ml 196 16>>*/ if(old_trav)
          /*<<hashtbl.ml 151 22>>*/ throw exn;
         /*<<hashtbl.ml 197 4>>*/  /*<<hashtbl.ml 197 4>>*/ flip_ongoing_traversal
         (h);
         /*<<hashtbl.ml 197 4>>*/ throw exn} /*<<hashtbl.ml 198 13>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function fold(f,h,init)
     { /*<<hashtbl.ml 201 2>>*/ function do_bucket(b,accu)
       {var b$0=b,accu$0=accu;
         /*<<hashtbl.ml 202 4>>*/ for(;;)
         { /*<<hashtbl.ml 202 4>>*/ if(b$0)
           { /*<<hashtbl.ml 206 23>>*/ var
             key=b$0[1],
             data=b$0[2],
             next=b$0[3],
              /*<<hashtbl.ml 206 23>>*/ accu$1=
               /*<<hashtbl.ml 206 23>>*/ caml_call3(f,key,data,accu$0),
             b$0=next,
             accu$0=accu$1;
            continue}
           /*<<hashtbl.ml 204 8>>*/ return accu$0} /*<<hashtbl.ml 206 40>>*/ }
       /*<<hashtbl.ml 207 17>>*/  /*<<hashtbl.ml 207 17>>*/ var
       old_trav=
         /*<<hashtbl.ml 207 17>>*/ ongoing_traversal(h);
       /*<<hashtbl.ml 207 17>>*/ if(1 - old_trav)
        /*<<hashtbl.ml 208 23>>*/  /*<<hashtbl.ml 208 23>>*/ flip_ongoing_traversal
        (h);
       /*<<hashtbl.ml 208 47>>*/ try
       {var d=h[2],accu=[0,init],_nq_=d.length - 1 - 1 | 0,_np_=0;
        if(! (_nq_ < 0))
         {var i=_np_;
           /*<<hashtbl.ml 213 6>>*/ for(;;)
           { /*<<hashtbl.ml 213 6>>*/  /*<<hashtbl.ml 213 6>>*/ var
             _ns_=
              accu[1];
             /*<<hashtbl.ml 213 14>>*/ accu[1]
            =
             /*<<hashtbl.ml 213 14>>*/ do_bucket
             ( /*<<hashtbl.ml 213 24>>*/ caml_check_bound(d,i)[1 + i],_ns_);
             /*<<hashtbl.ml 213 6>>*/  /*<<hashtbl.ml 213 14>>*/ var
             _nt_=
              i + 1 | 0;
            if(_nq_ !== i){var i=_nt_;continue}
            break}}
         /*<<hashtbl.ml 215 4>>*/ if(1 - old_trav)
          /*<<hashtbl.ml 215 25>>*/  /*<<hashtbl.ml 215 25>>*/ flip_ongoing_traversal
          (h);
         /*<<hashtbl.ml 215 49>>*/  /*<<hashtbl.ml 215 49>>*/ var
         _nr_=
          accu[1];
         /*<<hashtbl.ml 217 16>>*/ return _nr_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
         /*<<hashtbl.ml 217 16>>*/ if(old_trav)throw exn;
         /*<<hashtbl.ml 218 4>>*/  /*<<hashtbl.ml 218 4>>*/ flip_ongoing_traversal
         (h);
         /*<<hashtbl.ml 218 4>>*/ throw exn} /*<<hashtbl.ml 219 13>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function bucket_length(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         { /*<<hashtbl.ml 230 18>>*/ var
            /*<<hashtbl.ml 230 18>>*/ param$1=param$0[3],
            /*<<hashtbl.ml 230 18>>*/ accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=param$1;
          continue}
         /*<<hashtbl.ml 229 13>>*/ return accu$0}}
     /*<<hashtbl.ml 53 2>>*/ function stats(h)
     { /*<<hashtbl.ml 233 2>>*/ var
        /*<<hashtbl.ml 233 2>>*/ _nl_=h[2],
        /*<<hashtbl.ml 233 2>>*/ _nm_=0,
        /*<<hashtbl.ml 234 4>>*/ mbl=
         /*<<hashtbl.ml 234 4>>*/ fold_left$0
         (function(m,b)
           { /*<<hashtbl.ml 234 38>>*/ return  /*<<hashtbl.ml 234 38>>*/ max
                    (m, /*<<hashtbl.ml 234 38>>*/ bucket_length(0,b)) /*<<hashtbl.ml 234 57>>*/ },
          _nm_,
          _nl_),
        /*<<hashtbl.ml 235 14>>*/ histo=
         /*<<hashtbl.ml 235 14>>*/ caml_make_vect(mbl + 1 | 0,0),
        /*<<hashtbl.ml 235 14>>*/ _nn_=h[2],
        /*<<array.ml 95 2>>*/ _nj_=_nn_.length - 1 - 1 | 0,
        /*<<array.ml 95 2>>*/ _ni_=0;
       /*<<array.ml 95 2>>*/ if(! (_nj_ < 0))
       {var i=_ni_;
         /*<<array.ml 95 31>>*/ for(;;)
         { /*<<array.ml 95 32>>*/ var
            /*<<array.ml 95 32>>*/ b=_nn_[1 + i],
            /*<<hashtbl.ml 238 14>>*/ l=
             /*<<hashtbl.ml 238 14>>*/ bucket_length(0,b),
            /*<<hashtbl.ml 239 19>>*/ _no_=
             /*<<hashtbl.ml 239 19>>*/ caml_check_bound(histo,l)[1 + l]
            +
            1
            |
            0;
           /*<<hashtbl.ml 239 6>>*/  /*<<hashtbl.ml 239 6>>*/ caml_check_bound
            (histo,l)
           [1 + l]
          =
          _no_;
           /*<<array.ml 95 32>>*/ var _nk_=i + 1 | 0;
          if(_nj_ !== i){var i=_nk_;continue}
          break}}
      return [0,h[1],h[2].length - 1,mbl,histo] /*<<hashtbl.ml 244 30>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function to_seq(tbl)
     { /*<<hashtbl.ml 251 2>>*/  /*<<hashtbl.ml 251 2>>*/ var tbl_data=tbl[2];
       /*<<hashtbl.ml 251 2>>*/ function aux(i,buck,param)
       {var i$0=i,buck$0=buck;
         /*<<hashtbl.ml 253 26>>*/ for(;;)
         { /*<<hashtbl.ml 253 26>>*/ if(buck$0)
           {var key=buck$0[1],data=buck$0[2],next=buck$0[3];
             /*<<hashtbl.ml 259 31>>*/ return [0,
                    [0,key,data],
                    function(_nh_){ /*<<?>>*/ return aux(i$0,next,_nh_)}]}
           /*<<hashtbl.ml 255 8>>*/ if(i$0 === tbl_data.length - 1)
            /*<<hashtbl.ml 256 13>>*/ return 0;
           /*<<hashtbl.ml 257 22>>*/ var
            /*<<hashtbl.ml 257 22>>*/ buck$1=
             /*<<hashtbl.ml 257 22>>*/ caml_check_bound(tbl_data,i$0)[1 + i$0],
            /*<<hashtbl.ml 257 22>>*/ i$1=i$0 + 1 | 0,
           i$0=i$1,
           buck$0=buck$1;
          continue} /*<<hashtbl.ml 259 42>>*/ }
       /*<<hashtbl.ml 251 2>>*/ var
        /*<<hashtbl.ml 251 2>>*/ _ne_=0,
        /*<<hashtbl.ml 251 2>>*/ _nf_=0;
       /*<<hashtbl.ml 251 2>>*/ return function(_ng_)
       { /*<<?>>*/ return aux(_nf_,_ne_,_ng_)} /*<<hashtbl.ml 261 13>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function to_seq_keys(m)
     { /*<<hashtbl.ml 263 32>>*/  /*<<hashtbl.ml 263 32>>*/ var
       _na_=
         /*<<hashtbl.ml 263 32>>*/ to_seq(m);
       /*<<hashtbl.ml 263 32>>*/ function _nb_(_nd_)
       { /*<<?>>*/ return _nd_[1]}
       /*<<hashtbl.ml 263 32>>*/ return function(_nc_)
       { /*<<?>>*/ return map(_nb_,_na_,_nc_)} /*<<hashtbl.ml 263 42>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function to_seq_values(m)
     { /*<<hashtbl.ml 265 34>>*/  /*<<hashtbl.ml 265 34>>*/ var
       _m8_=
         /*<<hashtbl.ml 265 34>>*/ to_seq(m);
       /*<<hashtbl.ml 265 34>>*/ function _m9_(_m$_)
       { /*<<?>>*/ return _m$_[2]}
       /*<<hashtbl.ml 265 34>>*/ return function(_m__)
       { /*<<?>>*/ return map(_m9_,_m8_,_m__)} /*<<hashtbl.ml 265 44>>*/ }
     /*<<hashtbl.ml 53 2>>*/ function Make(H)
     { /*<<?>>*/ var equal=H[1];
      function key_index(h,x)
       { /*<<hashtbl.ml 350 6>>*/  /*<<hashtbl.ml 350 6>>*/ var
         _m7_=
          h[2].length - 1 - 1 | 0;
        return  /*<<hashtbl.ml 477 34>>*/ caml_call1(H[2],x) & _m7_ /*<<hashtbl.ml 350 56>>*/ }
      function add(h,key,data)
       { /*<<hashtbl.ml 353 14>>*/ var
          /*<<hashtbl.ml 353 14>>*/ i=
           /*<<hashtbl.ml 353 14>>*/ key_index(h,key),
          /*<<hashtbl.ml 354 40>>*/ bucket=
          [0,
           key,
           data,
            /*<<hashtbl.ml 354 40>>*/ caml_check_bound(h[2],i)[1 + i]];
         /*<<hashtbl.ml 355 6>>*/  /*<<hashtbl.ml 355 6>>*/ caml_check_bound
          (h[2],i)
         [1 + i]
        =
        bucket;
         /*<<hashtbl.ml 355 6>>*/ h[1] = h[1] + 1 | 0;
         /*<<hashtbl.ml 353 14>>*/  /*<<hashtbl.ml 355 6>>*/ var
         _m6_=
          h[2].length - 1 << 1 < h[1]?1:0;
         /*<<hashtbl.ml 355 6>>*/ return _m6_
                ? /*<<hashtbl.ml 357 49>>*/ resize$0(key_index,h)
                :_m6_ /*<<hashtbl.ml 357 67>>*/ }
      function remove(h,key)
       { /*<<hashtbl.ml 373 14>>*/ var
          /*<<hashtbl.ml 373 14>>*/ i=
           /*<<hashtbl.ml 373 14>>*/ key_index(h,key),
          /*<<hashtbl.ml 374 34>>*/ c$0=
           /*<<hashtbl.ml 374 34>>*/ caml_check_bound(h[2],i)[1 + i],
         prec=0,
         c=c$0;
        for(;;)
         {if(c)
           {var k=c[1],next=c[3];
             /*<<hashtbl.ml 363 13>>*/ if
             ( /*<<hashtbl.ml 363 13>>*/ caml_call2(equal,k,key))
             { /*<<hashtbl.ml 364 15>>*/ h[1] = h[1] - 1 | 0;
               /*<<hashtbl.ml 364 15>>*/ return prec
                      ?(prec[3] = next,0)
                      :( /*<<hashtbl.ml 367 23>>*/ caml_check_bound(h[2],i)[1 + i]
                        =
                        next,
                        0)}
            var prec=c,c=next;
            continue}
           /*<<hashtbl.ml 361 10>>*/ return 0} /*<<hashtbl.ml 374 44>>*/ }
      function find(h,key)
       { /*<<hashtbl.ml 383 20>>*/ var
          /*<<hashtbl.ml 383 20>>*/ _m5_=
           /*<<hashtbl.ml 383 20>>*/ key_index(h,key),
          /*<<hashtbl.ml 383 12>>*/ match=
           /*<<hashtbl.ml 383 12>>*/ caml_check_bound(h[2],_m5_)[1 + _m5_];
         /*<<hashtbl.ml 383 12>>*/ if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
           /*<<hashtbl.ml 386 13>>*/ if
           ( /*<<hashtbl.ml 386 13>>*/ caml_call2(equal,key,k1))
            /*<<hashtbl.ml 386 33>>*/ return d1;
           /*<<hashtbl.ml 387 10>>*/ if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
             /*<<hashtbl.ml 390 17>>*/ if
             ( /*<<hashtbl.ml 390 17>>*/ caml_call2(equal,key,k2))
              /*<<hashtbl.ml 390 37>>*/ return d2;
             /*<<hashtbl.ml 391 14>>*/ if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
               /*<<hashtbl.ml 394 21>>*/ if
               ( /*<<hashtbl.ml 394 21>>*/ caml_call2(equal,key,k3))
                /*<<hashtbl.ml 394 41>>*/ return d3;
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                   /*<<hashtbl.ml 380 13>>*/ if
                   ( /*<<hashtbl.ml 380 13>>*/ caml_call2(equal,key,k))
                    /*<<hashtbl.ml 380 32>>*/ return data;
                  var param=next;
                  continue}
                 /*<<hashtbl.ml 378 10>>*/ throw Not_found}}
             /*<<hashtbl.ml 392 25>>*/ throw Not_found}
           /*<<hashtbl.ml 388 21>>*/ throw Not_found}
         /*<<hashtbl.ml 384 17>>*/ throw Not_found /*<<hashtbl.ml 394 67>>*/ }
      function find_opt(h,key)
       { /*<<hashtbl.ml 403 20>>*/ var
          /*<<hashtbl.ml 403 20>>*/ _m4_=
           /*<<hashtbl.ml 403 20>>*/ key_index(h,key),
          /*<<hashtbl.ml 403 12>>*/ match=
           /*<<hashtbl.ml 403 12>>*/ caml_check_bound(h[2],_m4_)[1 + _m4_];
         /*<<hashtbl.ml 403 12>>*/ if(match)
         {var k1=match[1],d1=match[2],next1=match[3];
           /*<<hashtbl.ml 406 13>>*/ if
           ( /*<<hashtbl.ml 406 13>>*/ caml_call2(equal,key,k1))
            /*<<hashtbl.ml 406 33>>*/ return [0,d1];
           /*<<hashtbl.ml 407 10>>*/ if(next1)
           {var k2=next1[1],d2=next1[2],next2=next1[3];
             /*<<hashtbl.ml 410 17>>*/ if
             ( /*<<hashtbl.ml 410 17>>*/ caml_call2(equal,key,k2))
              /*<<hashtbl.ml 410 37>>*/ return [0,d2];
             /*<<hashtbl.ml 411 14>>*/ if(next2)
             {var k3=next2[1],d3=next2[2],next3=next2[3];
               /*<<hashtbl.ml 414 21>>*/ if
               ( /*<<hashtbl.ml 414 21>>*/ caml_call2(equal,key,k3))
                /*<<hashtbl.ml 414 41>>*/ return [0,d3];
              var param=next3;
              for(;;)
               {if(param)
                 {var k=param[1],data=param[2],next=param[3];
                   /*<<hashtbl.ml 400 13>>*/ if
                   ( /*<<hashtbl.ml 400 13>>*/ caml_call2(equal,key,k))
                    /*<<hashtbl.ml 400 32>>*/ return [0,data];
                  var param=next;
                  continue}
                 /*<<hashtbl.ml 398 10>>*/ return 0}}
             /*<<hashtbl.ml 412 25>>*/ return 0}
           /*<<hashtbl.ml 408 21>>*/ return 0}
         /*<<hashtbl.ml 404 17>>*/ return 0 /*<<hashtbl.ml 414 76>>*/ }
      function find_all(h,key)
       { /*<<hashtbl.ml 417 6>>*/ function find_in_bucket(param)
         { /*<<?>>*/ var param$0=param;
           /*<<hashtbl.ml 417 31>>*/ for(;;)
           { /*<<hashtbl.ml 417 31>>*/ if(param$0)
             {var k=param$0[1],d=param$0[2],next=param$0[3];
               /*<<hashtbl.ml 421 13>>*/ if
               ( /*<<hashtbl.ml 421 13>>*/ caml_call2(equal,k,key))
                /*<<hashtbl.ml 422 20>>*/ return [0,
                       d,
                        /*<<hashtbl.ml 422 20>>*/ find_in_bucket(next)];
              var param$0=next;
              continue}
             /*<<hashtbl.ml 419 10>>*/ return 0} /*<<hashtbl.ml 423 34>>*/ }
         /*<<hashtbl.ml 424 29>>*/  /*<<hashtbl.ml 424 29>>*/ var
         _m3_=
           /*<<hashtbl.ml 424 29>>*/ key_index(h,key);
         /*<<hashtbl.ml 424 21>>*/ return  /*<<hashtbl.ml 424 21>>*/ find_in_bucket
                ( /*<<hashtbl.ml 424 21>>*/ caml_check_bound(h[2],_m3_)
                  [1 + _m3_]) /*<<hashtbl.ml 424 45>>*/ }
      function replace(h,key,data)
       { /*<<hashtbl.ml 435 14>>*/ var
          /*<<hashtbl.ml 435 14>>*/ i=
           /*<<hashtbl.ml 435 14>>*/ key_index(h,key),
          /*<<hashtbl.ml 436 14>>*/ param$0=
           /*<<hashtbl.ml 436 14>>*/ caml_check_bound(h[2],i)[1 + i],
         param=param$0;
        for(;;)
         {if(param)
           {var k=param[1],next=param[3];
             /*<<hashtbl.ml 430 13>>*/ if
             (!  /*<<hashtbl.ml 430 13>>*/ caml_call2(equal,k,key))
             {var param=next;continue}
             /*<<hashtbl.ml 431 15>>*/ param[1] = key;
             /*<<hashtbl.ml 431 15>>*/ param[2] = data;
            var _m0_=0}
          else
           var _m0_=1;
          if(_m0_)
           { /*<<hashtbl.ml 438 8>>*/  /*<<hashtbl.ml 438 8>>*/ caml_check_bound
              (h[2],i)
             [1 + i]
            =
            [0,key,data,param$0];
             /*<<hashtbl.ml 438 8>>*/ h[1] = h[1] + 1 | 0;
             /*<<hashtbl.ml 438 8>>*/  /*<<hashtbl.ml 438 8>>*/ var
             _m1_=
              h[2].length - 1 << 1 < h[1]?1:0;
             /*<<hashtbl.ml 438 8>>*/ if(_m1_)
              /*<<hashtbl.ml 440 51>>*/ return  /*<<hashtbl.ml 440 51>>*/ resize$0
                     (key_index,h);
             /*<<hashtbl.ml 438 8>>*/ var _m2_=_m1_}
          else
           var _m2_=_m0_;
           /*<<hashtbl.ml 417 31>>*/ return _m2_} /*<<hashtbl.ml 441 9>>*/ }
      function mem(h,key)
       { /*<<hashtbl.ml 449 28>>*/ var
          /*<<hashtbl.ml 449 28>>*/ _mZ_=
           /*<<hashtbl.ml 449 28>>*/ key_index(h,key),
          /*<<hashtbl.ml 449 20>>*/ param$0=
           /*<<hashtbl.ml 449 20>>*/ caml_check_bound(h[2],_mZ_)[1 + _mZ_],
         param=param$0;
         /*<<hashtbl.ml 444 30>>*/ for(;;)
         { /*<<hashtbl.ml 444 30>>*/ if(param)
           { /*<<hashtbl.ml 448 10>>*/ var
             k=param[1],
             next=param[3],
              /*<<hashtbl.ml 448 10>>*/ _mY_=
               /*<<hashtbl.ml 448 10>>*/ caml_call2(equal,k,key);
             /*<<hashtbl.ml 448 10>>*/ if(_mY_)
              /*<<hashtbl.ml 446 10>>*/ return _mY_;
             /*<<hashtbl.ml 448 10>>*/ var param=next;
            continue}
           /*<<hashtbl.ml 446 10>>*/ return 0} /*<<hashtbl.ml 449 44>>*/ }
      function add_seq(tbl,i)
       { /*<<hashtbl.ml 452 6>>*/ return  /*<<hashtbl.ml 452 6>>*/ iter
                (function(param)
                  { /*<<hashtbl.ml 452 15>>*/ var
                     /*<<hashtbl.ml 452 15>>*/ v=param[2],
                     /*<<hashtbl.ml 452 15>>*/ k=param[1];
                    /*<<hashtbl.ml 452 15>>*/ return  /*<<hashtbl.ml 452 15>>*/ add
                           (tbl,k,v) /*<<hashtbl.ml 452 41>>*/ },
                 i) /*<<hashtbl.ml 452 43>>*/ }
      function replace_seq(tbl,i)
       { /*<<hashtbl.ml 455 6>>*/ return  /*<<hashtbl.ml 455 6>>*/ iter
                (function(param)
                  { /*<<hashtbl.ml 455 15>>*/ var
                     /*<<hashtbl.ml 455 15>>*/ v=param[2],
                     /*<<hashtbl.ml 455 15>>*/ k=param[1];
                    /*<<hashtbl.ml 455 15>>*/ return  /*<<hashtbl.ml 455 15>>*/ replace
                           (tbl,k,v) /*<<hashtbl.ml 455 45>>*/ },
                 i) /*<<hashtbl.ml 455 47>>*/ }
      function create(sz)
       { /*<<hashtbl.ml 479 20>>*/ return  /*<<hashtbl.ml 479 20>>*/ create$1
                (_bB_,sz) /*<<hashtbl.ml 479 43>>*/ }
      function of_seq(i)
       { /*<<hashtbl.ml 481 16>>*/  /*<<hashtbl.ml 481 16>>*/ var
         tbl=
           /*<<hashtbl.ml 481 16>>*/ create(16);
         /*<<hashtbl.ml 482 6>>*/  /*<<hashtbl.ml 482 6>>*/ replace_seq(tbl,i);
         /*<<hashtbl.ml 482 6>>*/ return tbl /*<<hashtbl.ml 483 9>>*/ }
      return [0,
              create,
              clear$1,
              reset,
              copy$0,
              add,
              remove,
              find,
              find_opt,
              find_all,
              replace,
              mem,
              iter$1,
              filter_map_inplace,
              fold,
              length,
              stats,
              to_seq,
              to_seq_keys,
              to_seq_values,
              add_seq,
              replace_seq,
              of_seq]}
     /*<<hashtbl.ml 53 2>>*/ function hash(x)
     { /*<<hashtbl.ml 495 13>>*/ return  /*<<hashtbl.ml 495 13>>*/ caml_hash
              (10,100,0,x) /*<<hashtbl.ml 495 41>>*/ }
    var String_tag=[248,_bC_,caml_fresh_oo_id(0)],size=0,unknown=-1;
    function pp_enqueue(state,token)
     { /*<<format.ml 219 2>>*/ state[13] = state[13] + token[3] | 0;
       /*<<format.ml 219 2>>*/ return  /*<<format.ml 219 2>>*/ add
              (token,state[28]) /*<<format.ml 220 32>>*/ }
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     { /*<<format.ml 251 31>>*/ return  /*<<format.ml 251 31>>*/ caml_call3
              (state[17],
               s,
               0,
                /*<<format.ml 251 31>>*/ caml_ml_string_length(s)) /*<<format.ml 251 72>>*/ }
    function pp_output_newline(state)
     { /*<<format.ml 252 30>>*/ return  /*<<format.ml 252 30>>*/ caml_call1
              (state[19],0) /*<<format.ml 252 53>>*/ }
    function format_pp_text(state,size,text)
     { /*<<format.ml 258 2>>*/ state[9] = state[9] - size | 0;
       /*<<format.ml 259 2>>*/  /*<<format.ml 259 2>>*/ pp_output_string
       (state,text);
       /*<<format.ml 259 2>>*/ state[11] = 0;
       /*<<format.ml 259 2>>*/ return 0 /*<<format.ml 260 31>>*/ }
    function format_string(state,s)
     { /*<<format.ml 264 5>>*/  /*<<format.ml 264 5>>*/ var
       _mX_=
         /*<<format.ml 264 5>>*/ caml_string_notequal(s,_bD_);
       /*<<format.ml 264 5>>*/ return _mX_
              ? /*<<format.ml 264 18>>*/ format_pp_text
                (state, /*<<format.ml 264 18>>*/ caml_ml_string_length(s),s)
              :_mX_ /*<<format.ml 264 58>>*/ }
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
       /*<<format.ml 268 2>>*/  /*<<format.ml 268 2>>*/ format_string
       (state,before);
       /*<<format.ml 269 2>>*/  /*<<format.ml 269 2>>*/ pp_output_newline
       (state);
       /*<<format.ml 269 2>>*/ state[11] = 1;
       /*<<format.ml 269 2>>*/ var
        /*<<format.ml 269 2>>*/ indent=(state[6] - width | 0) + offset | 0,
        /*<<format.ml 273 20>>*/ real_indent=
         /*<<format.ml 273 20>>*/ min(state[8],indent);
       /*<<format.ml 273 20>>*/ state[10] = real_indent;
       /*<<format.ml 273 20>>*/ state[9] = state[6] - state[10] | 0;
       /*<<format.ml 254 31>>*/  /*<<format.ml 254 31>>*/ caml_call1
       (state[21],state[10]);
      return format_string(state,after)}
    function break_line(state,width)
     { /*<<format.ml 281 29>>*/ return  /*<<format.ml 281 29>>*/ break_new_line
              (state,_bE_,width) /*<<format.ml 281 67>>*/ }
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
       /*<<format.ml 285 2>>*/  /*<<format.ml 285 2>>*/ format_string
       (state,before);
       /*<<format.ml 285 2>>*/ state[9] = state[9] - width | 0;
       /*<<format.ml 253 31>>*/  /*<<format.ml 253 31>>*/ caml_call1
       (state[20],width);
      return format_string(state,after)}
    function advance_left(state)
     { /*<<format.ml 431 2>>*/ for(;;)
       { /*<<queue.ml 64 2>>*/  /*<<queue.ml 64 2>>*/ var _mN_=state[28][2];
         /*<<queue.ml 64 2>>*/ if(_mN_)
          /*<<queue.ml 66 24>>*/ var
           /*<<queue.ml 66 24>>*/ content=_mN_[1],
          match$12=[0,content];
        else
         var match$12=0;
        if(match$12)
         { /*<<format.ml 435 7>>*/ var
           match$13=match$12[1],
           size$0=match$13[1],
           length$0=match$13[3],
           token=match$13[2],
           pending_count=state[13] - state[12] | 0,
            /*<<format.ml 435 7>>*/ _mU_=0 <= size$0?1:0,
            /*<<format.ml 435 7>>*/ _mV_=
            _mU_
            ||
            (state[9] <= pending_count?1:0);
           /*<<format.ml 435 71>>*/ if(_mV_)
           { /*<<format.ml 435 71>>*/ var
              /*<<format.ml 435 71>>*/ _mW_=state[28],
              /*<<queue.ml 72 2>>*/ _mO_=_mW_[2];
             /*<<queue.ml 72 2>>*/ if(_mO_)
             {if(_mO_[2])
               {var next=_mO_[2];_mW_[1] = _mW_[1] - 1 | 0;_mW_[2] = next}
              else
                /*<<queue.ml 75 4>>*/  /*<<queue.ml 75 4>>*/ clear$0(_mW_);
               /*<<format.ml 437 20>>*/  /*<<format.ml 437 20>>*/ var
               size$1=
                0 <= size$0?size$0:pp_infinity;
              if(typeof token === "number")
               switch(token)
                {case 0:
                   /*<<format.ml 348 16>>*/  /*<<format.ml 348 16>>*/ var
                   match$3=
                     /*<<format.ml 348 16>>*/ top_opt(state[3]);
                   /*<<format.ml 348 16>>*/ if(match$3)
                   {var
                     match$4=match$3[1],
                     tabs=match$4[1],
                     add_tab=
                      function(n,ls)
                       { /*<<?>>*/ if(ls)
                         {var l=ls[2],x=ls[1];
                           /*<<format.ml 353 29>>*/ return  /*<<format.ml 353 29>>*/ caml_lessthan
                                   (n,x)
                                  ?[0,n,ls]
                                  :[0,x, /*<<format.ml 353 58>>*/ add_tab(n,l)]}
                         /*<<format.ml 352 16>>*/ return [0,n,0]};
                     /*<<format.ml 354 14>>*/ tabs[1]
                    =
                     /*<<format.ml 354 14>>*/ add_tab
                     (state[6] - state[9] | 0,tabs[1])}
                  break;
                 case 1:
                   /*<<format.ml 339 4>>*/  /*<<format.ml 339 4>>*/ pop_opt
                   (state[2]);
                  break;
                 case 2:
                   /*<<format.ml 345 4>>*/  /*<<format.ml 345 4>>*/ pop_opt
                   (state[3]);
                  break;
                 case 3:
                   /*<<format.ml 378 16>>*/  /*<<format.ml 378 16>>*/ var
                   match$5=
                     /*<<format.ml 378 16>>*/ top_opt(state[2]);
                   /*<<format.ml 378 16>>*/ if(match$5)
                   {var match$6=match$5[1],width$0=match$6[2];
                    break_line(state,width$0)}
                  else
                    /*<<format.ml 379 14>>*/  /*<<format.ml 379 14>>*/ pp_output_newline
                    (state);
                  break;
                 case 4:
                   /*<<format.ml 384 4>>*/ if
                   (state[10] !== (state[6] - state[9] | 0))
                   { /*<<format.ml 306 2>>*/ var
                      /*<<format.ml 306 2>>*/ _mR_=state[28],
                      /*<<queue.ml 83 2>>*/ _mP_=_mR_[2];
                     /*<<queue.ml 83 2>>*/ if(_mP_)
                     {var _mQ_=_mP_[1];
                      if(_mP_[2])
                       {var next$0=_mP_[2];
                        _mR_[1] = _mR_[1] - 1 | 0;
                        _mR_[2] = next$0;
                        var match$1=[0,_mQ_]}
                      else
                       { /*<<queue.ml 86 4>>*/  /*<<queue.ml 86 4>>*/ clear$0(_mR_);
                        var match$1=[0,_mQ_]}}
                    else
                     var match$1=0;
                    if(match$1)
                     {var match$2=match$1[1],size=match$2[1],length=match$2[3];
                      state[12] = state[12] - length | 0;
                      state[9] = state[9] + size | 0}}
                  break;
                 default:
                   /*<<format.ml 419 17>>*/  /*<<format.ml 419 17>>*/ var
                   match$7=
                     /*<<format.ml 419 17>>*/ pop_opt(state[5]);
                   /*<<format.ml 419 17>>*/ if(match$7)
                   { /*<<format.ml 422 7>>*/ var
                      /*<<format.ml 422 7>>*/ tag_name=match$7[1],
                      /*<<format.ml 422 20>>*/ marker=
                       /*<<format.ml 422 20>>*/ caml_call1(state[25],tag_name);
                     /*<<format.ml 422 20>>*/  /*<<format.ml 422 20>>*/ pp_output_string
                     (state,marker)}}
              else
               switch(token[0])
                {case 0:
                   /*<<format.ml 323 4>>*/  /*<<format.ml 323 4>>*/ var
                   s=
                    token[1];
                   /*<<format.ml 323 4>>*/  /*<<format.ml 323 4>>*/ format_pp_text
                   (state,size$1,s);
                  break;
                 case 1:
                   /*<<format.ml 389 16>>*/ var
                   breaks=token[2],
                   fits=token[1],
                   off=breaks[2],
                   before=breaks[1],
                    /*<<format.ml 389 16>>*/ match$8=
                     /*<<format.ml 389 16>>*/ top_opt(state[2]);
                   /*<<format.ml 389 16>>*/ if(match$8)
                   {var
                     match$9=match$8[1],
                     width$1=match$9[2],
                     box_type$0=match$9[1];
                    switch(box_type$0)
                     {case 0:
                        /*<<format.ml 409 19>>*/  /*<<format.ml 409 19>>*/ break_same_line
                        (state,fits);
                       break;
                      case 1:
                        /*<<format.ml 408 19>>*/  /*<<format.ml 408 19>>*/ break_new_line
                        (state,breaks,width$1);
                       break;
                      case 2:
                        /*<<format.ml 406 20>>*/  /*<<format.ml 406 20>>*/ break_new_line
                        (state,breaks,width$1);
                       break;
                      case 3:
                        /*<<format.ml 394 8>>*/ if
                        (state[9]
                         <
                         (size$1
                          +
                           /*<<format.ml 394 8>>*/ caml_ml_string_length(before)
                          |
                          0))
                         /*<<format.ml 395 13>>*/  /*<<format.ml 395 13>>*/ break_new_line
                         (state,breaks,width$1);
                       else
                         /*<<format.ml 396 13>>*/  /*<<format.ml 396 13>>*/ break_same_line
                         (state,fits);
                       break;
                      case 4:
                        /*<<format.ml 399 8>>*/ if(state[11])
                         /*<<format.ml 399 37>>*/  /*<<format.ml 399 37>>*/ break_same_line
                         (state,fits);
                       else
                         /*<<format.ml 400 8>>*/ if
                         (state[9]
                          <
                          (size$1
                           +
                            /*<<format.ml 400 8>>*/ caml_ml_string_length(before)
                           |
                           0))
                          /*<<format.ml 401 15>>*/  /*<<format.ml 401 15>>*/ break_new_line
                          (state,breaks,width$1);
                        else
                          /*<<format.ml 403 8>>*/ if
                          (((state[6] - width$1 | 0) + off | 0) < state[10])
                           /*<<format.ml 404 13>>*/  /*<<format.ml 404 13>>*/ break_new_line
                           (state,breaks,width$1);
                         else
                           /*<<format.ml 405 13>>*/  /*<<format.ml 405 13>>*/ break_same_line
                           (state,fits);
                       break;
                      default:
                        /*<<format.ml 407 19>>*/  /*<<format.ml 407 19>>*/ break_same_line
                        (state,fits)}}
                  break;
                 case 2:
                   /*<<format.ml 359 16>>*/ var
                   off$0=token[2],
                   n=token[1],
                   insertion_point=state[6] - state[9] | 0,
                    /*<<format.ml 359 16>>*/ match$10=
                     /*<<format.ml 359 16>>*/ top_opt(state[3]);
                   /*<<format.ml 359 16>>*/ if(match$10)
                   {var match$11=match$10[1],tabs$0=match$11[1],_mS_=tabs$0[1];
                    if(_mS_)
                     { /*<<format.ml 366 10>>*/ var
                        /*<<format.ml 366 10>>*/ first=_mS_[1],
                       param=tabs$0[1];
                       /*<<format.ml 366 25>>*/ for(;;)
                       { /*<<format.ml 366 25>>*/ if(param)
                         {var tail=param[2],head=param[1];
                          if(! (insertion_point <= head)){var param=tail;continue}
                          var _mT_=head}
                        else
                         var _mT_=first;
                        var tab=_mT_;
                        break}}
                    else
                     var tab=insertion_point;
                     /*<<format.ml 371 6>>*/  /*<<format.ml 371 6>>*/ var
                     offset=
                      tab - insertion_point | 0;
                     /*<<format.ml 371 6>>*/ if(0 <= offset)
                      /*<<format.ml 373 11>>*/  /*<<format.ml 373 11>>*/ break_same_line
                      (state,[0,_bG_,offset + n | 0,_bF_]);
                    else
                      /*<<format.ml 374 11>>*/  /*<<format.ml 374 11>>*/ break_new_line
                      (state,[0,_bI_,tab + off$0 | 0,_bH_],state[6])}
                  break;
                 case 3:
                  var
                   ty=token[2],
                   off$1=token[1],
                   insertion_point$0=state[6] - state[9] | 0;
                  if(state[8] < insertion_point$0)
                   { /*<<format.ml 295 8>>*/  /*<<format.ml 295 8>>*/ var
                     match=
                       /*<<format.ml 295 8>>*/ top_opt(state[2]);
                     /*<<format.ml 295 8>>*/ if(match)
                     {var match$0=match[1],width=match$0[2],box_type=match$0[1];
                      if(state[9] < width)
                       { /*<<format.ml 299 6>>*/  /*<<format.ml 299 6>>*/ var
                         switcher=
                          box_type - 1 | 0;
                         /*<<format.ml 299 6>>*/ if(! (3 < switcher >>> 0))
                          /*<<format.ml 301 51>>*/  /*<<format.ml 301 51>>*/ break_line
                          (state,width)}}
                    else
                      /*<<format.ml 296 12>>*/  /*<<format.ml 296 12>>*/ pp_output_newline
                      (state)}
                   /*<<format.ml 329 41>>*/ var
                    /*<<format.ml 329 41>>*/ width$2=state[9] - off$1 | 0,
                    /*<<format.ml 329 41>>*/ box_type$1=
                    1 === ty?1:state[9] < size$1?ty:5;
                   /*<<format.ml 336 4>>*/  /*<<format.ml 336 4>>*/ push
                   ([0,box_type$1,width$2],state[2]);
                  break;
                 case 4:
                   /*<<format.ml 342 4>>*/  /*<<format.ml 342 4>>*/ var
                   tbox=
                    token[1];
                   /*<<format.ml 342 4>>*/  /*<<format.ml 342 4>>*/ push
                   (tbox,state[3]);
                  break;
                 default:
                   /*<<format.ml 414 5>>*/ var
                    /*<<format.ml 414 5>>*/ tag_name$0=token[1],
                    /*<<format.ml 414 18>>*/ marker$0=
                     /*<<format.ml 414 18>>*/ caml_call1(state[24],tag_name$0);
                   /*<<format.ml 415 5>>*/  /*<<format.ml 415 5>>*/ pp_output_string
                   (state,marker$0);
                   /*<<format.ml 415 5>>*/  /*<<format.ml 415 5>>*/ push
                   (tag_name$0,state[5])}
              state[12] = length$0 + state[12] | 0;
              continue}
             /*<<queue.ml 73 11>>*/ throw Empty}
           /*<<format.ml 432 12>>*/ return _mV_}
         /*<<format.ml 432 12>>*/ return 0} /*<<format.ml 441 7>>*/ }
    function initialize_scan_stack(stack)
     { /*<<format.ml 462 2>>*/  /*<<format.ml 462 2>>*/ clear(stack);
       /*<<format.ml 462 2>>*/  /*<<format.ml 462 2>>*/ var
       queue_elem=
        [0,unknown,_bJ_,0];
       /*<<format.ml 462 2>>*/ return  /*<<format.ml 462 2>>*/ push
              ([0,-1,queue_elem],stack) /*<<format.ml 464 50>>*/ }
    function set_size(state,ty)
     { /*<<format.ml 476 8>>*/  /*<<format.ml 476 8>>*/ var
       match=
         /*<<format.ml 476 8>>*/ top_opt(state[1]);
       /*<<format.ml 476 8>>*/ if(match)
       {var
         match$0=match[1],
         queue_elem=match$0[2],
         left_total=match$0[1],
         _mK_=queue_elem[1];
        if(left_total < state[12])
          /*<<format.ml 482 6>>*/ return  /*<<format.ml 482 6>>*/ initialize_scan_stack
                 (state[1]);
         /*<<format.ml 484 6>>*/  /*<<format.ml 484 6>>*/ var
         _mL_=
          queue_elem[2];
         /*<<format.ml 484 6>>*/ if(typeof _mL_ !== "number")
          /*<<format.ml 484 6>>*/ switch(_mL_[0])
          {case 3:
             /*<<format.ml 491 8>>*/  /*<<format.ml 491 8>>*/ var _mM_=1 - ty;
             /*<<format.ml 491 8>>*/ return _mM_
                    ?(queue_elem[1]
                      =
                      state[13]
                      +
                      _mK_
                      |
                      0,
                       /*<<format.ml 493 10>>*/ pop_opt(state[1]),
                      0)
                    :_mM_;
           case 1:
           case 2:
             /*<<format.ml 486 8>>*/ return ty
                    ?(queue_elem[1]
                      =
                      state[13]
                      +
                      _mK_
                      |
                      0,
                       /*<<format.ml 488 10>>*/ pop_opt(state[1]),
                      0)
                    :ty
           }
         /*<<format.ml 497 8>>*/ return 0}
       /*<<format.ml 477 12>>*/ return 0 /*<<format.ml 497 10>>*/ }
    function pp_print_flush(state,param)
     { /*<<format.ml 606 2>>*/  /*<<format.ml 606 2>>*/ var _mH_=state[4];
       /*<<format.ml 606 2>>*/ function f(param)
       { /*<<format.ml 552 2>>*/ if(state[23])
          /*<<format.ml 553 4>>*/  /*<<format.ml 553 4>>*/ pp_enqueue
          (state,[0,size,5,0]);
         /*<<format.ml 553 75>>*/  /*<<format.ml 553 75>>*/ var
         _mI_=
          state[22];
         /*<<format.ml 553 75>>*/ if(_mI_)
         { /*<<format.ml 555 10>>*/  /*<<format.ml 555 10>>*/ var
           match=
             /*<<format.ml 555 10>>*/ pop_opt(state[4]);
           /*<<format.ml 555 10>>*/ if(match)
           { /*<<format.ml 558 6>>*/  /*<<format.ml 558 6>>*/ var
             tag_name=
              match[1];
             /*<<format.ml 558 6>>*/ return  /*<<format.ml 558 6>>*/ caml_call1
                    (state[27],tag_name)}
           /*<<format.ml 555 10>>*/ var _mJ_=0}
        else
         var _mJ_=_mI_;
        return _mJ_ /*<<format.ml 606 44>>*/ }
       /*<<stack.ml 52 15>>*/  /*<<stack.ml 52 15>>*/ iter$0(f,_mH_[1]);
       /*<<format.ml 613 25>>*/ for(;;)
       { /*<<format.ml 613 25>>*/ if(1 < state[14])
         { /*<<format.ml 527 2>>*/ if(1 < state[14])
           { /*<<format.ml 528 2>>*/ if(state[14] < state[15])
             { /*<<format.ml 531 6>>*/  /*<<format.ml 531 6>>*/ pp_enqueue
               (state,[0,size,1,0]);
               /*<<format.ml 532 6>>*/  /*<<format.ml 532 6>>*/ set_size
               (state,1);
               /*<<format.ml 532 27>>*/  /*<<format.ml 532 27>>*/ set_size
               (state,0)}
             /*<<format.ml 532 47>>*/ state[14] = state[14] - 1 | 0}
          continue}
         /*<<format.ml 615 2>>*/ state[13] = pp_infinity;
         /*<<format.ml 616 2>>*/  /*<<format.ml 616 2>>*/ advance_left(state);
         /*<<format.ml 224 2>>*/ state[12] = 1;
         /*<<format.ml 224 2>>*/ state[13] = 1;
         /*<<format.ml 224 2>>*/  /*<<format.ml 224 2>>*/ clear$0(state[28]);
         /*<<format.ml 595 2>>*/  /*<<format.ml 595 2>>*/ initialize_scan_stack
         (state[1]);
         /*<<format.ml 596 2>>*/  /*<<format.ml 596 2>>*/ clear(state[2]);
         /*<<format.ml 597 2>>*/  /*<<format.ml 597 2>>*/ clear(state[3]);
         /*<<format.ml 598 2>>*/  /*<<format.ml 598 2>>*/ clear(state[4]);
         /*<<format.ml 599 2>>*/  /*<<format.ml 599 2>>*/ clear(state[5]);
         /*<<format.ml 599 2>>*/ state[10] = 0;
         /*<<format.ml 599 2>>*/ state[14] = 0;
         /*<<format.ml 599 2>>*/ state[9] = state[6];
         /*<<format.ml 513 2>>*/ state[14] = state[14] + 1 | 0;
         /*<<format.ml 523 28>>*/ var
          /*<<format.ml 523 28>>*/ br_ty=3,
          /*<<format.ml 523 28>>*/ indent=0;
         /*<<format.ml 513 2>>*/ if(state[14] < state[15])
         { /*<<format.ml 515 4>>*/ var
            /*<<format.ml 515 4>>*/ size$1=- state[13] | 0,
           token=[0,size$1,[3,indent,br_ty],0];
           /*<<format.ml 503 2>>*/  /*<<format.ml 503 2>>*/ pp_enqueue
           (state,token);
           /*<<format.ml 515 4>>*/  /*<<format.ml 504 31>>*/ var
           elem=
            [0,state[13],token];
           /*<<format.ml 504 31>>*/  /*<<format.ml 504 31>>*/ push
           (elem,state[1])}
        else
          /*<<format.ml 518 2>>*/ if(state[14] === state[15])
          { /*<<format.ml 519 7>>*/ var
             /*<<format.ml 519 7>>*/ _mG_=state[16],
             /*<<format.ml 454 2>>*/ size$0=
              /*<<format.ml 454 2>>*/ caml_ml_string_length(_mG_),
            tok=[0,size$0,[0,_mG_],size$0];
            /*<<format.ml 445 32>>*/  /*<<format.ml 445 32>>*/ pp_enqueue
            (state,tok);
            /*<<format.ml 445 32>>*/  /*<<format.ml 445 32>>*/ advance_left
            (state)}
        return caml_call1(state[18],0)} /*<<format.ml 674 51>>*/ }
     /*<<format.ml 895 17>>*/  /*<<format.ml 895 17>>*/ var
     blank_line=
       /*<<format.ml 895 17>>*/ make$0(80,32);
     /*<<format.ml 895 17>>*/ function display_indent(state,n)
     { /*<<?>>*/ var n$0=n;
       /*<<format.ml 897 2>>*/ for(;;)
       { /*<<format.ml 897 2>>*/  /*<<format.ml 897 2>>*/ var
         _mF_=
          0 < n$0?1:0;
         /*<<format.ml 897 2>>*/ if(_mF_)
         { /*<<format.ml 898 2>>*/ if(80 < n$0)
           { /*<<format.ml 900 4>>*/  /*<<format.ml 900 4>>*/ caml_call3
             (state[17],blank_line,0,80);
             /*<<format.ml 900 4>>*/ var
              /*<<format.ml 900 4>>*/ n$1=n$0 - 80 | 0,
             n$0=n$1;
            continue}
           /*<<format.ml 898 18>>*/ return  /*<<format.ml 898 18>>*/ caml_call3
                  (state[17],blank_line,0,n$0)}
        return _mF_} /*<<format.ml 902 5>>*/ }
     /*<<format.ml 895 17>>*/ function default_pp_mark_open_tag(param)
     { /*<<format.ml 923 31>>*/ if(param[1] === String_tag)
       {var s=param[2];
         /*<<format.ml 924 26>>*/ return  /*<<format.ml 924 26>>*/ symbol
                (_bM_, /*<<format.ml 924 26>>*/ symbol(s,_bL_))}
       /*<<format.ml 925 9>>*/ return _bN_ /*<<format.ml 925 11>>*/ }
     /*<<format.ml 895 17>>*/ function default_pp_mark_close_tag(param)
     { /*<<format.ml 926 32>>*/ if(param[1] === String_tag)
       {var s=param[2];
         /*<<format.ml 927 27>>*/ return  /*<<format.ml 927 27>>*/ symbol
                (_bP_, /*<<format.ml 927 27>>*/ symbol(s,_bO_))}
       /*<<format.ml 928 9>>*/ return _bQ_ /*<<format.ml 928 11>>*/ }
     /*<<format.ml 895 17>>*/ function default_pp_print_open_tag(_mE_)
     { /*<<?>>*/ return 0}
     /*<<format.ml 895 17>>*/ function default_pp_print_close_tag(_mD_)
     { /*<<?>>*/ return 0}
     /*<<format.ml 895 17>>*/ function make_formatter(output,flush)
     { /*<<format.ml 991 2>>*/ function j(_mC_){ /*<<?>>*/ return 0}
       /*<<format.ml 991 2>>*/ function i(_mB_){ /*<<?>>*/ return 0}
       /*<<format.ml 991 2>>*/ function h(_mA_){ /*<<?>>*/ return 0}
       /*<<queue.ml 29 16>>*/ var
        /*<<queue.ml 29 16>>*/ pp_queue=[0,0,0,0],
       sys_tok=[0,unknown,_bR_,0];
       /*<<format.ml 940 2>>*/  /*<<format.ml 940 2>>*/ add(sys_tok,pp_queue);
       /*<<queue.ml 29 16>>*/  /*<<format.ml 941 19>>*/ var
       scan_stack=
         /*<<format.ml 941 19>>*/ create(0);
       /*<<format.ml 942 2>>*/  /*<<format.ml 942 2>>*/ initialize_scan_stack
       (scan_stack);
       /*<<format.ml 943 2>>*/  /*<<format.ml 943 2>>*/ push
       ([0,1,sys_tok],scan_stack);
       /*<<queue.ml 29 16>>*/ var
        /*<<format.ml 951 20>>*/ _mu_= /*<<format.ml 951 20>>*/ create(0),
        /*<<format.ml 950 19>>*/ _mv_= /*<<format.ml 950 19>>*/ create(0),
        /*<<format.ml 949 20>>*/ _mw_= /*<<format.ml 949 20>>*/ create(0),
        /*<<format.ml 948 22>>*/ ppf=
        [0,
         scan_stack,
          /*<<format.ml 948 22>>*/ create(0),
         _mw_,
         _mv_,
         _mu_,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         max_int,
         _bS_,
         output,
         flush,
         h,
         i,
         j,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_queue];
       /*<<format.ml 992 24>>*/ ppf[19]
      =
      function(_mz_)
       { /*<<format.ml 892 31>>*/ return  /*<<format.ml 892 31>>*/ caml_call3
                (ppf[17],_bK_,0,1)};
       /*<<format.ml 993 23>>*/ ppf[20]
      =
      function(_my_){ /*<<?>>*/ return display_indent(ppf,_my_)};
       /*<<format.ml 994 23>>*/ ppf[21]
      =
      function(_mx_){ /*<<?>>*/ return display_indent(ppf,_mx_)};
       /*<<format.ml 994 23>>*/ return ppf /*<<format.ml 995 5>>*/ }
     /*<<format.ml 895 17>>*/ function formatter_of_out_channel(oc)
     { /*<<format.ml 1000 2>>*/ function _mt_(param)
       { /*<<format.ml 1000 50>>*/ return  /*<<format.ml 1000 50>>*/ caml_ml_flush
                (oc) /*<<format.ml 1000 58>>*/ }
       /*<<format.ml 1000 17>>*/ return  /*<<format.ml 1000 17>>*/ make_formatter
              (function(s,ofs,len)
                { /*<<?>>*/ if
                  (0
                   <=
                   ofs
                   &&
                   0
                   <=
                   len
                   &&
                   !
                   ((caml_ml_string_length(s) - len | 0) < ofs))
                   /*<<stdlib.ml 372 7>>*/ return  /*<<stdlib.ml 372 7>>*/ caml_ml_output
                          (oc,s,ofs,len);
                  /*<<stdlib.ml 371 7>>*/ return  /*<<stdlib.ml 371 7>>*/ invalid_arg
                         (_g_)},
               _mt_) /*<<format.ml 1000 59>>*/ }
     /*<<format.ml 895 17>>*/ function formatter_of_buffer(b)
     { /*<<format.ml 1005 2>>*/ function _mo_(_ms_){ /*<<?>>*/ return 0}
       /*<<format.ml 1005 17>>*/ return  /*<<format.ml 1005 17>>*/ make_formatter
              (function(s,offset,len)
                { /*<<buffer.ml 216 2>>*/  /*<<buffer.ml 216 2>>*/ var
                  _mp_=
                   offset < 0?1:0;
                  /*<<buffer.ml 216 2>>*/ if(_mp_)
                  var _mq_=_mp_;
                 else
                  var
                   _mr_=len < 0?1:0,
                   _mq_=
                    _mr_
                    ||
                    ((caml_ml_string_length(s) - len | 0) < offset?1:0);
                  /*<<buffer.ml 217 7>>*/ if(_mq_)
                   /*<<buffer.ml 217 7>>*/  /*<<buffer.ml 217 7>>*/ invalid_arg
                   (_D_);
                  /*<<buffer.ml 216 2>>*/  /*<<buffer.ml 217 54>>*/ var
                  new_position=
                   b[2] + len | 0;
                  /*<<buffer.ml 217 54>>*/ if(b[3] < new_position)
                   /*<<buffer.ml 219 34>>*/  /*<<buffer.ml 219 34>>*/ resize
                   (b,len);
                  /*<<buffer.ml 220 2>>*/  /*<<buffer.ml 220 2>>*/ caml_blit_string
                  (s,offset,b[1],b[2],len);
                  /*<<buffer.ml 220 2>>*/ b[2] = new_position;
                  /*<<buffer.ml 220 2>>*/ return 0},
               _mo_) /*<<format.ml 1005 48>>*/ }
     /*<<format.ml 895 17>>*/  /*<<format.ml 895 17>>*/ var
     pp_buffer_size=
      512;
     /*<<format.ml 895 17>>*/ function pp_make_buffer(param)
     { /*<<format.ml 1012 24>>*/ return  /*<<format.ml 1012 24>>*/ create$0
              (pp_buffer_size) /*<<format.ml 1012 52>>*/ }
     /*<<format.ml 1015 13>>*/ var
      /*<<format.ml 1015 13>>*/ stdbuf=
       /*<<format.ml 1015 13>>*/ pp_make_buffer(0),
      /*<<format.ml 1019 20>>*/ std_formatter=
       /*<<format.ml 1019 20>>*/ formatter_of_out_channel(stdout),
      /*<<format.ml 1020 20>>*/ err_formatter=
       /*<<format.ml 1020 20>>*/ formatter_of_out_channel(oc);
     /*<<format.ml 1021 20>>*/  /*<<format.ml 1021 20>>*/ formatter_of_buffer
     (stdbuf);
     /*<<format.ml 1180 2>>*/ function flush_standard_formatters(param)
     { /*<<format.ml 1378 2>>*/  /*<<format.ml 1378 2>>*/ pp_print_flush
       (std_formatter,0);
       /*<<format.ml 1378 2>>*/ return  /*<<format.ml 1378 2>>*/ pp_print_flush
              (err_formatter,0) /*<<format.ml 1379 33>>*/ }
     /*<<format.ml 1381 9>>*/  /*<<format.ml 1381 9>>*/ at_exit
     (flush_standard_formatters);
    function register_exception(name,exn)
     { /*<<callback.ml 26 16>>*/  /*<<callback.ml 26 16>>*/ var
       slot=
         /*<<callback.ml 26 16>>*/ caml_obj_tag(exn) === 248?exn:exn[1];
       /*<<callback.ml 27 2>>*/ return  /*<<callback.ml 27 2>>*/ caml_register_named_value
              (name,slot) /*<<callback.ml 27 32>>*/ }
    try
     { /*<<filename.ml 119 8>>*/  /*<<filename.ml 119 8>>*/ caml_sys_getenv
       (_hx_)}
    catch(_mn_)
     {_mn_ = caml_wrap_exception(_mn_);if(_mn_ !== Not_found)throw _mn_}
     /*<<filename.ml 129 16>>*/ try
     { /*<<filename.ml 167 8>>*/  /*<<filename.ml 167 8>>*/ caml_sys_getenv
       (_hw_)}
    catch(_mm_)
     {_mm_ = caml_wrap_exception(_mm_);if(_mm_ !== Not_found)throw _mm_}
     /*<<filename.ml 280 16>>*/ if
     ( /*<<filename.ml 280 16>>*/ caml_string_notequal(os_type,_bT_))
     caml_string_notequal(os_type,_bU_);
    caml_fresh_oo_id(0);
    var c=[0,0],r=[0,-1];
    for(;;)
     {if(0 === r[1])
       { /*<<src/bi_outbuf.ml 80 20>>*/ var
         equal=
          function(param,_mj_)
           {var
             t2=_mj_[2],
             x2=_mj_[1],
             t1=param[2],
             x1=param[1],
             _mk_=x1 === x2?1:0,
             _ml_=_mk_?t1 === t2?1:0:_mk_;
             /*<<src/bi_share.ml 8 4>>*/ return _ml_},
         H=Make([0,equal,hash]),
         create$2=H[1],
         really_extend=
          function(b,n)
           { /*<<src/bi_outbuf.ml 13 2>>*/ var
              /*<<src/bi_outbuf.ml 13 2>>*/ slen0=b[2],
              /*<<src/bi_outbuf.ml 13 2>>*/ reqlen=b[3] + n | 0,
              /*<<src/bi_outbuf.ml 16 12>>*/ x=
               /*<<src/bi_outbuf.ml 16 12>>*/ max(reqlen,2 * slen0 | 0),
              /*<<src/bi_outbuf.ml 16 12>>*/ slen=
              x <= max_string_length
               ?x
               :max_string_length < reqlen
                 ? /*<<src/bi_outbuf.ml 20 1>>*/ invalid_arg(_bV_)
                 :max_string_length,
              /*<<src/bi_outbuf.ml 24 2>>*/ s=
               /*<<src/bi_outbuf.ml 24 2>>*/ caml_create_bytes(slen);
             /*<<src/bi_outbuf.ml 25 2>>*/  /*<<src/bi_outbuf.ml 25 2>>*/ blit
             (b[1],0,s,0,b[3]);
             /*<<src/bi_outbuf.ml 25 2>>*/ b[1] = s;
             /*<<src/bi_outbuf.ml 25 2>>*/ b[2] = slen;
             /*<<src/bi_outbuf.ml 25 2>>*/ return 0 /*<<src/bi_outbuf.ml 27 21>>*/ },
         create$3=
          function(opt,_mi_,n)
           { /*<<src/bi_outbuf.ml 39 59>>*/ if(opt)
              /*<<src/bi_outbuf.ml 39 25>>*/ var
               /*<<src/bi_outbuf.ml 39 25>>*/ sth=opt[1],
              make_room=sth;
            else
             var make_room=really_extend;
             /*<<src/bi_outbuf.ml 39 59>>*/ if(_mi_)
              /*<<src/bi_outbuf.ml 39 51>>*/ var
               /*<<src/bi_outbuf.ml 39 51>>*/ sth$0=_mi_[1],
              shrlen=sth$0;
            else
             var shrlen=16;
             /*<<src/bi_outbuf.ml 40 8>>*/ return [0,
                     /*<<src/bi_outbuf.ml 40 8>>*/ caml_create_bytes(n),
                    n,
                    0,
                    0,
                    n,
                    make_room,
                     /*<<src/bi_outbuf.ml 46 13>>*/ caml_call1(create$2,shrlen),
                    shrlen] /*<<src/bi_outbuf.ml 48 1>>*/ },
         extend=
          function(b,n)
           { /*<<src/bi_outbuf.ml 66 2>>*/  /*<<src/bi_outbuf.ml 66 2>>*/ var
             _mh_=
              b[2] < (b[3] + n | 0)?1:0;
             /*<<src/bi_outbuf.ml 66 2>>*/ return _mh_
                    ? /*<<src/bi_outbuf.ml 67 4>>*/ caml_call2(b[6],b,n)
                    :_mh_ /*<<src/bi_outbuf.ml 67 21>>*/ },
         alloc=
          function(b,n)
           { /*<<src/bi_outbuf.ml 70 2>>*/  /*<<src/bi_outbuf.ml 70 2>>*/ extend
             (b,n);
             /*<<src/bi_outbuf.ml 70 2>>*/  /*<<src/bi_outbuf.ml 70 2>>*/ var
             pos=
              b[3];
             /*<<src/bi_outbuf.ml 70 2>>*/ b[3] = pos + n | 0;
             /*<<src/bi_outbuf.ml 70 2>>*/ return pos /*<<src/bi_outbuf.ml 73 5>>*/ },
         add_sub=
          function(blit,b,s,pos,len)
           { /*<<src/bi_outbuf.ml 76 2>>*/  /*<<src/bi_outbuf.ml 76 2>>*/ extend
             (b,len);
             /*<<src/bi_outbuf.ml 77 2>>*/  /*<<src/bi_outbuf.ml 77 2>>*/ caml_call5
             (blit,s,pos,b[1],b[3],len);
             /*<<src/bi_outbuf.ml 77 2>>*/ b[3] = b[3] + len | 0;
             /*<<src/bi_outbuf.ml 77 2>>*/ return 0 /*<<src/bi_outbuf.ml 78 26>>*/ },
          /*<<src/bi_outbuf.ml 80 20>>*/ add_substring=
          function(_md_,_me_,_mf_,_mg_)
           { /*<<?>>*/ return add_sub(blit$0,_md_,_me_,_mf_,_mg_)},
          /*<<src/bi_outbuf.ml 81 19>>*/ write_stringlit=
          function(b,s)
           { /*<<src/bi_outbuf.ml 84 2>>*/ return  /*<<src/bi_outbuf.ml 84 2>>*/ add_substring
                    (b,
                     s,
                     0,
                      /*<<src/bi_outbuf.ml 84 2>>*/ caml_ml_string_length(s)) /*<<src/bi_outbuf.ml 84 39>>*/ },
          /*<<src/bi_outbuf.ml 81 19>>*/ add$0=
          function(b,c)
           { /*<<src/bi_outbuf.ml 91 12>>*/  /*<<src/bi_outbuf.ml 91 12>>*/ var
             pos=
               /*<<src/bi_outbuf.ml 91 12>>*/ alloc(b,1);
             /*<<src/bi_outbuf.ml 92 2>>*/ return  /*<<src/bi_outbuf.ml 92 2>>*/ caml_bytes_set
                    (b[1],pos,c) /*<<src/bi_outbuf.ml 92 23>>*/ },
          /*<<src/bi_outbuf.ml 81 19>>*/ clear$2=
          function(b)
           { /*<<src/bi_outbuf.ml 116 2>>*/ b[4] = 0;
             /*<<src/bi_outbuf.ml 116 2>>*/ b[3] = 0;
             /*<<src/bi_outbuf.ml 116 2>>*/ var
              /*<<src/bi_outbuf.ml 116 2>>*/ _mc_=b[7],
              /*<<src/bi_share.ml 29 7>>*/ _mb_=
              0 <  /*<<src/bi_share.ml 29 7>>*/ caml_call1(H[15],_mc_)?1:0;
             /*<<src/bi_share.ml 29 7>>*/ return _mb_
                    ? /*<<src/bi_share.ml 30 6>>*/ caml_call1(H[2],_mc_)
                    :_mb_ /*<<src/bi_outbuf.ml 118 30>>*/ },
          /*<<src/bi_outbuf.ml 81 19>>*/ contents=
          function(b)
           { /*<<src/bi_outbuf.ml 127 17>>*/ return  /*<<src/bi_outbuf.ml 127 17>>*/ sub_string
                    (b[1],0,b[3]) /*<<src/bi_outbuf.ml 127 49>>*/ },
         Json_error=[248,_bW_,caml_fresh_oo_id(0)],
         json_error=
          function(s)
           { /*<<common.ml 5 19>>*/ throw [0,Json_error,s] /*<<common.ml 5 39>>*/ },
         End_of_array=[248,_bX_,caml_fresh_oo_id(0)],
         End_of_object=[248,_bY_,caml_fresh_oo_id(0)];
        caml_fresh_oo_id(0);
         /*<<src/bi_outbuf.ml 80 20>>*/ var
         End_of_input=[248,_bZ_,caml_fresh_oo_id(0)],
         utf8_of_code=
          function(buf,x)
           { /*<<common.ml 22 2>>*/ function maxbits(n,x)
             { /*<<common.ml 25 20>>*/ return 0 === (x >>> n | 0)?1:0 /*<<common.ml 25 31>>*/ }
             /*<<common.ml 27 5>>*/ if( /*<<common.ml 27 5>>*/ maxbits(7,x))
              /*<<common.ml 29 12>>*/ return  /*<<common.ml 29 12>>*/ add$0
                     (buf, /*<<common.ml 29 12>>*/ chr(x));
             /*<<common.ml 30 10>>*/ if
             ( /*<<common.ml 30 10>>*/ maxbits(11,x))
             { /*<<common.ml 32 4>>*/  /*<<common.ml 32 4>>*/ add$0
               (buf, /*<<common.ml 32 12>>*/ chr(192 | (x >>> 6 | 0) & 31));
               /*<<common.ml 33 12>>*/ return  /*<<common.ml 33 12>>*/ add$0
                      (buf, /*<<common.ml 33 12>>*/ chr(128 | x & 63))}
             /*<<common.ml 35 10>>*/ if
             ( /*<<common.ml 35 10>>*/ maxbits(16,x))
             { /*<<common.ml 37 4>>*/  /*<<common.ml 37 4>>*/ add$0
               (buf, /*<<common.ml 37 12>>*/ chr(224 | (x >>> 12 | 0) & 15));
               /*<<common.ml 38 4>>*/  /*<<common.ml 38 4>>*/ add$0
               (buf, /*<<common.ml 38 12>>*/ chr(128 | (x >>> 6 | 0) & 63));
               /*<<common.ml 39 12>>*/ return  /*<<common.ml 39 12>>*/ add$0
                      (buf, /*<<common.ml 39 12>>*/ chr(128 | x & 63))}
             /*<<common.ml 41 10>>*/ if
             ( /*<<common.ml 41 10>>*/ maxbits(21,x))
             { /*<<common.ml 43 4>>*/  /*<<common.ml 43 4>>*/ add$0
               (buf, /*<<common.ml 43 12>>*/ chr(240 | (x >>> 18 | 0) & 7));
               /*<<common.ml 44 4>>*/  /*<<common.ml 44 4>>*/ add$0
               (buf, /*<<common.ml 44 12>>*/ chr(128 | (x >>> 12 | 0) & 63));
               /*<<common.ml 45 4>>*/  /*<<common.ml 45 4>>*/ add$0
               (buf, /*<<common.ml 45 12>>*/ chr(128 | (x >>> 6 | 0) & 63));
               /*<<common.ml 46 12>>*/ return  /*<<common.ml 46 12>>*/ add$0
                      (buf, /*<<common.ml 46 12>>*/ chr(128 | x & 63))}
             /*<<common.ml 48 10>>*/ if
             ( /*<<common.ml 48 10>>*/ maxbits(26,x))
             { /*<<common.ml 50 4>>*/  /*<<common.ml 50 4>>*/ add$0
               (buf, /*<<common.ml 50 12>>*/ chr(248 | (x >>> 24 | 0) & 3));
               /*<<common.ml 51 4>>*/  /*<<common.ml 51 4>>*/ add$0
               (buf, /*<<common.ml 51 12>>*/ chr(128 | (x >>> 18 | 0) & 63));
               /*<<common.ml 52 4>>*/  /*<<common.ml 52 4>>*/ add$0
               (buf, /*<<common.ml 52 12>>*/ chr(128 | (x >>> 12 | 0) & 63));
               /*<<common.ml 53 4>>*/  /*<<common.ml 53 4>>*/ add$0
               (buf, /*<<common.ml 53 12>>*/ chr(128 | (x >>> 6 | 0) & 63));
               /*<<common.ml 54 12>>*/ return  /*<<common.ml 54 12>>*/ add$0
                      (buf, /*<<common.ml 54 12>>*/ chr(128 | x & 63))}
             /*<<common.ml 57 11>>*/ if
             ( /*<<common.ml 57 11>>*/ maxbits(31,x))
             { /*<<common.ml 59 4>>*/  /*<<common.ml 59 4>>*/ add$0
               (buf, /*<<common.ml 59 12>>*/ chr(252 | (x >>> 30 | 0) & 1));
               /*<<common.ml 60 4>>*/  /*<<common.ml 60 4>>*/ add$0
               (buf, /*<<common.ml 60 12>>*/ chr(128 | (x >>> 24 | 0) & 63));
               /*<<common.ml 61 4>>*/  /*<<common.ml 61 4>>*/ add$0
               (buf, /*<<common.ml 61 12>>*/ chr(128 | (x >>> 18 | 0) & 63));
               /*<<common.ml 62 4>>*/  /*<<common.ml 62 4>>*/ add$0
               (buf, /*<<common.ml 62 12>>*/ chr(128 | (x >>> 12 | 0) & 63));
               /*<<common.ml 63 4>>*/  /*<<common.ml 63 4>>*/ add$0
               (buf, /*<<common.ml 63 12>>*/ chr(128 | (x >>> 6 | 0) & 63));
               /*<<common.ml 64 12>>*/ return  /*<<common.ml 64 12>>*/ add$0
                      (buf, /*<<common.ml 64 12>>*/ chr(128 | x & 63))}
            throw [0,Assert_failure,_b0_] /*<<common.ml 65 3>>*/ },
         init_lexer=
          function(buf,fname,opt,param)
           { /*<<common.ml 108 2>>*/ if(opt)
              /*<<common.ml 107 36>>*/ var
               /*<<common.ml 107 36>>*/ sth=opt[1],
              lnum=sth;
            else
             var lnum=1;
             /*<<common.ml 108 2>>*/ if(buf)
              /*<<common.ml 111 20>>*/ var
               /*<<common.ml 111 20>>*/ buf$0=buf[1],
              buf$1=buf$0;
            else
             var buf$1= /*<<common.ml 110 9>>*/ create$3(0,0,256);
             /*<<common.ml 110 29>>*/ return [0,buf$1,lnum,0,fname] /*<<common.ml 118 3>>*/ },
         hex=
          function(n)
           { /*<<write.ml 4 2>>*/  /*<<write.ml 4 2>>*/ var
             _ma_=
              10 <= n?n + 87 | 0:n + 48 | 0;
            return chr(_ma_) /*<<write.ml 7 3>>*/ },
         write_special=
          function(src,start,stop,ob,str)
           { /*<<write.ml 10 2>>*/  /*<<write.ml 10 2>>*/ add_substring
             (ob,src,start[1],stop - start[1] | 0);
             /*<<write.ml 11 2>>*/  /*<<write.ml 11 2>>*/ write_stringlit
             (ob,str);
             /*<<write.ml 11 2>>*/ start[1] = stop + 1 | 0;
             /*<<write.ml 11 2>>*/ return 0 /*<<write.ml 12 19>>*/ },
         finish_string=
          function(src,start,ob)
           { /*<<write.ml 24 2>>*/ try
             { /*<<write.ml 25 4>>*/  /*<<write.ml 25 4>>*/ var
               _l$_=
                 /*<<write.ml 25 4>>*/ add_substring
                 (ob,src,start[1],caml_ml_string_length(src) - start[1] | 0);
               /*<<write.ml 27 4>>*/ return _l$_}
            catch(exc)
             {exc = caml_wrap_exception(exc);
               /*<<write.ml 27 4>>*/ var
                /*<<write.ml 27 4>>*/ _l9_=
                 /*<<write.ml 27 4>>*/ caml_ml_string_length(src)
                -
                start[1]
                |
                0,
                /*<<write.ml 27 4>>*/ _l__=start[1];
               /*<<write.ml 27 4>>*/  /*<<write.ml 27 4>>*/ caml_call3
               ( /*<<write.ml 27 4>>*/ eprintf(_b2_),src,_l__,_l9_);
               /*<<write.ml 27 4>>*/ throw exc} /*<<write.ml 29 13>>*/ },
         write_string=
          function(ob,s)
           { /*<<write.ml 49 2>>*/  /*<<write.ml 49 2>>*/ add$0(ob,34);
             /*<<write.ml 32 2>>*/ var
              /*<<write.ml 32 2>>*/ start=[0,0],
              /*<<write.ml 32 2>>*/ _l7_=
               /*<<write.ml 32 2>>*/ caml_ml_string_length(s)
              -
              1
              |
              0,
              /*<<write.ml 32 2>>*/ _l6_=0;
             /*<<write.ml 32 2>>*/ if(! (_l7_ < 0))
             {var i$0=_l6_;
               /*<<write.ml 34 4>>*/ for(;;)
               { /*<<write.ml 34 10>>*/  /*<<write.ml 34 10>>*/ var
                 c=
                   /*<<write.ml 34 10>>*/ caml_string_get(s,i$0);
                 /*<<write.ml 34 10>>*/ if(92 === c)
                  /*<<write.ml 36 16>>*/  /*<<write.ml 36 16>>*/ write_special
                  (s,start,i$0,ob,_b3_);
                else
                 {var switch$0=0;
                  if(35 <= c)
                   if(127 === c)switch$0 = 1;else switch$0 = 2;
                  else
                   if(8 <= c)
                    {var switcher=c - 8 | 0,switch$1=0;
                     switch(switcher)
                      {case 0:
                         /*<<write.ml 37 16>>*/  /*<<write.ml 37 16>>*/ write_special
                         (s,start,i$0,ob,_b4_);
                        break;
                       case 1:
                         /*<<write.ml 41 16>>*/  /*<<write.ml 41 16>>*/ write_special
                         (s,start,i$0,ob,_b5_);
                        break;
                       case 2:
                         /*<<write.ml 39 16>>*/  /*<<write.ml 39 16>>*/ write_special
                         (s,start,i$0,ob,_b6_);
                        break;
                       case 4:
                         /*<<write.ml 38 18>>*/  /*<<write.ml 38 18>>*/ write_special
                         (s,start,i$0,ob,_b7_);
                        break;
                       case 5:
                         /*<<write.ml 40 16>>*/  /*<<write.ml 40 16>>*/ write_special
                         (s,start,i$0,ob,_b8_);
                        break;
                       case 26:
                         /*<<write.ml 35 15>>*/  /*<<write.ml 35 15>>*/ write_special
                         (s,start,i$0,ob,_b9_);
                        break;
                       case 24:
                       case 25:switch$0 = 2;switch$1 = 1;break;
                       default:switch$0 = 1;switch$1 = 1}}
                   else
                    switch$0 = 1;
                   /*<<camlinternalFormatBasics.ml 528 8>>*/ switch(switch$0)
                   {case 2:break;
                    case 1:
                      /*<<write.ml 15 2>>*/  /*<<write.ml 15 2>>*/ add_substring
                      (ob,s,start[1],i$0 - start[1] | 0);
                      /*<<write.ml 16 10>>*/ var
                       /*<<write.ml 16 10>>*/ i=
                        /*<<write.ml 16 10>>*/ alloc(ob,6),
                       /*<<write.ml 16 10>>*/ dst=ob[1];
                      /*<<write.ml 18 2>>*/  /*<<write.ml 18 2>>*/ blit$0
                      (_b1_,0,dst,i,4);
                      /*<<write.ml 19 2>>*/  /*<<write.ml 19 2>>*/ caml_bytes_set
                      (dst,i + 4 | 0, /*<<write.ml 19 22>>*/ hex(c >>> 4 | 0));
                      /*<<write.ml 20 2>>*/  /*<<write.ml 20 2>>*/ caml_bytes_set
                      (dst,i + 5 | 0, /*<<write.ml 20 22>>*/ hex(c & 15));
                      /*<<write.ml 20 2>>*/ start[1] = i$0 + 1 | 0;
                     break
                    }}
                 /*<<write.ml 34 10>>*/  /*<<write.ml 43 56>>*/ var
                 _l8_=
                  i$0 + 1 | 0;
                if(_l7_ !== i$0){var i$0=_l8_;continue}
                break}}
             /*<<write.ml 46 2>>*/  /*<<write.ml 46 2>>*/ finish_string
             (s,start,ob);
            return add$0(ob,34) /*<<write.ml 51 27>>*/ },
          /*<<write.ml 74 2>>*/ max_digits= /*<<write.ml 74 2>>*/ max(10,11),
          /*<<write.ml 74 2>>*/ write_digits=
          function(s,pos,x)
           { /*<<write.ml 82 2>>*/ if(0 === x)
              /*<<write.ml 82 16>>*/ return pos;
             /*<<write.ml 84 4>>*/ var
              /*<<write.ml 84 4>>*/ d=x % 10 | 0,
              /*<<write.ml 85 14>>*/ pos$0=
               /*<<write.ml 85 14>>*/ write_digits(s,pos,x / 10 | 0),
              /*<<write.ml 86 25>>*/ n= /*<<write.ml 86 25>>*/ abs(d);
             /*<<write.ml 86 4>>*/  /*<<write.ml 86 4>>*/ caml_bytes_set
             (s,pos$0, /*<<write.ml 79 2>>*/ chr(n + 48 | 0));
             /*<<write.ml 86 4>>*/ return pos$0 + 1 | 0 /*<<write.ml 87 11>>*/ },
          /*<<write.ml 74 2>>*/ float_needs_period=
          function(s)
           { /*<<write.ml 113 2>>*/ try
             {var _l2_=caml_ml_string_length(s) - 1 | 0,_l1_=0;
              if(! (_l2_ < 0))
               {var i=_l1_;
                 /*<<write.ml 115 6>>*/ for(;;)
                 { /*<<write.ml 115 12>>*/ var
                    /*<<write.ml 115 12>>*/ match=
                     /*<<write.ml 115 12>>*/ caml_string_get(s,i),
                   switch$0=0;
                   /*<<write.ml 115 12>>*/ if(48 <= match)
                   {if(! (58 <= match))switch$0 = 1}
                  else
                   if(45 === match)switch$0 = 1;
                   /*<<camlinternalFormatBasics.ml 528 8>>*/ if(! switch$0)
                    /*<<write.ml 117 15>>*/ throw Exit;
                   /*<<write.ml 115 12>>*/  /*<<write.ml 116 28>>*/ var
                   _l4_=
                    i + 1 | 0;
                  if(_l2_ !== i){var i=_l4_;continue}
                  break}}
               /*<<write.ml 119 4>>*/  /*<<write.ml 119 4>>*/ var _l3_=1;
              return _l3_}
            catch(_l5_)
             {_l5_ = caml_wrap_exception(_l5_);
              if(_l5_ === Exit) /*<<write.ml 121 4>>*/ return 0;
               /*<<write.ml 104 2>>*/ throw _l5_} /*<<write.ml 121 9>>*/ },
          /*<<write.ml 74 2>>*/ iter2=
          function(f_elt,f_sep,x,param$0)
           { /*<<?>>*/ if(param$0)
             {var l$0=param$0[2],y$0=param$0[1];
               /*<<write.ml 288 6>>*/  /*<<write.ml 288 6>>*/ caml_call2
               (f_elt,x,y$0);
              var param=l$0;
              for(;;)
               {if(param)
                 {var l=param[2],y=param[1];
                   /*<<write.ml 281 6>>*/  /*<<write.ml 281 6>>*/ caml_call1
                   (f_sep,x);
                   /*<<write.ml 282 6>>*/  /*<<write.ml 282 6>>*/ caml_call2
                   (f_elt,x,y);
                  var param=l;
                  continue}
                 /*<<write.ml 279 10>>*/ return 0}}
             /*<<write.ml 286 10>>*/ return 0},
          /*<<write.ml 74 2>>*/ f_sep=
          function(ob)
           { /*<<write.ml 292 2>>*/ return  /*<<write.ml 292 2>>*/ add$0
                    (ob,44) /*<<write.ml 292 27>>*/ },
          /*<<write.ml 74 2>>*/ write_t=
          function(ob,x)
           { /*<<write.ml 295 2>>*/ if(typeof x === "number")
              /*<<write.ml 67 2>>*/ return  /*<<write.ml 67 2>>*/ write_stringlit
                     (ob,_b__);
            var _l0_=x[1];
            if(708012133 <= _l0_)
             {if(737456202 <= _l0_)
               {if(928231259 <= _l0_)
                 {if(963043957 <= _l0_)
                   { /*<<write.ml 316 18>>*/ var
                      /*<<write.ml 316 18>>*/ l=x[2],
                      /*<<write.ml 326 2>>*/ f_elt=
                      function(ob,param)
                       {var x=param[2],s=param[1];
                         /*<<write.ml 327 4>>*/  /*<<write.ml 327 4>>*/ write_string
                         (ob,s);
                         /*<<write.ml 328 4>>*/  /*<<write.ml 328 4>>*/ add$0(ob,58);
                         /*<<write.ml 328 4>>*/ return  /*<<write.ml 328 4>>*/ write_t
                                (ob,x)};
                     /*<<write.ml 331 2>>*/  /*<<write.ml 331 2>>*/ add$0
                     (ob,123);
                     /*<<write.ml 332 2>>*/  /*<<write.ml 332 2>>*/ iter2
                     (f_elt,f_sep,ob,l);
                     /*<<write.ml 332 2>>*/ return  /*<<write.ml 332 2>>*/ add$0
                            (ob,125)}
                   /*<<write.ml 308 21>>*/  /*<<write.ml 308 21>>*/ var
                   s$1=
                    x[2];
                   /*<<write.ml 308 21>>*/ return  /*<<write.ml 308 21>>*/ write_stringlit
                          (ob,s$1)}
                if(848054398 <= _l0_)
                 { /*<<write.ml 317 17>>*/  /*<<write.ml 317 17>>*/ var
                   l$0=
                    x[2];
                   /*<<write.ml 336 2>>*/  /*<<write.ml 336 2>>*/ add$0(ob,91);
                   /*<<write.ml 337 2>>*/  /*<<write.ml 337 2>>*/ iter2
                   (write_t,f_sep,ob,l$0);
                   /*<<write.ml 337 2>>*/ return  /*<<write.ml 337 2>>*/ add$0
                          (ob,93)}
                 /*<<write.ml 297 17>>*/ var
                  /*<<write.ml 297 17>>*/ b=x[2],
                  /*<<write.ml 70 2>>*/ _lX_=b?_b$_:_ca_;
                return write_stringlit(ob,_lX_)}
              if(726928360 <= _l0_)
               { /*<<write.ml 319 18>>*/  /*<<write.ml 319 18>>*/ var
                 l$1=
                  x[2];
                 /*<<write.ml 342 2>>*/  /*<<write.ml 342 2>>*/ add$0(ob,40);
                 /*<<write.ml 343 2>>*/  /*<<write.ml 343 2>>*/ iter2
                 (write_t,f_sep,ob,l$1);
                 /*<<write.ml 343 2>>*/ return  /*<<write.ml 343 2>>*/ add$0
                        (ob,41)}
              var match$0=x[2],o=match$0[2],s$2=match$0[1];
               /*<<write.ml 349 2>>*/  /*<<write.ml 349 2>>*/ add$0(ob,60);
               /*<<write.ml 350 2>>*/  /*<<write.ml 350 2>>*/ write_string
               (ob,s$2);
               /*<<write.ml 350 2>>*/ if(o)
               {var x$0=o[1];
                 /*<<write.ml 354 9>>*/  /*<<write.ml 354 9>>*/ add$0(ob,58);
                 /*<<write.ml 355 9>>*/  /*<<write.ml 355 9>>*/ write_t
                 (ob,x$0)}
               /*<<write.ml 357 2>>*/ return  /*<<write.ml 357 2>>*/ add$0
                      (ob,62)}
            if(-752863768 === _l0_)
             { /*<<write.ml 302 19>>*/  /*<<write.ml 302 19>>*/ var s$3=x[2];
               /*<<write.ml 302 19>>*/ return  /*<<write.ml 302 19>>*/ write_stringlit
                      (ob,s$3)}
            if(3654863 <= _l0_)
             {if(365180284 <= _l0_)
               { /*<<write.ml 305 18>>*/ var
                  /*<<write.ml 305 18>>*/ f=x[2],
                  /*<<write.ml 143 8>>*/ match=
                   /*<<write.ml 143 8>>*/ caml_classify_float(f);
                 /*<<write.ml 143 8>>*/ if(3 === match)
                 { /*<<write.ml 147 6>>*/  /*<<write.ml 147 6>>*/ var
                   _lY_=
                    0. < f?_cb_:_cc_;
                  return write_stringlit(ob,_lY_)}
                if(4 <= match)
                  /*<<write.ml 145 6>>*/ return  /*<<write.ml 145 6>>*/ write_stringlit
                         (ob,_cd_);
                 /*<<write.ml 305 18>>*/ var
                  /*<<write.ml 149 15>>*/ s1=
                   /*<<write.ml 149 15>>*/ caml_call1
                   ( /*<<write.ml 149 15>>*/ sprintf(_ce_),f),
                  /*<<write.ml 151 11>>*/ s$0=
                   /*<<write.ml 151 11>>*/ caml_float_of_string(s1) == f
                   ?s1
                   : /*<<write.ml 152 13>>*/ caml_call1
                     ( /*<<write.ml 152 13>>*/ sprintf(_cg_),f);
                 /*<<write.ml 154 6>>*/  /*<<write.ml 154 6>>*/ write_stringlit
                 (ob,s$0);
                 /*<<write.ml 305 18>>*/  /*<<write.ml 155 9>>*/ var
                 _lZ_=
                   /*<<write.ml 155 9>>*/ float_needs_period(s$0);
                 /*<<write.ml 155 9>>*/ return _lZ_
                        ? /*<<write.ml 156 8>>*/ write_stringlit(ob,_cf_)
                        :_lZ_}
               /*<<write.ml 299 16>>*/  /*<<write.ml 299 16>>*/ var i=x[2];
               /*<<write.ml 90 2>>*/  /*<<write.ml 90 2>>*/ extend
               (ob,max_digits);
               /*<<write.ml 90 2>>*/ if(0 < i)
               { /*<<write.ml 92 16>>*/ ob[3]
                =
                 /*<<write.ml 92 16>>*/ write_digits(ob[1],ob[3],i);
                 /*<<write.ml 92 16>>*/ return 0}
               /*<<write.ml 93 7>>*/ if(0 <= i)
                /*<<write.ml 100 4>>*/ return  /*<<write.ml 100 4>>*/ add$0
                       (ob,48);
               /*<<write.ml 299 16>>*/ var
                /*<<write.ml 93 21>>*/ s=ob[1],
                /*<<write.ml 93 21>>*/ pos=ob[3];
               /*<<write.ml 96 4>>*/  /*<<write.ml 96 4>>*/ caml_bytes_set
               (s,pos,45);
               /*<<write.ml 97 16>>*/ ob[3]
              =
               /*<<write.ml 97 16>>*/ write_digits(s,pos + 1 | 0,i);
               /*<<write.ml 97 16>>*/ return 0}
            if(-375152890 <= _l0_)
             { /*<<write.ml 314 22>>*/  /*<<write.ml 314 22>>*/ var s$4=x[2];
               /*<<write.ml 314 22>>*/ return  /*<<write.ml 314 22>>*/ write_stringlit
                      (ob,s$4)}
             /*<<write.ml 311 19>>*/  /*<<write.ml 311 19>>*/ var s$5=x[2];
             /*<<write.ml 311 19>>*/ return  /*<<write.ml 311 19>>*/ write_string
                    (ob,s$5) /*<<write.ml 322 45>>*/ },
          /*<<write.ml 74 2>>*/ hex$0=
          function(c)
           { /*<<lib/read.mll 40 4>>*/ if(65 <= c)
             {if(97 <= c)
               {if(! (103 <= c))
                  /*<<lib/read.mll 42 20>>*/ return (c - 97 | 0) + 10 | 0}
              else
               if(! (71 <= c))
                 /*<<lib/read.mll 43 20>>*/ return (c - 65 | 0) + 10 | 0}
            else
             {var switcher=c - 48 | 0;
              if(! (9 < switcher >>> 0))
                /*<<lib/read.mll 41 20>>*/ return c - 48 | 0}
             /*<<lib/read.mll 44 13>>*/ throw [0,Assert_failure,_ch_] /*<<lib/read.mll 44 25>>*/ },
          /*<<write.ml 74 2>>*/ custom_error=
          function(descr,v,lexbuf)
           { /*<<lib/read.mll 47 4>>*/ var
              /*<<lib/read.mll 47 4>>*/ offs=lexbuf[4] - 1 | 0,
              /*<<lib/read.mll 47 4>>*/ bol=v[3],
              /*<<lib/read.mll 47 4>>*/ pos1=
              ((offs + lexbuf[5] | 0) - bol | 0)
              -
              1
              |
              0,
              /*<<lib/read.mll 50 15>>*/ pos2=
               /*<<lib/read.mll 50 15>>*/ max
               (pos1,(offs + lexbuf[6] | 0) - bol | 0),
              /*<<lib/read.mll 50 15>>*/ _lV_=v[4];
             /*<<lib/read.mll 50 15>>*/ if(_lV_)
              /*<<lib/read.mll 55 12>>*/ var
               /*<<lib/read.mll 55 12>>*/ s=_lV_[1],
              file_line=
                /*<<lib/read.mll 55 12>>*/ caml_call1
                ( /*<<lib/read.mll 55 12>>*/ sprintf(_ci_),s);
            else
             var file_line=_cm_;
             /*<<lib/read.mll 47 4>>*/ var
              /*<<lib/read.mll 57 4>>*/ bytes=
              pos1 === pos2
               ? /*<<lib/read.mll 59 8>>*/ caml_call1
                 ( /*<<lib/read.mll 59 8>>*/ sprintf(_cj_),pos1 + 1 | 0)
               : /*<<lib/read.mll 61 8>>*/ caml_call2
                 ( /*<<lib/read.mll 61 8>>*/ sprintf(_cl_),
                  pos1 + 1 | 0,
                  pos2 + 1 | 0),
              /*<<lib/read.mll 61 47>>*/ _lW_=v[2],
              /*<<lib/read.mll 63 14>>*/ msg=
               /*<<lib/read.mll 63 14>>*/ caml_call4
               ( /*<<lib/read.mll 63 14>>*/ sprintf(_ck_),
                file_line,
                _lW_,
                bytes,
                descr);
             /*<<lib/read.mll 63 14>>*/ return  /*<<lib/read.mll 63 14>>*/ json_error
                    (msg) /*<<lib/read.mll 64 18>>*/ },
          /*<<write.ml 74 2>>*/ lexer_error=
          function(descr,v,lexbuf)
           { /*<<lib/read.mll 69 31>>*/  /*<<lib/read.mll 69 31>>*/ var
             _lU_=
               /*<<lib/read.mll 69 31>>*/ lexeme(lexbuf);
             /*<<lib/read.mll 69 6>>*/ return  /*<<lib/read.mll 69 6>>*/ custom_error
                    ( /*<<lib/read.mll 69 6>>*/ caml_call2
                      ( /*<<lib/read.mll 69 6>>*/ sprintf(_cn_),descr,_lU_),
                     v,
                     lexbuf) /*<<lib/read.mll 70 14>>*/ },
          /*<<write.ml 74 2>>*/ read_junk=
          [0,
           function(param)
            { /*<<lib/read.mll 72 32>>*/ throw [0,Assert_failure,_co_] /*<<lib/read.mll 72 44>>*/ }],
          /*<<write.ml 74 2>>*/ long_error=
          function(descr,v,lexbuf)
           { /*<<lib/read.mll 75 15>>*/ var
              /*<<lib/read.mll 75 15>>*/ junk=
               /*<<lib/read.mll 75 15>>*/ lexeme(lexbuf),
              /*<<lib/read.mll 76 21>>*/ extra_junk=
               /*<<lib/read.mll 76 21>>*/ caml_call1(read_junk[1],lexbuf);
             /*<<lib/read.mll 78 6>>*/ return  /*<<lib/read.mll 78 6>>*/ custom_error
                    ( /*<<lib/read.mll 78 6>>*/ caml_call3
                      ( /*<<lib/read.mll 78 6>>*/ sprintf(_cp_),
                       descr,
                       junk,
                       extra_junk),
                     v,
                     lexbuf) /*<<lib/read.mll 79 14>>*/ },
         Int_overflow=[248,_cq_,caml_fresh_oo_id(0)],
         extract_positive_int=
          function(lexbuf)
           { /*<<lib/read.mll 87 4>>*/ var
              /*<<lib/read.mll 87 4>>*/ start=lexbuf[5],
              /*<<lib/read.mll 87 4>>*/ stop=lexbuf[6],
              /*<<lib/read.mll 87 4>>*/ s=lexbuf[2],
              /*<<lib/read.mll 87 4>>*/ n=[0,0],
              /*<<lib/read.mll 87 4>>*/ _lR_=stop - 1 | 0;
             /*<<lib/read.mll 87 4>>*/ if(! (_lR_ < start))
             {var i=start;
               /*<<lib/read.mll 92 6>>*/ for(;;)
               { /*<<lib/read.mll 92 6>>*/ if(214748365 <= n[1])
                  /*<<lib/read.mll 93 8>>*/ throw Int_overflow;
                 /*<<lib/read.mll 95 23>>*/  /*<<lib/read.mll 95 23>>*/ var
                 _lS_=
                   /*<<lib/read.mll 95 27>>*/ caml_bytes_get(s,i) - 48 | 0;
                 /*<<lib/read.mll 95 23>>*/ n[1] = (10 * n[1] | 0) + _lS_ | 0;
                 /*<<lib/read.mll 95 23>>*/  /*<<lib/read.mll 95 23>>*/ var
                 _lT_=
                  i + 1 | 0;
                if(_lR_ !== i){var i=_lT_;continue}
                break}}
             /*<<lib/read.mll 97 4>>*/ if(0 <= n[1])
              /*<<lib/read.mll 100 6>>*/ return n[1];
             /*<<lib/read.mll 98 6>>*/ throw Int_overflow /*<<lib/read.mll 100 8>>*/ },
         extract_negative_int=
          function(lexbuf)
           { /*<<lib/read.mll 114 4>>*/ var
              /*<<lib/read.mll 114 4>>*/ start=lexbuf[5] + 1 | 0,
              /*<<lib/read.mll 114 4>>*/ stop=lexbuf[6],
              /*<<lib/read.mll 114 4>>*/ s=lexbuf[2],
              /*<<lib/read.mll 114 4>>*/ n=[0,0],
              /*<<lib/read.mll 114 4>>*/ _lO_=stop - 1 | 0;
             /*<<lib/read.mll 114 4>>*/ if(! (_lO_ < start))
             {var i=start;
               /*<<lib/read.mll 119 6>>*/ for(;;)
               { /*<<lib/read.mll 119 6>>*/ if(n[1] <= -214748365)
                  /*<<lib/read.mll 120 8>>*/ throw Int_overflow;
                 /*<<lib/read.mll 122 23>>*/  /*<<lib/read.mll 122 23>>*/ var
                 _lP_=
                   /*<<lib/read.mll 122 27>>*/ caml_bytes_get(s,i) - 48 | 0;
                 /*<<lib/read.mll 122 23>>*/ n[1]
                =
                (10 * n[1] | 0)
                -
                _lP_
                |
                0;
                 /*<<lib/read.mll 122 23>>*/  /*<<lib/read.mll 122 23>>*/ var
                 _lQ_=
                  i + 1 | 0;
                if(_lO_ !== i){var i=_lQ_;continue}
                break}}
             /*<<lib/read.mll 124 4>>*/ if(0 < n[1])
              /*<<lib/read.mll 125 6>>*/ throw Int_overflow;
             /*<<lib/read.mll 127 6>>*/ return n[1] /*<<lib/read.mll 127 8>>*/ },
         newline=
          function(v,lexbuf)
           { /*<<lib/read.mll 145 4>>*/ v[2] = v[2] + 1 | 0;
             /*<<lib/read.mll 145 4>>*/ v[3] = lexbuf[4] + lexbuf[6] | 0;
             /*<<lib/read.mll 145 4>>*/ return 0 /*<<lib/read.mll 146 53>>*/ },
         read_colon=
          function(v,lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=297;
             /*<<lib/read.ml 2387 2>>*/ for(;;)
             { /*<<lib/read.ml 2387 8>>*/  /*<<lib/read.ml 2387 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 2387 8>>*/ caml_lex_engine
                 (ocaml_lex_tables,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 2387 8>>*/ if(2 < ocaml_lex_state$0 >>> 0)
               { /*<<lib/read.ml 2403 25>>*/  /*<<lib/read.ml 2403 25>>*/ caml_call1
                 (lexbuf[1],lexbuf);
                var ocaml_lex_state=ocaml_lex_state$0;
                continue}
              switch(ocaml_lex_state$0)
               {case 0: /*<<lib/read.mll 717 13>>*/ return 0;
                case 1:
                  /*<<lib/read.mll 718 13>>*/ return  /*<<lib/read.mll 718 13>>*/ long_error
                         (_cM_,v,lexbuf);
                default:
                  /*<<lib/read.mll 719 13>>*/ return  /*<<lib/read.mll 719 13>>*/ custom_error
                         (_cN_,v,lexbuf)}} /*<<lib/read.ml 2385 42>>*/ },
         read_object_sep=
          function(v,lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=292;
             /*<<lib/read.ml 2360 2>>*/ for(;;)
             { /*<<lib/read.ml 2360 8>>*/  /*<<lib/read.ml 2360 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 2360 8>>*/ caml_lex_engine
                 (ocaml_lex_tables,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 2360 8>>*/ if(3 < ocaml_lex_state$0 >>> 0)
               { /*<<lib/read.ml 2381 25>>*/  /*<<lib/read.ml 2381 25>>*/ caml_call1
                 (lexbuf[1],lexbuf);
                var ocaml_lex_state=ocaml_lex_state$0;
                continue}
              switch(ocaml_lex_state$0)
               {case 0: /*<<lib/read.mll 711 13>>*/ return 0;
                case 1: /*<<lib/read.mll 712 13>>*/ throw End_of_object;
                case 2:
                  /*<<lib/read.mll 713 13>>*/ return  /*<<lib/read.mll 713 13>>*/ long_error
                         (_cK_,v,lexbuf);
                default:
                  /*<<lib/read.mll 714 13>>*/ return  /*<<lib/read.mll 714 13>>*/ custom_error
                         (_cL_,v,lexbuf)}} /*<<lib/read.ml 2358 47>>*/ },
         read_object_end=
          function(lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=290;
             /*<<lib/read.ml 2343 2>>*/ for(;;)
             { /*<<lib/read.ml 2343 8>>*/  /*<<lib/read.ml 2343 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 2343 8>>*/ caml_lex_engine
                 (ocaml_lex_tables,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 2343 8>>*/ if(0 === ocaml_lex_state$0)
                /*<<lib/read.mll 707 13>>*/ throw End_of_object;
              if(1 === ocaml_lex_state$0)
                /*<<lib/read.mll 708 13>>*/ return 0;
               /*<<lib/read.ml 2354 25>>*/  /*<<lib/read.ml 2354 25>>*/ caml_call1
               (lexbuf[1],lexbuf);
               /*<<lib/read.ml 2343 8>>*/ var
               ocaml_lex_state=
                ocaml_lex_state$0;
              continue} /*<<lib/read.ml 2341 45>>*/ },
         read_array_sep=
          function(v,lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=257;
             /*<<lib/read.ml 2096 2>>*/ for(;;)
             { /*<<lib/read.ml 2096 8>>*/  /*<<lib/read.ml 2096 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 2096 8>>*/ caml_lex_engine
                 (ocaml_lex_tables,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 2096 8>>*/ if(3 < ocaml_lex_state$0 >>> 0)
               { /*<<lib/read.ml 2117 25>>*/  /*<<lib/read.ml 2117 25>>*/ caml_call1
                 (lexbuf[1],lexbuf);
                var ocaml_lex_state=ocaml_lex_state$0;
                continue}
              switch(ocaml_lex_state$0)
               {case 0: /*<<lib/read.mll 606 13>>*/ return 0;
                case 1: /*<<lib/read.mll 607 13>>*/ throw End_of_array;
                case 2:
                  /*<<lib/read.mll 608 13>>*/ return  /*<<lib/read.mll 608 13>>*/ long_error
                         (_cI_,v,lexbuf);
                default:
                  /*<<lib/read.mll 609 13>>*/ return  /*<<lib/read.mll 609 13>>*/ custom_error
                         (_cJ_,v,lexbuf)}} /*<<lib/read.ml 2094 46>>*/ },
         read_array_end=
          function(lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=255;
             /*<<lib/read.ml 2079 2>>*/ for(;;)
             { /*<<lib/read.ml 2079 8>>*/  /*<<lib/read.ml 2079 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 2079 8>>*/ caml_lex_engine
                 (ocaml_lex_tables,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 2079 8>>*/ if(0 === ocaml_lex_state$0)
                /*<<lib/read.mll 602 13>>*/ throw End_of_array;
              if(1 === ocaml_lex_state$0)
                /*<<lib/read.mll 603 13>>*/ return 0;
               /*<<lib/read.ml 2090 25>>*/  /*<<lib/read.ml 2090 25>>*/ caml_call1
               (lexbuf[1],lexbuf);
               /*<<lib/read.ml 2079 8>>*/ var
               ocaml_lex_state=
                ocaml_lex_state$0;
              continue} /*<<lib/read.ml 2077 44>>*/ },
         finish_string$0=
          function(v,lexbuf)
           { /*<<?>>*/ a:
             /*<<lib/read.ml 1227 3>>*/ for(;;)
             {var ocaml_lex_state=58;
               /*<<lib/read.ml 1229 2>>*/ for(;;)
               { /*<<lib/read.ml 1229 8>>*/  /*<<lib/read.ml 1229 8>>*/ var
                 ocaml_lex_state$0=
                   /*<<lib/read.ml 1229 8>>*/ caml_lex_engine
                   (ocaml_lex_tables,ocaml_lex_state,lexbuf);
                 /*<<lib/read.ml 1229 8>>*/ if(3 < ocaml_lex_state$0 >>> 0)
                 { /*<<lib/read.ml 1252 25>>*/  /*<<lib/read.ml 1252 25>>*/ caml_call1
                   (lexbuf[1],lexbuf);
                  var ocaml_lex_state=ocaml_lex_state$0;
                  continue}
                switch(ocaml_lex_state$0)
                 {case 0:
                    /*<<lib/read.mll 311 18>>*/ return  /*<<lib/read.mll 311 18>>*/ contents
                           (v[1]);
                  case 1:
                   var ocaml_lex_state$1=68;
                    /*<<lib/read.ml 1288 2>>*/ for(;;)
                    { /*<<lib/read.ml 1288 8>>*/  /*<<lib/read.ml 1288 8>>*/ var
                      ocaml_lex_state$2=
                        /*<<lib/read.ml 1288 8>>*/ caml_lex_engine
                        (ocaml_lex_tables,ocaml_lex_state$1,lexbuf);
                      /*<<lib/read.ml 1288 8>>*/ if(8 < ocaml_lex_state$2 >>> 0)
                      { /*<<lib/read.ml 1366 25>>*/  /*<<lib/read.ml 1366 25>>*/ caml_call1
                        (lexbuf[1],lexbuf);
                       var ocaml_lex_state$1=ocaml_lex_state$2;
                       continue}
                     switch(ocaml_lex_state$2)
                      {case 0:
                         /*<<lib/read.ml 1294 2>>*/  /*<<lib/read.ml 1294 2>>*/ var
                         c=
                           /*<<lib/read.ml 1294 2>>*/ sub_lexeme_char
                           (lexbuf,lexbuf[5]);
                         /*<<lib/read.ml 1294 2>>*/  /*<<lib/read.ml 1294 2>>*/ add$0
                         (v[1],c);
                        break;
                       case 1:
                         /*<<lib/read.mll 331 9>>*/  /*<<lib/read.mll 331 9>>*/ add$0
                         (v[1],8);
                        break;
                       case 2:
                         /*<<lib/read.mll 332 9>>*/  /*<<lib/read.mll 332 9>>*/ add$0
                         (v[1],12);
                        break;
                       case 3:
                         /*<<lib/read.mll 333 9>>*/  /*<<lib/read.mll 333 9>>*/ add$0
                         (v[1],10);
                        break;
                       case 4:
                         /*<<lib/read.mll 334 9>>*/  /*<<lib/read.mll 334 9>>*/ add$0
                         (v[1],13);
                        break;
                       case 5:
                         /*<<lib/read.mll 335 9>>*/  /*<<lib/read.mll 335 9>>*/ add$0
                         (v[1],9);
                        break;
                       case 6:
                         /*<<lib/read.ml 1329 2>>*/ var
                          /*<<lib/read.ml 1329 2>>*/ a=
                           /*<<lib/read.ml 1329 2>>*/ sub_lexeme_char
                           (lexbuf,lexbuf[5] + 1 | 0),
                          /*<<lib/read.ml 1334 2>>*/ b=
                           /*<<lib/read.ml 1334 2>>*/ sub_lexeme_char
                           (lexbuf,lexbuf[5] + 2 | 0),
                          /*<<lib/read.ml 1339 2>>*/ c$0=
                           /*<<lib/read.ml 1339 2>>*/ sub_lexeme_char
                           (lexbuf,lexbuf[5] + 3 | 0),
                          /*<<lib/read.ml 1344 2>>*/ d=
                           /*<<lib/read.ml 1344 2>>*/ sub_lexeme_char
                           (lexbuf,lexbuf[5] + 4 | 0),
                          /*<<lib/read.mll 338 68>>*/ _lI_=
                           /*<<lib/read.mll 338 68>>*/ hex$0(d),
                          /*<<lib/read.mll 338 51>>*/ _lJ_=
                           /*<<lib/read.mll 338 51>>*/ hex$0(c$0)
                          <<
                          4,
                          /*<<lib/read.mll 338 33>>*/ _lK_=
                           /*<<lib/read.mll 338 33>>*/ hex$0(b)
                          <<
                          8,
                          /*<<lib/read.mll 338 14>>*/ x=
                           /*<<lib/read.mll 338 14>>*/ hex$0(a)
                          <<
                          12
                          |
                          _lK_
                          |
                          _lJ_
                          |
                          _lI_,
                         switch$0=0;
                        if(55296 <= x && ! (56319 < x))
                         {var ocaml_lex_state$3=82;
                           /*<<lib/read.ml 1372 2>>*/ for(;;)
                           { /*<<lib/read.ml 1372 8>>*/  /*<<lib/read.ml 1372 8>>*/ var
                             ocaml_lex_state$4=
                               /*<<lib/read.ml 1372 8>>*/ caml_lex_engine
                               (ocaml_lex_tables,ocaml_lex_state$3,lexbuf);
                             /*<<lib/read.ml 1372 8>>*/ if(2 < ocaml_lex_state$4 >>> 0)
                             { /*<<lib/read.ml 1417 25>>*/  /*<<lib/read.ml 1417 25>>*/ caml_call1
                               (lexbuf[1],lexbuf);
                              var ocaml_lex_state$3=ocaml_lex_state$4;
                              continue}
                            switch(ocaml_lex_state$4)
                             {case 0:
                                /*<<lib/read.ml 1378 2>>*/ var
                                 /*<<lib/read.ml 1378 2>>*/ a$0=
                                  /*<<lib/read.ml 1378 2>>*/ sub_lexeme_char
                                  (lexbuf,lexbuf[5] + 2 | 0),
                                 /*<<lib/read.ml 1383 2>>*/ b$0=
                                  /*<<lib/read.ml 1383 2>>*/ sub_lexeme_char
                                  (lexbuf,lexbuf[5] + 3 | 0),
                                 /*<<lib/read.ml 1388 2>>*/ c$1=
                                  /*<<lib/read.ml 1388 2>>*/ sub_lexeme_char
                                  (lexbuf,lexbuf[5] + 4 | 0),
                                 /*<<lib/read.ml 1393 2>>*/ d$0=
                                  /*<<lib/read.ml 1393 2>>*/ sub_lexeme_char
                                  (lexbuf,lexbuf[5] + 5 | 0),
                                 /*<<lib/read.mll 351 68>>*/ _lL_=
                                  /*<<lib/read.mll 351 68>>*/ hex$0(d$0),
                                 /*<<lib/read.mll 351 51>>*/ _lM_=
                                  /*<<lib/read.mll 351 51>>*/ hex$0(c$1)
                                 <<
                                 4,
                                 /*<<lib/read.mll 351 33>>*/ _lN_=
                                  /*<<lib/read.mll 351 33>>*/ hex$0(b$0)
                                 <<
                                 8,
                                 /*<<lib/read.mll 351 14>>*/ j=
                                  /*<<lib/read.mll 351 14>>*/ hex$0(a$0)
                                 <<
                                 12
                                 |
                                 _lN_
                                 |
                                 _lM_
                                 |
                                 _lL_,
                                switch$1=0;
                               if(56320 <= j && ! (57343 < j))
                                { /*<<common.ml 68 2>>*/ var
                                   /*<<common.ml 68 2>>*/ high10=x - 55296 | 0,
                                   /*<<common.ml 68 2>>*/ low10=j - 56320 | 0;
                                 utf8_of_code(v[1],65536 + (high10 << 10 | low10) | 0)}
                               else
                                switch$1 = 1;
                               if(switch$1)
                                 /*<<lib/read.mll 356 13>>*/  /*<<lib/read.mll 356 13>>*/ long_error
                                 (_cC_,v,lexbuf);
                               break;
                              case 1:
                                /*<<lib/read.mll 359 9>>*/  /*<<lib/read.mll 359 9>>*/ long_error
                                (_cD_,v,lexbuf);
                               break;
                              default:
                                /*<<lib/read.mll 361 9>>*/  /*<<lib/read.mll 361 9>>*/ custom_error
                                (_cE_,v,lexbuf)}
                            break}}
                        else
                         switch$0 = 1;
                         /*<<camlinternalFormatBasics.ml 528 8>>*/ if(switch$0)
                          /*<<lib/read.mll 343 13>>*/  /*<<lib/read.mll 343 13>>*/ utf8_of_code
                          (v[1],x);
                        break;
                       case 7:
                         /*<<lib/read.mll 345 9>>*/  /*<<lib/read.mll 345 9>>*/ long_error
                         (_cA_,v,lexbuf);
                        break;
                       default:
                         /*<<lib/read.mll 346 9>>*/  /*<<lib/read.mll 346 9>>*/ custom_error
                         (_cB_,v,lexbuf)}
                     continue a}
                  case 2:
                    /*<<lib/read.mll 149 4>>*/  /*<<lib/read.mll 149 4>>*/ var
                    len=
                     lexbuf[6] - lexbuf[5] | 0;
                   add_sub(blit,v[1],lexbuf[2],lexbuf[5],len);
                   continue a;
                  default:
                    /*<<lib/read.mll 316 18>>*/ return  /*<<lib/read.mll 316 18>>*/ custom_error
                           (_cz_,v,lexbuf)}}} /*<<lib/read.ml 1227 44>>*/ },
         read_ident=
          function(v,lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=237;
             /*<<lib/read.ml 1946 2>>*/ for(;;)
             { /*<<lib/read.ml 1946 8>>*/  /*<<lib/read.ml 1946 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 1946 8>>*/ caml_lex_engine
                 (ocaml_lex_tables,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 1946 8>>*/ if(3 < ocaml_lex_state$0 >>> 0)
               { /*<<lib/read.ml 1973 25>>*/  /*<<lib/read.ml 1973 25>>*/ caml_call1
                 (lexbuf[1],lexbuf);
                var ocaml_lex_state=ocaml_lex_state$0;
                continue}
              switch(ocaml_lex_state$0)
               {case 0:
                  /*<<lib/read.mll 548 15>>*/  /*<<lib/read.mll 548 15>>*/ clear$2
                  (v[1]);
                  /*<<lib/read.mll 548 15>>*/ return  /*<<lib/read.mll 548 15>>*/ finish_string$0
                         (v,lexbuf);
                case 1:
                  /*<<lib/read.ml 1954 0>>*/ var
                   /*<<lib/read.ml 1954 0>>*/ _lH_=lexbuf[5],
                   /*<<lexing.ml 196 2>>*/ len=lexbuf[6] - _lH_ | 0;
                  /*<<lexing.ml 196 2>>*/ return  /*<<lexing.ml 196 2>>*/ sub_string
                         (lexbuf[2],_lH_,len);
                case 2:
                  /*<<lib/read.mll 552 13>>*/ return  /*<<lib/read.mll 552 13>>*/ long_error
                         (_cG_,v,lexbuf);
                default:
                  /*<<lib/read.mll 553 13>>*/ return  /*<<lib/read.mll 553 13>>*/ custom_error
                         (_cH_,v,lexbuf)}} /*<<lib/read.ml 1944 42>>*/ },
         finish_comment=
          function(v,lexbuf)
           { /*<<?>>*/ a:
             /*<<lib/read.ml 1577 3>>*/ for(;;)
             {var ocaml_lex_state=125;
               /*<<lib/read.ml 1579 2>>*/ for(;;)
               { /*<<lib/read.ml 1579 8>>*/  /*<<lib/read.ml 1579 8>>*/ var
                 ocaml_lex_state$0=
                   /*<<lib/read.ml 1579 8>>*/ caml_lex_engine
                   (ocaml_lex_tables,ocaml_lex_state,lexbuf);
                 /*<<lib/read.ml 1579 8>>*/ if(3 < ocaml_lex_state$0 >>> 0)
                 { /*<<lib/read.ml 1600 25>>*/  /*<<lib/read.ml 1600 25>>*/ caml_call1
                   (lexbuf[1],lexbuf);
                  var ocaml_lex_state=ocaml_lex_state$0;
                  continue}
                switch(ocaml_lex_state$0)
                 {case 0: /*<<lib/read.mll 408 9>>*/ return 0;
                  case 1:
                    /*<<lib/read.mll 409 9>>*/ return  /*<<lib/read.mll 409 9>>*/ long_error
                           (_cF_,v,lexbuf);
                  case 2:
                    /*<<lib/read.mll 410 11>>*/  /*<<lib/read.mll 410 11>>*/ newline
                    (v,lexbuf);
                   continue a;
                  default:continue a}}} /*<<lib/read.ml 1577 46>>*/ },
         read_space=
          function(v,lexbuf)
           { /*<<?>>*/ a:
             /*<<lib/read.ml 1621 3>>*/ for(;;)
             {var ocaml_lex_state=133;
               /*<<lib/read.ml 1623 2>>*/ for(;;)
               { /*<<lib/read.ml 1623 8>>*/  /*<<lib/read.ml 1623 8>>*/ var
                 ocaml_lex_state$0=
                   /*<<lib/read.ml 1623 8>>*/ caml_lex_engine
                   (ocaml_lex_tables,ocaml_lex_state,lexbuf);
                 /*<<lib/read.ml 1623 8>>*/ if(4 < ocaml_lex_state$0 >>> 0)
                 { /*<<lib/read.ml 1649 25>>*/  /*<<lib/read.ml 1649 25>>*/ caml_call1
                   (lexbuf[1],lexbuf);
                  var ocaml_lex_state=ocaml_lex_state$0;
                  continue}
                switch(ocaml_lex_state$0)
                 {case 0:
                    /*<<lib/read.mll 423 31>>*/  /*<<lib/read.mll 423 31>>*/ newline
                    (v,lexbuf);
                   continue a;
                  case 1:
                    /*<<lib/read.mll 424 31>>*/  /*<<lib/read.mll 424 31>>*/ finish_comment
                    (v,lexbuf);
                   continue a;
                  case 2:
                    /*<<lib/read.mll 425 31>>*/  /*<<lib/read.mll 425 31>>*/ newline
                    (v,lexbuf);
                   continue a;
                  case 3:continue a;
                  default: /*<<lib/read.mll 427 29>>*/ return 0}}} /*<<lib/read.ml 1621 42>>*/ },
         read_json$0=
          function(counter,v,lexbuf)
           { /*<<lib/read.ml 1025 3>>*/  /*<<lib/read.ml 1025 3>>*/ var
             _lG_=
              0;
             /*<<lib/read.ml 1025 3>>*/ if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return ocaml_lex_read_json_rec(counter$0,v,lexbuf,_lG_)}
            return caml_trampoline_return
                    (ocaml_lex_read_json_rec,[0,v,lexbuf,_lG_]) /*<<lib/read.ml 1025 39>>*/ },
         ocaml_lex_read_json_rec=
          function(counter,v,lexbuf,ocaml_lex_state)
           { /*<<?>>*/ var ocaml_lex_state$0=ocaml_lex_state;
             /*<<lib/read.ml 1027 2>>*/ for(;;)
             { /*<<lib/read.ml 1027 8>>*/  /*<<lib/read.ml 1027 8>>*/ var
               ocaml_lex_state$1=
                 /*<<lib/read.ml 1027 8>>*/ caml_lex_engine
                 (ocaml_lex_tables,ocaml_lex_state$0,lexbuf);
               /*<<lib/read.ml 1027 8>>*/ if(19 < ocaml_lex_state$1 >>> 0)
               { /*<<lib/read.ml 1223 25>>*/  /*<<lib/read.ml 1223 25>>*/ caml_call1
                 (lexbuf[1],lexbuf);
                var ocaml_lex_state$0=ocaml_lex_state$1;
                continue}
              switch(ocaml_lex_state$1)
               {case 0: /*<<lib/read.mll 188 16>>*/ return _ct_;
                case 1: /*<<lib/read.mll 189 16>>*/ return _cu_;
                case 2: /*<<lib/read.mll 190 16>>*/ return 870828711;
                case 3: /*<<lib/read.mll 191 16>>*/ return [0,365180284,nan];
                case 4:
                  /*<<lib/read.mll 198 16>>*/ return [0,365180284,infinity];
                case 5:
                  /*<<lib/read.mll 205 16>>*/ return [0,
                         365180284,
                         neg_infinity];
                case 6:
                  /*<<lib/read.mll 214 20>>*/  /*<<lib/read.mll 214 20>>*/ clear$2
                  (v[1]);
                  /*<<lib/read.mll 215 28>>*/ return [0,
                         -976970511,
                          /*<<lib/read.mll 215 28>>*/ finish_string$0(v,lexbuf)];
                case 7:
                  /*<<lib/read.mll 104 6>>*/ try
                  { /*<<lib/read.mll 104 15>>*/  /*<<lib/read.mll 104 15>>*/ var
                    _lw_=
                     [0,
                      3654863,
                       /*<<lib/read.mll 104 15>>*/ extract_positive_int(lexbuf)];
                   return _lw_}
                 catch(_lF_)
                  {_lF_ = caml_wrap_exception(_lF_);
                   if(_lF_ === Int_overflow)
                     /*<<lib/read.mll 110 8>>*/ return  /*<<lib/read.mll 110 8>>*/ lexer_error
                            (_cr_,v,lexbuf);
                    /*<<lib/read.mll 87 4>>*/ throw _lF_}
                case 8:
                  /*<<lib/read.mll 131 6>>*/ try
                  { /*<<lib/read.mll 131 15>>*/  /*<<lib/read.mll 131 15>>*/ var
                    _lx_=
                     [0,
                      3654863,
                       /*<<lib/read.mll 131 15>>*/ extract_negative_int(lexbuf)];
                   return _lx_}
                 catch(_lE_)
                  {_lE_ = caml_wrap_exception(_lE_);
                   if(_lE_ === Int_overflow)
                     /*<<lib/read.mll 137 8>>*/ return  /*<<lib/read.mll 137 8>>*/ lexer_error
                            (_cs_,v,lexbuf);
                    /*<<lib/read.mll 114 4>>*/ throw _lE_}
                case 9:
                  /*<<lib/read.mll 224 59>>*/ return [0,
                         365180284,
                          /*<<lib/read.mll 224 59>>*/ caml_float_of_string
                          ( /*<<lib/read.mll 224 44>>*/ lexeme(lexbuf))];
                case 10:
                  /*<<lib/read.mll 230 17>>*/  /*<<lib/read.mll 230 17>>*/ var
                  acc=
                   [0,0];
                  /*<<lib/read.mll 230 17>>*/ try
                  { /*<<lib/read.mll 232 21>>*/  /*<<lib/read.mll 232 21>>*/ read_space
                    (v,lexbuf);
                    /*<<lib/read.mll 233 21>>*/  /*<<lib/read.mll 233 21>>*/ read_object_end
                    (lexbuf);
                    /*<<lib/read.mll 234 38>>*/  /*<<lib/read.mll 234 38>>*/ var
                    field_name=
                      /*<<lib/read.mll 234 38>>*/ read_ident(v,lexbuf);
                    /*<<lib/read.mll 235 21>>*/  /*<<lib/read.mll 235 21>>*/ read_space
                    (v,lexbuf);
                    /*<<lib/read.mll 236 21>>*/  /*<<lib/read.mll 236 21>>*/ read_colon
                    (v,lexbuf);
                    /*<<lib/read.mll 237 21>>*/  /*<<lib/read.mll 237 21>>*/ read_space
                    (v,lexbuf);
                    /*<<lib/read.mll 234 38>>*/  /*<<lib/read.mll 237 21>>*/ var
                    _ly_=
                     acc[1];
                    /*<<lib/read.mll 238 41>>*/ acc[1]
                   =
                   [0,
                    [0,
                     field_name,
                      /*<<lib/read.mll 238 41>>*/ read_json(v,lexbuf)],
                    _ly_];
                   for(;;)
                    { /*<<lib/read.mll 240 23>>*/  /*<<lib/read.mll 240 23>>*/ read_space
                      (v,lexbuf);
                      /*<<lib/read.mll 241 23>>*/  /*<<lib/read.mll 241 23>>*/ read_object_sep
                      (v,lexbuf);
                      /*<<lib/read.mll 242 23>>*/  /*<<lib/read.mll 242 23>>*/ read_space
                      (v,lexbuf);
                      /*<<lib/read.mll 243 40>>*/  /*<<lib/read.mll 243 40>>*/ var
                      field_name$0=
                        /*<<lib/read.mll 243 40>>*/ read_ident(v,lexbuf);
                      /*<<lib/read.mll 244 23>>*/  /*<<lib/read.mll 244 23>>*/ read_space
                      (v,lexbuf);
                      /*<<lib/read.mll 245 23>>*/  /*<<lib/read.mll 245 23>>*/ read_colon
                      (v,lexbuf);
                      /*<<lib/read.mll 246 23>>*/  /*<<lib/read.mll 246 23>>*/ read_space
                      (v,lexbuf);
                      /*<<lib/read.mll 243 40>>*/  /*<<lib/read.mll 246 23>>*/ var
                      _lz_=
                       acc[1];
                      /*<<lib/read.mll 247 43>>*/ acc[1]
                     =
                     [0,
                      [0,
                       field_name$0,
                        /*<<lib/read.mll 247 43>>*/ read_json(v,lexbuf)],
                      _lz_];
                     continue}}
                 catch(_lD_)
                  {_lD_ = caml_wrap_exception(_lD_);
                   if(_lD_ === End_of_object)
                     /*<<lib/read.mll 251 28>>*/ return [0,
                            963043957,
                             /*<<lib/read.mll 251 28>>*/ rev(acc[1])];
                    /*<<lib/read.mll 254 17>>*/ throw _lD_}
                case 11:
                  /*<<lib/read.mll 254 17>>*/  /*<<lib/read.mll 254 17>>*/ var
                  acc$0=
                   [0,0];
                  /*<<lib/read.mll 254 17>>*/ try
                  { /*<<lib/read.mll 256 21>>*/  /*<<lib/read.mll 256 21>>*/ read_space
                    (v,lexbuf);
                    /*<<lib/read.mll 257 21>>*/  /*<<lib/read.mll 257 21>>*/ read_array_end
                    (lexbuf);
                    /*<<lib/read.mll 257 21>>*/  /*<<lib/read.mll 257 21>>*/ var
                    _lA_=
                     acc$0[1];
                    /*<<lib/read.mll 258 28>>*/ acc$0[1]
                   =
                   [0, /*<<lib/read.mll 258 28>>*/ read_json(v,lexbuf),_lA_];
                   for(;;)
                    { /*<<lib/read.mll 260 23>>*/  /*<<lib/read.mll 260 23>>*/ read_space
                      (v,lexbuf);
                      /*<<lib/read.mll 261 23>>*/  /*<<lib/read.mll 261 23>>*/ read_array_sep
                      (v,lexbuf);
                      /*<<lib/read.mll 262 23>>*/  /*<<lib/read.mll 262 23>>*/ read_space
                      (v,lexbuf);
                      /*<<lib/read.mll 262 23>>*/  /*<<lib/read.mll 262 23>>*/ var
                      _lB_=
                       acc$0[1];
                      /*<<lib/read.mll 263 30>>*/ acc$0[1]
                     =
                     [0, /*<<lib/read.mll 263 30>>*/ read_json(v,lexbuf),_lB_];
                     continue}}
                 catch(_lC_)
                  {_lC_ = caml_wrap_exception(_lC_);
                   if(_lC_ === End_of_array)
                     /*<<lib/read.mll 267 27>>*/ return [0,
                            848054398,
                             /*<<lib/read.mll 267 27>>*/ rev(acc$0[1])];
                    /*<<lib/read.mll 270 17>>*/ throw _lC_}
                case 12:
                  /*<<lib/read.mll 270 17>>*/ return  /*<<lib/read.mll 270 17>>*/ long_error
                         (_cv_,v,lexbuf);
                case 13:
                  /*<<lib/read.mll 291 17>>*/ return  /*<<lib/read.mll 291 17>>*/ long_error
                         (_cw_,v,lexbuf);
                case 14:
                  /*<<lib/read.mll 302 17>>*/ if(counter < 50)
                  {var counter$0=counter + 1 | 0;
                   return read_json$0(counter$0,v,lexbuf)}
                 return caml_trampoline_return(read_json$0,[0,v,lexbuf]);
                case 15:
                  /*<<lib/read.mll 303 19>>*/  /*<<lib/read.mll 303 19>>*/ finish_comment
                  (v,lexbuf);
                  /*<<lib/read.mll 303 19>>*/ if(counter < 50)
                  {var counter$1=counter + 1 | 0;
                   return read_json$0(counter$1,v,lexbuf)}
                 return caml_trampoline_return(read_json$0,[0,v,lexbuf]);
                case 16:
                  /*<<lib/read.mll 304 19>>*/  /*<<lib/read.mll 304 19>>*/ newline
                  (v,lexbuf);
                  /*<<lib/read.mll 304 19>>*/ if(counter < 50)
                  {var counter$2=counter + 1 | 0;
                   return read_json$0(counter$2,v,lexbuf)}
                 return caml_trampoline_return(read_json$0,[0,v,lexbuf]);
                case 17:
                  /*<<lib/read.mll 305 17>>*/ if(counter < 50)
                  {var counter$3=counter + 1 | 0;
                   return read_json$0(counter$3,v,lexbuf)}
                 return caml_trampoline_return(read_json$0,[0,v,lexbuf]);
                case 18:
                  /*<<lib/read.mll 306 17>>*/ return  /*<<lib/read.mll 306 17>>*/ custom_error
                         (_cx_,v,lexbuf);
                default:
                  /*<<lib/read.mll 307 17>>*/ return  /*<<lib/read.mll 307 17>>*/ long_error
                         (_cy_,v,lexbuf)}} /*<<lib/read.ml 1224 58>>*/ },
         read_json=
          function(v,lexbuf)
           { /*<<?>>*/ return caml_trampoline(read_json$0(0,v,lexbuf))},
         read_eof=
          function(lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=131;
             /*<<lib/read.ml 1606 2>>*/ for(;;)
             { /*<<lib/read.ml 1606 8>>*/  /*<<lib/read.ml 1606 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 1606 8>>*/ caml_lex_engine
                 (ocaml_lex_tables,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 1606 8>>*/ if(0 === ocaml_lex_state$0)
                /*<<lib/read.mll 419 14>>*/ return 1;
              if(1 === ocaml_lex_state$0)
                /*<<lib/read.mll 420 14>>*/ return 0;
               /*<<lib/read.ml 1617 25>>*/  /*<<lib/read.ml 1617 25>>*/ caml_call1
               (lexbuf[1],lexbuf);
               /*<<lib/read.ml 1606 8>>*/ var
               ocaml_lex_state=
                ocaml_lex_state$0;
              continue} /*<<lib/read.ml 1604 38>>*/ },
         junk=
          function(lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=513;
             /*<<lib/read.ml 3234 2>>*/ for(;;)
             { /*<<lib/read.ml 3234 8>>*/  /*<<lib/read.ml 3234 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 3234 8>>*/ caml_lex_engine
                 (ocaml_lex_tables,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 3234 8>>*/ if(0 === ocaml_lex_state$0)
                /*<<lib/read.mll 1053 13>>*/ return  /*<<lib/read.mll 1053 13>>*/ lexeme
                       (lexbuf);
               /*<<lib/read.ml 3240 25>>*/  /*<<lib/read.ml 3240 25>>*/ caml_call1
               (lexbuf[1],lexbuf);
               /*<<lib/read.ml 3234 8>>*/ var
               ocaml_lex_state=
                ocaml_lex_state$0;
              continue} /*<<lib/read.ml 3232 34>>*/ };
        read_junk[1] = junk;
         /*<<src/bi_outbuf.ml 80 20>>*/ var
         from_lexbuf=
          function(v,opt,lexbuf)
           { /*<<lib/read.mll 1103 4>>*/ if(opt)
              /*<<lib/read.mll 1102 31>>*/ var
               /*<<lib/read.mll 1102 31>>*/ sth=opt[1],
              stream=sth;
            else
             var stream=0;
             /*<<lib/read.mll 1103 4>>*/  /*<<lib/read.mll 1103 4>>*/ read_space
             (v,lexbuf);
             /*<<lib/read.mll 1106 9>>*/ if
             ( /*<<lib/read.mll 1106 9>>*/ read_eof(lexbuf))
              /*<<lib/read.mll 1107 8>>*/ throw End_of_input;
             /*<<lib/read.mll 1109 8>>*/  /*<<lib/read.mll 1109 8>>*/ var
             x=
               /*<<lib/read.mll 1109 8>>*/ read_json(v,lexbuf);
             /*<<lib/read.mll 1109 8>>*/ if(1 - stream)
             { /*<<lib/read.mll 1096 4>>*/  /*<<lib/read.mll 1096 4>>*/ read_space
               (v,lexbuf);
               /*<<lib/read.mll 1097 11>>*/ if
               (1 -  /*<<lib/read.mll 1097 11>>*/ read_eof(lexbuf))
                /*<<lib/read.mll 1098 6>>*/  /*<<lib/read.mll 1098 6>>*/ long_error
                (_cO_,v,lexbuf)}
             /*<<lib/read.mll 1113 21>>*/ return x /*<<lib/read.mll 1115 5>>*/ },
         from_string$0=
          function(buf,fname,lnum,s)
           { /*<<lib/read.mll 1119 4>>*/ try
             { /*<<lib/read.mll 1120 19>>*/ var
                /*<<lib/read.mll 1120 19>>*/ lexbuf=
                 /*<<lib/read.mll 1120 19>>*/ from_string(0,s),
                /*<<lib/read.mll 1121 14>>*/ v=
                 /*<<lib/read.mll 1121 14>>*/ init_lexer(buf,fname,lnum,0),
                /*<<lib/read.mll 1122 6>>*/ _lu_=
                 /*<<lib/read.mll 1122 6>>*/ from_lexbuf(v,0,lexbuf);
              return _lu_}
            catch(_lv_)
             {_lv_ = caml_wrap_exception(_lv_);
              if(_lv_ === End_of_input)
                /*<<lib/read.mll 1124 6>>*/ return  /*<<lib/read.mll 1124 6>>*/ json_error
                       (_cP_);
              throw _lv_} /*<<lib/read.mll 1124 35>>*/ },
         arg=
          function(buf,fname,lnum,file)
           { /*<<lib/read.mll 1135 13>>*/  /*<<lib/read.mll 1135 13>>*/ var
             ic=
               /*<<lib/read.mll 1135 13>>*/ open_in(file);
             /*<<lib/read.mll 1135 13>>*/ try
             { /*<<lib/read.mll 1127 4>>*/ try
               { /*<<lib/read.mll 1128 19>>*/ var
                  /*<<lib/read.mll 1128 19>>*/ lexbuf=
                   /*<<lib/read.mll 1128 19>>*/ from_channel(0,ic),
                  /*<<lib/read.mll 1129 14>>*/ v=
                   /*<<lib/read.mll 1129 14>>*/ init_lexer(buf,fname,lnum,0),
                  /*<<lib/read.mll 1130 6>>*/ _lr_=
                   /*<<lib/read.mll 1130 6>>*/ from_lexbuf(v,0,lexbuf),
                 x=_lr_}
              catch(_lt_)
               {_lt_ = caml_wrap_exception(_lt_);
                if(_lt_ !== End_of_input)throw _lt_;
                var x= /*<<lib/read.mll 1132 6>>*/ json_error(_cQ_)}
               /*<<lib/read.mll 1138 6>>*/  /*<<lib/read.mll 1138 6>>*/ caml_ml_close_channel
               (ic);
               /*<<lib/read.mll 1141 6>>*/ return x}
            catch(e)
             {e = caml_wrap_exception(e);
               /*<<stdlib.ml 473 24>>*/ try
               { /*<<stdlib.ml 473 29>>*/  /*<<stdlib.ml 473 29>>*/ caml_ml_close_channel
                 (ic)}
              catch(_ls_){}
              throw e} /*<<lib/read.mll 1142 13>>*/ };
        caml_fresh_oo_id(0);
         /*<<src/bi_outbuf.ml 80 20>>*/ var
         Type_error=[248,_cR_,caml_fresh_oo_id(0)],
         typerr=
          function(msg,js)
           { /*<<util.ml 3 13>>*/ if(typeof js === "number")
             var _lq_=_cS_;
            else
             var
              _lp_=js[1],
              _lq_=
               708012133 <= _lp_
                ?726928360 === _lp_
                  ?_cT_
                  :848054398 <= _lp_
                    ?963043957 <= _lp_?_cU_:_cV_
                    :737456202 <= _lp_?_cW_:_cX_
                :3654863 <= _lp_
                  ?365180284 <= _lp_?_cY_:_cZ_
                  :-752863768 <= _lp_?_c0_:_c1_;
             /*<<util.ml 15 39>>*/ throw [0,
                   Type_error,
                    /*<<util.ml 15 39>>*/ symbol(msg,_lq_),
                   js] /*<<util.ml 15 60>>*/ };
        caml_fresh_oo_id(0);
         /*<<src/bi_outbuf.ml 80 20>>*/ var
         symbol$0=function(_lo_,_ln_){ /*<<?>>*/ return caml_call1(_ln_,_lo_)},
         assoc$0=
          function(name,obj)
           { /*<<util.ml 22 2>>*/ try
             { /*<<util.ml 22 6>>*/  /*<<util.ml 22 6>>*/ var
               _ll_=
                 /*<<util.ml 22 6>>*/ assoc(name,obj);
              return _ll_}
            catch(_lm_)
             {_lm_ = caml_wrap_exception(_lm_);
              if(_lm_ === Not_found) /*<<util.ml 23 20>>*/ return 870828711;
              throw _lm_} /*<<util.ml 23 25>>*/ },
         member=
          function(name,js)
           { /*<<?>>*/ if(typeof js !== "number" && 963043957 === js[1])
             { /*<<util.ml 26 18>>*/  /*<<util.ml 26 18>>*/ var obj=js[2];
               /*<<util.ml 26 18>>*/ return  /*<<util.ml 26 18>>*/ assoc$0
                      (name,obj)}
             /*<<util.ml 27 17>>*/ return  /*<<util.ml 27 17>>*/ typerr
                    ( /*<<util.ml 27 17>>*/ symbol
                      (_c3_, /*<<util.ml 27 41>>*/ symbol(name,_c2_)),
                     js)},
         to_bool=
          function(js)
           { /*<<?>>*/ if(typeof js !== "number" && 737456202 === js[1])
             { /*<<util.ml 52 15>>*/  /*<<util.ml 52 15>>*/ var b=js[2];
               /*<<util.ml 52 15>>*/ return b}
             /*<<util.ml 53 10>>*/ return  /*<<util.ml 53 10>>*/ typerr
                    (_c4_,js) /*<<util.ml 53 41>>*/ },
         to_int=
          function(js)
           { /*<<?>>*/ if(typeof js !== "number" && 3654863 === js[1])
             { /*<<util.ml 81 14>>*/  /*<<util.ml 81 14>>*/ var i=js[2];
               /*<<util.ml 81 14>>*/ return i}
             /*<<util.ml 82 10>>*/ return  /*<<util.ml 82 10>>*/ typerr
                    (_c5_,js) /*<<util.ml 82 40>>*/ },
         to_list=
          function(js)
           { /*<<?>>*/ if(typeof js !== "number" && 848054398 === js[1])
             { /*<<util.ml 90 15>>*/  /*<<util.ml 90 15>>*/ var l=js[2];
               /*<<util.ml 90 15>>*/ return l}
             /*<<util.ml 91 10>>*/ return  /*<<util.ml 91 10>>*/ typerr
                    (_c6_,js) /*<<util.ml 91 42>>*/ },
         to_string=
          function(js)
           { /*<<?>>*/ if(typeof js !== "number" && -976970511 === js[1])
             { /*<<util.ml 94 17>>*/  /*<<util.ml 94 17>>*/ var s=js[2];
               /*<<util.ml 94 17>>*/ return s}
             /*<<util.ml 95 10>>*/ return  /*<<util.ml 95 10>>*/ typerr
                    (_c7_,js) /*<<util.ml 95 43>>*/ },
          /*<<write.ml 74 2>>*/ read_junk$0=
          [0,
           function(param)
            { /*<<lib/read.mll 72 32>>*/ throw [0,Assert_failure,_c8_] /*<<lib/read.mll 72 44>>*/ }];
        caml_fresh_oo_id(0);
         /*<<src/bi_outbuf.ml 80 20>>*/ var
         junk$0=
          function(lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=513;
             /*<<lib/read.ml 3234 2>>*/ for(;;)
             { /*<<lib/read.ml 3234 8>>*/  /*<<lib/read.ml 3234 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 3234 8>>*/ caml_lex_engine
                 (ocaml_lex_tables$0,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 3234 8>>*/ if(0 === ocaml_lex_state$0)
                /*<<lib/read.mll 1053 13>>*/ return  /*<<lib/read.mll 1053 13>>*/ lexeme
                       (lexbuf);
               /*<<lib/read.ml 3240 25>>*/  /*<<lib/read.ml 3240 25>>*/ caml_call1
               (lexbuf[1],lexbuf);
               /*<<lib/read.ml 3234 8>>*/ var
               ocaml_lex_state=
                ocaml_lex_state$0;
              continue} /*<<lib/read.ml 3232 34>>*/ };
        read_junk$0[1] = junk$0;
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
        caml_fresh_oo_id(0);
         /*<<src/bi_outbuf.ml 80 20>>*/  /*<<write.ml 74 2>>*/ var
         read_junk$1=
          [0,
           function(param)
            { /*<<lib/read.mll 72 32>>*/ throw [0,Assert_failure,_c9_] /*<<lib/read.mll 72 44>>*/ }];
        caml_fresh_oo_id(0);
         /*<<src/bi_outbuf.ml 80 20>>*/ var
         junk$1=
          function(lexbuf)
           { /*<<?>>*/ var ocaml_lex_state=513;
             /*<<lib/read.ml 3234 2>>*/ for(;;)
             { /*<<lib/read.ml 3234 8>>*/  /*<<lib/read.ml 3234 8>>*/ var
               ocaml_lex_state$0=
                 /*<<lib/read.ml 3234 8>>*/ caml_lex_engine
                 (ocaml_lex_tables$1,ocaml_lex_state,lexbuf);
               /*<<lib/read.ml 3234 8>>*/ if(0 === ocaml_lex_state$0)
                /*<<lib/read.mll 1053 13>>*/ return  /*<<lib/read.mll 1053 13>>*/ lexeme
                       (lexbuf);
               /*<<lib/read.ml 3240 25>>*/  /*<<lib/read.ml 3240 25>>*/ caml_call1
               (lexbuf[1],lexbuf);
               /*<<lib/read.ml 3234 8>>*/ var
               ocaml_lex_state=
                ocaml_lex_state$0;
              continue} /*<<lib/read.ml 3232 34>>*/ };
        read_junk$1[1] = junk$1;
        caml_fresh_oo_id(0);
         /*<<src/bi_outbuf.ml 80 20>>*/ var
         Unix_error=
          [248,_c__,caml_fresh_oo_id(0)];
         /*<<unix.ml 91 8>>*/  /*<<unix.ml 91 8>>*/ register_exception
         (_db_,[0,Unix_error,0,_da_,_c$_]);
         /*<<unix.ml 97 2>>*/  /*<<unix.ml 97 2>>*/ register_printer
         (function(param)
           { /*<<unix.ml 98 4>>*/ if(param[1] === Unix_error)
             {var s=param[4],s$0=param[3],e=param[2];
              if(typeof e === "number")
               {var _lk_=e;
                if(34 <= _lk_)
                 switch(_lk_)
                  {case 34:var msg=_dL_;break;
                   case 35:var msg=_dM_;break;
                   case 36:var msg=_dN_;break;
                   case 37:var msg=_dO_;break;
                   case 38:var msg=_dP_;break;
                   case 39:var msg=_dQ_;break;
                   case 40:var msg=_dR_;break;
                   case 41:var msg=_dS_;break;
                   case 42:var msg=_dT_;break;
                   case 43:var msg=_dU_;break;
                   case 44:var msg=_dV_;break;
                   case 45:var msg=_dW_;break;
                   case 46:var msg=_dX_;break;
                   case 47:var msg=_dY_;break;
                   case 48:var msg=_dZ_;break;
                   case 49:var msg=_d0_;break;
                   case 50:var msg=_d1_;break;
                   case 51:var msg=_d2_;break;
                   case 52:var msg=_d3_;break;
                   case 53:var msg=_d4_;break;
                   case 54:var msg=_d5_;break;
                   case 55:var msg=_d6_;break;
                   case 56:var msg=_d7_;break;
                   case 57:var msg=_d8_;break;
                   case 58:var msg=_d9_;break;
                   case 59:var msg=_d__;break;
                   case 60:var msg=_d$_;break;
                   case 61:var msg=_ea_;break;
                   case 62:var msg=_eb_;break;
                   case 63:var msg=_ec_;break;
                   case 64:var msg=_ed_;break;
                   case 65:var msg=_ee_;break;
                   case 66:var msg=_ef_;break;
                   default:var msg=_eg_}
                else
                 switch(_lk_)
                  {case 0:var msg=_dc_;break;
                   case 1:var msg=_de_;break;
                   case 2:var msg=_df_;break;
                   case 3:var msg=_dg_;break;
                   case 4:var msg=_dh_;break;
                   case 5:var msg=_di_;break;
                   case 6:var msg=_dj_;break;
                   case 7:var msg=_dk_;break;
                   case 8:var msg=_dl_;break;
                   case 9:var msg=_dm_;break;
                   case 10:var msg=_dn_;break;
                   case 11:var msg=_do_;break;
                   case 12:var msg=_dp_;break;
                   case 13:var msg=_dq_;break;
                   case 14:var msg=_dr_;break;
                   case 15:var msg=_ds_;break;
                   case 16:var msg=_dt_;break;
                   case 17:var msg=_du_;break;
                   case 18:var msg=_dv_;break;
                   case 19:var msg=_dw_;break;
                   case 20:var msg=_dx_;break;
                   case 21:var msg=_dy_;break;
                   case 22:var msg=_dz_;break;
                   case 23:var msg=_dA_;break;
                   case 24:var msg=_dB_;break;
                   case 25:var msg=_dC_;break;
                   case 26:var msg=_dD_;break;
                   case 27:var msg=_dE_;break;
                   case 28:var msg=_dF_;break;
                   case 29:var msg=_dG_;break;
                   case 30:var msg=_dH_;break;
                   case 31:var msg=_dI_;break;
                   case 32:var msg=_dJ_;break;
                   default:var msg=_dK_}}
              else
                /*<<unix.ml 169 29>>*/ var
                 /*<<unix.ml 169 29>>*/ x=e[1],
                msg=
                  /*<<unix.ml 169 29>>*/ caml_call1
                  ( /*<<unix.ml 169 29>>*/ sprintf(_eh_),x);
               /*<<unix.ml 170 15>>*/ return [0,
                       /*<<unix.ml 170 15>>*/ caml_call3
                       ( /*<<unix.ml 170 15>>*/ sprintf(_dd_),msg,s$0,s)]}
             /*<<unix.ml 171 13>>*/ return 0 /*<<unix.ml 171 18>>*/ });
         /*<<unix.ml 566 20>>*/  /*<<unix.ml 566 20>>*/ unix_inet_addr_of_string
         (_ei_);
         /*<<unix.ml 567 25>>*/  /*<<unix.ml 567 25>>*/ unix_inet_addr_of_string
         (_ej_);
         /*<<unix.ml 567 25>>*/ try
         { /*<<unix.ml 569 6>>*/  /*<<unix.ml 569 6>>*/ unix_inet_addr_of_string
           (_hv_)}
        catch(_lj_)
         {_lj_ = caml_wrap_exception(_lj_);if(_lj_[1] !== Failure)throw _lj_}
        try
         { /*<<unix.ml 571 6>>*/  /*<<unix.ml 571 6>>*/ unix_inet_addr_of_string
           (_hu_)}
        catch(_li_)
         {_li_ = caml_wrap_exception(_li_);if(_li_[1] !== Failure)throw _li_}
         /*<<unix.ml 1009 23>>*/  /*<<unix.ml 1009 23>>*/ create$1(0,7);
         /*<<src/bi_outbuf.ml 80 20>>*/ var
          /*<<lib/js_of_ocaml/js.ml 67 17>>*/ t196=joo_global_object,
          /*<<lib/js_of_ocaml/js.ml 100 22>>*/ no_handler=null,
          /*<<lib/js_of_ocaml/js.ml 104 30>>*/ undefined$0=undefined,
          /*<<lib/js_of_ocaml/js.ml 104 30>>*/ case$0=
          function(x,f,g)
           { /*<<lib/js_of_ocaml/js.ml 147 24>>*/ return x == no_handler
                    ? /*<<lib/js_of_ocaml/js.ml 147 50>>*/ caml_call1(f,0)
                    : /*<<lib/js_of_ocaml/js.ml 147 60>>*/ caml_call1(g,x) /*<<lib/js_of_ocaml/js.ml 147 63>>*/ },
          /*<<lib/js_of_ocaml/js.ml 104 30>>*/ get=
          function(x,f)
           { /*<<lib/js_of_ocaml/js.ml 149 21>>*/ return x == no_handler
                    ? /*<<lib/js_of_ocaml/js.ml 149 47>>*/ caml_call1(f,0)
                    :x /*<<lib/js_of_ocaml/js.ml 149 58>>*/ },
          /*<<lib/js_of_ocaml/js.ml 104 30>>*/ to_option=
          function(x)
           { /*<<lib/js_of_ocaml/js.ml 156 22>>*/ function _lh_(x)
             { /*<<lib/js_of_ocaml/js.ml 156 56>>*/ return [0,x] /*<<lib/js_of_ocaml/js.ml 156 62>>*/ }
             /*<<lib/js_of_ocaml/js.ml 156 22>>*/ return  /*<<lib/js_of_ocaml/js.ml 156 22>>*/ case$0
                    (x,
                     function(param)
                      { /*<<lib/js_of_ocaml/js.ml 156 40>>*/ return 0 /*<<lib/js_of_ocaml/js.ml 156 44>>*/ },
                     _lh_) /*<<lib/js_of_ocaml/js.ml 156 63>>*/ },
          /*<<lib/js_of_ocaml/js.ml 104 30>>*/ get$0=
          function(x,f)
           { /*<<lib/js_of_ocaml/js.ml 176 18>>*/ return x === undefined$0
                    ? /*<<lib/js_of_ocaml/js.ml 176 41>>*/ caml_call1(f,0)
                    :x /*<<lib/js_of_ocaml/js.ml 176 52>>*/ },
          /*<<lib/js_of_ocaml/js.ml 223 12>>*/ true$0=true,
          /*<<lib/js_of_ocaml/js.ml 225 13>>*/ false$0=false,
         array_length=t196.Array,
         Error=[248,_ek_,caml_fresh_oo_id(0)];
         /*<<lib/js_of_ocaml/js.ml 672 8>>*/  /*<<lib/js_of_ocaml/js.ml 672 8>>*/ register_exception
         (_el_,[0,Error,{}]);
         /*<<lib/js_of_ocaml/js.ml 674 37>>*/ (function(exn)
          { /*<</home/juntaolei/.opam/camel_city/lib/js_of_ocaml/js.ml 674 18>>*/ throw exn /*<</home/juntaolei/.opam/camel_city/lib/js_of_ocaml/js.ml 674 1>>*/ });
         /*<<lib/js_of_ocaml/js.ml 739 2>>*/  /*<<lib/js_of_ocaml/js.ml 739 2>>*/ register_printer
         (function(param)
           { /*<<lib/js_of_ocaml/js.ml 739 28>>*/ if(param[1] === Error)
             { /*<<lib/js_of_ocaml/js.ml 740 19>>*/  /*<<lib/js_of_ocaml/js.ml 740 19>>*/ var
               e=
                param[2];
               /*<<lib/js_of_ocaml/js.ml 740 46>>*/ return [0,
                       /*<<lib/js_of_ocaml/js.ml 740 46>>*/ caml_string_of_jsstring
                       (e.toString())]}
             /*<<lib/js_of_ocaml/js.ml 741 13>>*/ return 0 /*<<lib/js_of_ocaml/js.ml 741 18>>*/ });
         /*<<lib/js_of_ocaml/js.ml 744 2>>*/  /*<<lib/js_of_ocaml/js.ml 744 2>>*/ register_printer
         (function(e)
           { /*<<lib/js_of_ocaml/js.ml 746 9>>*/ return e
                    instanceof
                    array_length
                    ?0
                    :[0,
                       /*<<lib/js_of_ocaml/js.ml 746 82>>*/ caml_string_of_jsstring
                       (e.toString())] /*<<lib/js_of_ocaml/js.ml 746 83>>*/ });
         /*<<src/bi_outbuf.ml 80 20>>*/ var
         appendChild=
          function(p,n)
           { /*<<?>>*/ p.appendChild(n);
            return 0 /*<<lib/js_of_ocaml/dom.ml 124 83>>*/ },
         removeChild=
          function(p,n)
           { /*<<?>>*/ p.removeChild(n);
            return 0 /*<<lib/js_of_ocaml/dom.ml 126 83>>*/ },
         handler=
          function(f)
           { /*<<lib/js_of_ocaml/dom.ml 310 2>>*/ return function(e)
             { /*<<?>>*/ if(1 - (e == no_handler?1:0))
               { /*<<lib/js_of_ocaml/dom.ml 320 21>>*/  /*<<lib/js_of_ocaml/dom.ml 320 21>>*/ var
                 res=
                   /*<<lib/js_of_ocaml/dom.ml 320 21>>*/ caml_call1(f,e);
                 /*<<lib/js_of_ocaml/dom.ml 321 11>>*/ if(1 - (res | 0))
                 e.preventDefault();
                 /*<<lib/js_of_ocaml/dom.ml 321 76>>*/ return res}
               /*<<lib/js_of_ocaml/dom.ml 315 19>>*/ var
                /*<<lib/js_of_ocaml/dom.ml 315 19>>*/ e$0=event,
                /*<<lib/js_of_ocaml/dom.ml 316 21>>*/ res$0=
                 /*<<lib/js_of_ocaml/dom.ml 316 21>>*/ caml_call1(f,e$0);
               /*<<lib/js_of_ocaml/dom.ml 317 11>>*/ if(1 - (res$0 | 0))
               e$0.returnValue = res$0;
               /*<<lib/js_of_ocaml/dom.ml 317 62>>*/ return res$0 /*<<lib/js_of_ocaml/dom.ml 322 14>>*/ } /*<<lib/js_of_ocaml/dom.ml 322 16>>*/ },
         addEventListener=
          function(e,typ,h,capt)
           { /*<<lib/js_of_ocaml/dom.ml 393 2>>*/ var
              /*<<lib/js_of_ocaml/dom.ml 393 2>>*/ capture=[0,capt],
              /*<<lib/js_of_ocaml/dom.ml 393 2>>*/ passive=0,
              /*<<lib/js_of_ocaml/dom.ml 393 2>>*/ once=0;
            if(e.addEventListener === undefined$0)
             {var
               t34="on".concat(typ),
               t35=
                function(e)
                 { /*<<lib/js_of_ocaml/dom.ml 376 21>>*/  /*<<lib/js_of_ocaml/dom.ml 376 21>>*/ var
                   _le_=
                    [0,h,e,[0]];
                   /*<<lib/js_of_ocaml/dom.ml 376 21>>*/ return function
                   (_lf_,_lg_)
                   { /*<<?>>*/ return caml_js_call(_le_,_lf_,_lg_)} /*<<lib/js_of_ocaml/dom.ml 376 48>>*/ };
              e.attachEvent(t34,t35);
              return function(param)
               { /*<<?>>*/ return e.detachEvent(t34,t35) /*<<lib/js_of_ocaml/dom.ml 378 59>>*/ }}
             /*<<lib/js_of_ocaml/dom.ml 393 2>>*/  /*<<lib/js_of_ocaml/dom.ml 380 56>>*/ var
             t49=
              {};
             /*<<lib/js_of_ocaml/dom.ml 380 56>>*/ function iter(t,f)
             { /*<<lib/js_of_ocaml/dom.ml 382 6>>*/ if(t)
               { /*<<lib/js_of_ocaml/dom.ml 384 18>>*/  /*<<lib/js_of_ocaml/dom.ml 384 18>>*/ var
                 b=
                  t[1];
                 /*<<lib/js_of_ocaml/dom.ml 384 18>>*/ return  /*<<lib/js_of_ocaml/dom.ml 384 18>>*/ caml_call1
                        (f,b)}
               /*<<lib/js_of_ocaml/dom.ml 383 16>>*/ return 0 /*<<lib/js_of_ocaml/dom.ml 384 21>>*/ }
             /*<<lib/js_of_ocaml/dom.ml 386 4>>*/  /*<<lib/js_of_ocaml/dom.ml 386 4>>*/ iter
             (capture,
              function(b)
               { /*<<lib/js_of_ocaml/dom.ml 386 27>>*/ return t49.capture = b /*<<lib/js_of_ocaml/dom.ml 386 46>>*/ });
             /*<<lib/js_of_ocaml/dom.ml 387 4>>*/  /*<<lib/js_of_ocaml/dom.ml 387 4>>*/ iter
             (once,
              function(b)
               { /*<<lib/js_of_ocaml/dom.ml 387 24>>*/ return t49.once = b /*<<lib/js_of_ocaml/dom.ml 387 40>>*/ });
             /*<<lib/js_of_ocaml/dom.ml 388 4>>*/  /*<<lib/js_of_ocaml/dom.ml 388 4>>*/ iter
             (passive,
              function(b)
               { /*<<lib/js_of_ocaml/dom.ml 388 27>>*/ return t49.passive = b /*<<lib/js_of_ocaml/dom.ml 388 46>>*/ });
            e.addEventListener(typ,h,t49);
            return function(param)
             { /*<<?>>*/ return e.removeEventListener(typ,h,t49) /*<<lib/js_of_ocaml/dom.ml 390 66>>*/ } /*<<lib/js_of_ocaml/dom.ml 393 51>>*/ },
         t201=t196.FileReader,
          /*<<lib/js_of_ocaml/dom_html.ml 744 14>>*/ click="click",
          /*<<lib/js_of_ocaml/dom_html.ml 760 18>>*/ mousemove="mousemove",
          /*<<lib/js_of_ocaml/dom_html.ml 798 15>>*/ change="change",
         doc=t196.document,
         getElementById=
          function(id)
           { /*<<lib/js_of_ocaml/dom_html.ml 2348 2>>*/ function _lc_(pnode)
             { /*<<lib/js_of_ocaml/dom_html.ml 2351 18>>*/ return pnode /*<<lib/js_of_ocaml/dom_html.ml 2351 23>>*/ }
             /*<<lib/js_of_ocaml/dom_html.ml 2348 2>>*/ function _ld_(param)
             { /*<<lib/js_of_ocaml/dom_html.ml 2350 15>>*/ throw Not_found /*<<lib/js_of_ocaml/dom_html.ml 2350 30>>*/ }
             /*<<lib/js_of_ocaml/dom_html.ml 2349 30>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2349 30>>*/ var
             t15=
               /*<<lib/js_of_ocaml/dom_html.ml 2349 30>>*/ caml_jsstring_of_string
               (id);
            return case$0(doc.getElementById(t15),_ld_,_lc_) /*<<lib/js_of_ocaml/dom_html.ml 2351 24>>*/ },
         opt_iter=
          function(x,f)
           { /*<<lib/js_of_ocaml/dom_html.ml 2433 2>>*/ if(x)
             { /*<<lib/js_of_ocaml/dom_html.ml 2435 14>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2435 14>>*/ var
               v=
                x[1];
               /*<<lib/js_of_ocaml/dom_html.ml 2435 14>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2435 14>>*/ caml_call1
                      (f,v)}
             /*<<lib/js_of_ocaml/dom_html.ml 2434 12>>*/ return 0 /*<<lib/js_of_ocaml/dom_html.ml 2435 17>>*/ },
         createElement=
          function(t24,name)
           { /*<<lib/js_of_ocaml/dom_html.ml 2437 63>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2437 63>>*/ var
             t23=
               /*<<lib/js_of_ocaml/dom_html.ml 2437 63>>*/ caml_jsstring_of_string
               (name);
            return t24.createElement(t23) /*<<lib/js_of_ocaml/dom_html.ml 2437 79>>*/ },
         unsafeCreateElement=
          function(doc,name)
           { /*<<lib/js_of_ocaml/dom_html.ml 2439 35>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2439 35>>*/ createElement
                    (doc,name) /*<<lib/js_of_ocaml/dom_html.ml 2439 76>>*/ },
         createElementSyntax=[0,785140586],
         unsafeCreateElementEx=
          function(type,name,doc$0,elt)
           { /*<<lib/js_of_ocaml/dom_html.ml 2444 2>>*/ for(;;)
             {if(0 === type && 0 === name)
                /*<<lib/js_of_ocaml/dom_html.ml 2445 7>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2445 7>>*/ createElement
                       (doc$0,elt);
               /*<<lib/js_of_ocaml/dom_html.ml 2447 4>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2447 4>>*/ var
               _k8_=
                createElementSyntax[1];
               /*<<lib/js_of_ocaml/dom_html.ml 2447 4>>*/ if
               (785140586 === _k8_)
               { /*<<lib/js_of_ocaml/dom_html.ml 2463 8>>*/ try
                 {var
                   el=doc.createElement('<input name="x">'),
                   _k$_=el.tagName.toLowerCase() === "input"?1:0,
                   _la_=_k$_?el.name === "x"?1:0:_k$_,
                   _k9_=_la_}
                catch(_lb_){var _k9_=0}
                 /*<<lib/js_of_ocaml/dom_html.ml 2472 15>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2472 15>>*/ var
                 _k__=
                  _k9_?982028505:-1003883683;
                 /*<<lib/js_of_ocaml/dom_html.ml 2474 8>>*/ createElementSyntax
                 [1]
                =
                _k__;
                continue}
              if(982028505 <= _k8_)
               {var t40=new array_length();
                t40.push
                 ("<",
                   /*<<lib/js_of_ocaml/dom_html.ml 2455 42>>*/ caml_jsstring_of_string
                   (elt));
                 /*<<lib/js_of_ocaml/dom_html.ml 2456 8>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2456 8>>*/ opt_iter
                 (type,
                  function(t)
                   { /*<<lib/js_of_ocaml/dom_html.ml 2457 53>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2457 53>>*/ var
                     t34=
                       /*<<lib/js_of_ocaml/dom_html.ml 2457 53>>*/ caml_js_html_escape
                       (t);
                    t40.push(' type="',t34,'"');
                    return 0 /*<<lib/js_of_ocaml/dom_html.ml 2457 86>>*/ });
                 /*<<lib/js_of_ocaml/dom_html.ml 2458 8>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2458 8>>*/ opt_iter
                 (name,
                  function(n)
                   { /*<<lib/js_of_ocaml/dom_html.ml 2459 53>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2459 53>>*/ var
                     t38=
                       /*<<lib/js_of_ocaml/dom_html.ml 2459 53>>*/ caml_js_html_escape
                       (n);
                    t40.push(' name="',t38,'"');
                    return 0 /*<<lib/js_of_ocaml/dom_html.ml 2459 86>>*/ });
                t40.push(">");
                return doc$0.createElement(t40.join(""))}
               /*<<lib/js_of_ocaml/dom_html.ml 2447 4>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2449 35>>*/ var
               res=
                 /*<<lib/js_of_ocaml/dom_html.ml 2449 35>>*/ createElement
                 (doc$0,elt);
               /*<<lib/js_of_ocaml/dom_html.ml 2450 8>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2450 8>>*/ opt_iter
               (type,
                function(t)
                 { /*<<lib/js_of_ocaml/dom_html.ml 2450 33>>*/ return res.type
                         =
                         t /*<<lib/js_of_ocaml/dom_html.ml 2450 49>>*/ });
               /*<<lib/js_of_ocaml/dom_html.ml 2451 8>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2451 8>>*/ opt_iter
               (name,
                function(n)
                 { /*<<lib/js_of_ocaml/dom_html.ml 2451 32>>*/ return res.name
                         =
                         n /*<<lib/js_of_ocaml/dom_html.ml 2451 47>>*/ });
               /*<<lib/js_of_ocaml/dom_html.ml 2451 8>>*/ return res} /*<<lib/js_of_ocaml/dom_html.ml 2474 50>>*/ },
         createButton=
          function(type,name,doc)
           { /*<<lib/js_of_ocaml/dom_html.ml 2508 2>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2508 2>>*/ unsafeCreateElementEx
                    (type,name,doc,_em_) /*<<lib/js_of_ocaml/dom_html.ml 2508 49>>*/ },
         createDiv=
          function(doc)
           { /*<<lib/js_of_ocaml/dom_html.ml 2524 35>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2524 35>>*/ unsafeCreateElement
                    (doc,_en_) /*<<lib/js_of_ocaml/dom_html.ml 2524 64>>*/ };
        caml_fresh_oo_id(0);
         /*<<src/bi_outbuf.ml 80 20>>*/ var html_element=t196.HTMLElement;
        html_element === undefined$0;
         /*<<src/bi_outbuf.ml 80 20>>*/ var
          /*<<lib/js_of_ocaml/dom_html.ml 2662 6>>*/ unsafeCoerce=
          function(tag,e)
           { /*<<lib/js_of_ocaml/dom_html.ml 2666 35>>*/ var
             t56=e.tagName,
              /*<<lib/js_of_ocaml/dom_html.ml 2666 35>>*/ _k7_=
               /*<<lib/js_of_ocaml/dom_html.ml 2666 35>>*/ caml_jsstring_of_string
               (tag);
            return t56.toLowerCase() === _k7_?e:no_handler /*<<lib/js_of_ocaml/dom_html.ml 2668 16>>*/ },
          /*<<lib/js_of_ocaml/dom_html.ml 2662 6>>*/ button=
          function(e)
           { /*<<lib/js_of_ocaml/dom_html.ml 2682 17>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2682 17>>*/ unsafeCoerce
                    (_es_,e) /*<<lib/js_of_ocaml/dom_html.ml 2682 40>>*/ },
          /*<<lib/js_of_ocaml/dom_html.ml 2662 6>>*/ canvas=
          function(e)
           { /*<<lib/js_of_ocaml/dom_html.ml 2684 17>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2684 17>>*/ unsafeCoerce
                    (_et_,e) /*<<lib/js_of_ocaml/dom_html.ml 2684 40>>*/ },
          /*<<lib/js_of_ocaml/dom_html.ml 2662 6>>*/ input=
          function(e)
           { /*<<lib/js_of_ocaml/dom_html.ml 2730 16>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2730 16>>*/ unsafeCoerce
                    (_eu_,e) /*<<lib/js_of_ocaml/dom_html.ml 2730 38>>*/ },
          /*<<lib/js_of_ocaml/dom_html.ml 2662 6>>*/ label=
          function(e)
           { /*<<lib/js_of_ocaml/dom_html.ml 2734 16>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2734 16>>*/ unsafeCoerce
                    (_ev_,e) /*<<lib/js_of_ocaml/dom_html.ml 2734 38>>*/ },
         resource_amount=
          function(resource)
           { /*<<lib/cells.ml 22 31>>*/ return resource[2] /*<<lib/cells.ml 22 43>>*/ },
         select_cell=
          function(state,i)
           { /*<<lib/state.ml 63 26>>*/ state[11] = i;
             /*<<lib/state.ml 63 26>>*/ return 0 /*<<lib/state.ml 63 50>>*/ },
         is_selected=
          function(state)
           { /*<<lib/state.ml 65 24>>*/ return 0 <= state[11]?1:0 /*<<lib/state.ml 65 48>>*/ },
         place_cell=
          function(state,cell,x,y)
           { /*<<lib/state.ml 67 47>>*/  /*<<lib/state.ml 67 47>>*/ caml_check_bound
              ( /*<<lib/state.ml 67 32>>*/ caml_check_bound(state[10],x)
                [1 + x],
               y)
             [1 + y]
            =
            cell;
             /*<<lib/state.ml 67 47>>*/ return 0 /*<<lib/state.ml 67 59>>*/ },
         iter_buildings=
          function(json)
           { /*<<lib/state.ml 76 2>>*/  /*<<lib/state.ml 76 2>>*/ var _kL_=0;
             /*<<lib/state.ml 76 2>>*/ return  /*<<lib/state.ml 76 2>>*/ fold_left
                    (function(acc,building)
                      { /*<<lib/state.ml 78 6>>*/ function int_of_member(name)
                        { /*<<lib/state.ml 78 31>>*/ return  /*<<lib/state.ml 78 31>>*/ symbol$0
                                 ( /*<<lib/state.ml 78 31>>*/ symbol$0
                                   (building,
                                    function(_k6_){ /*<<?>>*/ return member(name,_k6_)}),
                                  to_int) /*<<lib/state.ml 78 64>>*/ }
                        /*<<lib/state.ml 79 17>>*/ var
                         /*<<lib/state.ml 79 17>>*/ name=
                          /*<<lib/state.ml 79 17>>*/ symbol$0
                          ( /*<<lib/state.ml 79 17>>*/ symbol$0
                            (building,
                             function(_k5_){ /*<<?>>*/ return member(_ew_,_k5_)}),
                           to_string),
                         /*<<lib/state.ml 80 17>>*/ cost=
                          /*<<lib/state.ml 80 17>>*/ int_of_member(_ex_),
                         /*<<lib/state.ml 81 24>>*/ maintenance=
                          /*<<lib/state.ml 81 24>>*/ symbol$0
                          ( /*<<lib/state.ml 81 24>>*/ symbol$0
                            (building,
                             function(_k4_){ /*<<?>>*/ return member(_ey_,_k4_)}),
                           to_int);
                        /*<<lib/state.ml 81 24>>*/ try
                        { /*<<lib/state.ml 85 43>>*/ var
                           /*<<lib/state.ml 85 43>>*/ _kO_=
                           function(_k3_){ /*<<?>>*/ return member(_eI_,_k3_)},
                           /*<<lib/state.ml 85 12>>*/ output_amount=
                            /*<<lib/state.ml 85 12>>*/ symbol$0
                            ( /*<<lib/state.ml 85 12>>*/ symbol$0
                              ( /*<<lib/state.ml 85 12>>*/ symbol$0
                                (building,
                                 function(_k2_){ /*<<?>>*/ return member(_eJ_,_k2_)}),
                               _kO_),
                             to_int),
                           /*<<lib/state.ml 88 43>>*/ _kP_=
                           function(_k1_){ /*<<?>>*/ return member(_eK_,_k1_)},
                           /*<<lib/state.ml 88 12>>*/ output_name=
                            /*<<lib/state.ml 88 12>>*/ symbol$0
                            ( /*<<lib/state.ml 88 12>>*/ symbol$0
                              ( /*<<lib/state.ml 88 12>>*/ symbol$0
                                (building,
                                 function(_k0_){ /*<<?>>*/ return member(_eL_,_k0_)}),
                               _kP_),
                             to_string),
                           /*<<lib/state.ml 88 12>>*/ _kQ_=
                           [0,output_name,output_amount],
                          output=_kQ_}
                       catch(_kZ_){var output=_ez_}
                        /*<<lib/state.ml 79 17>>*/ var
                         /*<<lib/state.ml 93 16>>*/ tax=
                          /*<<lib/state.ml 93 16>>*/ symbol$0
                          ( /*<<lib/state.ml 93 16>>*/ symbol$0
                            (building,
                             function(_kY_){ /*<<?>>*/ return member(_eA_,_kY_)}),
                           to_int),
                         /*<<lib/state.ml 94 20>>*/ defense=
                          /*<<lib/state.ml 94 20>>*/ symbol$0
                          ( /*<<lib/state.ml 94 20>>*/ symbol$0
                            (building,
                             function(_kX_){ /*<<?>>*/ return member(_eB_,_kX_)}),
                           to_int);
                        /*<<lib/state.ml 94 20>>*/ function _kM_(pair)
                        { /*<<lib/state.ml 101 17>>*/  /*<<lib/state.ml 101 17>>*/ var
                          _kU_=
                            /*<<lib/state.ml 101 17>>*/ symbol$0
                            ( /*<<lib/state.ml 101 17>>*/ symbol$0
                              (pair,function(_kW_){ /*<<?>>*/ return member(_eC_,_kW_)}),
                             to_int);
                          /*<<lib/state.ml 100 17>>*/ return [0,
                                  /*<<lib/state.ml 100 17>>*/ symbol$0
                                  ( /*<<lib/state.ml 100 17>>*/ symbol$0
                                    (pair,function(_kV_){ /*<<?>>*/ return member(_eD_,_kV_)}),
                                   to_string),
                                 _kU_] /*<<lib/state.ml 101 52>>*/ }
                        /*<<lib/state.ml 99 11>>*/ function _kN_(_kT_)
                        { /*<<?>>*/ return map$0(_kM_,_kT_)}
                        /*<<lib/state.ml 96 8>>*/ var
                         /*<<lib/state.ml 96 8>>*/ resource_dependency=
                          /*<<lib/state.ml 96 8>>*/ symbol$0
                          ( /*<<lib/state.ml 96 8>>*/ symbol$0
                            ( /*<<lib/state.ml 96 8>>*/ symbol$0
                              (building,
                               function(_kS_){ /*<<?>>*/ return member(_eE_,_kS_)}),
                             to_list),
                           _kN_),
                         /*<<lib/state.ml 104 8>>*/ population_dependency=
                          /*<<lib/state.ml 104 8>>*/ int_of_member(_eF_),
                         /*<<lib/state.ml 106 20>>*/ housing=
                          /*<<lib/state.ml 106 20>>*/ int_of_member(_eG_),
                         /*<<lib/state.ml 108 8>>*/ is_final_building=
                          /*<<lib/state.ml 108 8>>*/ symbol$0
                          ( /*<<lib/state.ml 108 8>>*/ symbol$0
                            (building,
                             function(_kR_){ /*<<?>>*/ return member(_eH_,_kR_)}),
                           to_bool);
                        /*<<lib/state.ml 110 6>>*/ return [0,
                               [0,
                                name,
                                cost,
                                maintenance,
                                output,
                                tax,
                                defense,
                                resource_dependency,
                                population_dependency,
                                housing,
                                is_final_building],
                               acc] /*<<lib/state.ml 113 12>>*/ },
                     _kL_,
                     json) /*<<lib/state.ml 114 11>>*/ },
          /*<<lib/state.ml 119 53>>*/ _eN_=
          function(_kK_){ /*<<?>>*/ return member(_eM_,_kK_)},
          /*<<lib/state.ml 119 2>>*/ default_buildings=
           /*<<lib/state.ml 119 2>>*/ symbol$0
           ( /*<<lib/state.ml 119 2>>*/ symbol$0
             ( /*<<lib/state.ml 119 2>>*/ symbol$0
               ( /*<<lib/state.ml 119 2>>*/ symbol$0
                 (_eO_,function(eta){ /*<<?>>*/ return arg(0,0,0,eta)}),
                _eN_),
              to_list),
            iter_buildings),
          /*<<lib/state.ml 119 2>>*/ new_state=
          function
           (opt,
            _kH_,
            _kG_,
            _kF_,
            _kE_,
            _kD_,
            _kC_,
            _kB_,
            _kA_,
            _kz_,
            _ky_,
            _kx_,
            canvas_width,
            canvas_height,
            map_length,
            cell_width,
            cell_height)
           { /*<<lib/state.ml 140 2>>*/ if(opt)
              /*<<lib/state.ml 123 19>>*/ var
               /*<<lib/state.ml 123 19>>*/ sth=opt[1],
              is_sandbox=sth;
            else
             var is_sandbox=0;
             /*<<lib/state.ml 140 2>>*/ if(_kH_)
              /*<<lib/state.ml 124 13>>*/ var
               /*<<lib/state.ml 124 13>>*/ sth$0=_kH_[1],
              tick=sth$0;
            else
             var tick=1;
             /*<<lib/state.ml 140 2>>*/ if(_kG_)
              /*<<lib/state.ml 125 25>>*/ var
               /*<<lib/state.ml 125 25>>*/ sth$1=_kG_[1],
              housing_capacity=sth$1;
            else
             var housing_capacity=0;
             /*<<lib/state.ml 140 2>>*/ if(_kF_)
              /*<<lib/state.ml 126 19>>*/ var
               /*<<lib/state.ml 126 19>>*/ sth$2=_kF_[1],
              population=sth$2;
            else
             var population=0;
             /*<<lib/state.ml 140 2>>*/ if(_kE_)
             var sth$3=_kE_[1],unemployed=sth$3;
            else
             var unemployed=0;
             /*<<lib/state.ml 140 2>>*/ if(_kD_)
             var sth$4=_kD_[1],food=sth$4;
            else
             var food=0;
             /*<<lib/state.ml 140 2>>*/ if(_kC_)
             var sth$5=_kC_[1],deficit_counter=sth$5;
            else
             var deficit_counter=0;
             /*<<lib/state.ml 140 2>>*/ if(_kB_)
             var sth$6=_kB_[1],starvation_counter=sth$6;
            else
             var starvation_counter=0;
             /*<<lib/state.ml 140 2>>*/ if(_kA_)
             var sth$7=_kA_[1],is_paused=sth$7;
            else
             var is_paused=1;
             /*<<lib/state.ml 140 2>>*/ if(_kz_)
             var sth$8=_kz_[1],is_game_over=sth$8;
            else
             var is_game_over=0;
             /*<<lib/state.ml 140 2>>*/ if(_ky_)
             var sth$9=_ky_[1],condition=sth$9;
            else
             var condition=0;
             /*<<lib/state.ml 140 2>>*/ if(_kx_)
             var sth$10=_kx_[1],is_final_building_placed=sth$10;
            else
             var is_final_building_placed=0;
             /*<<array.ml 61 12>>*/ var
              /*<<array.ml 61 12>>*/ res=
               /*<<array.ml 61 12>>*/ caml_make_vect(map_length,[0]),
              /*<<array.ml 61 12>>*/ _kv_=map_length - 1 | 0,
              /*<<lib/state.ml 140 2>>*/ _kI_=0,
              /*<<lib/state.ml 140 2>>*/ _kJ_=-1,
              /*<<array.ml 61 12>>*/ _ku_=0;
             /*<<array.ml 61 12>>*/ if(! (_kv_ < 0))
             {var x=_ku_;
               /*<<array.ml 63 4>>*/ for(;;)
               { /*<<array.ml 63 21>>*/ res[1 + x]
                =
                 /*<<array.ml 63 21>>*/ caml_make_vect(map_length,0);
                 /*<<array.ml 63 21>>*/  /*<<array.ml 63 21>>*/ var
                 _kw_=
                  x + 1 | 0;
                if(_kv_ !== x){var x=_kw_;continue}
                break}}
            return [0,
                    is_sandbox,
                    tick,
                    1.,
                    0.,
                    _eQ_,
                    [0,canvas_width,canvas_height],
                    map_length,
                    [0,cell_width,cell_height],
                    default_buildings,
                    res,
                    _kJ_,
                    _kI_,
                    housing_capacity,
                    population,
                    unemployed,
                    food,
                    deficit_counter,
                    starvation_counter,
                    is_paused,
                    is_game_over,
                    condition,
                    is_final_building_placed,
                    _eP_,
                    default_stockpile] /*<<lib/state.ml 165 3>>*/ },
          /*<<lib/state.ml 119 2>>*/ subtract_maintenace=
          function(building,stockpile)
           { /*<<lib/state.ml 307 2>>*/ var
              /*<<lib/state.ml 307 2>>*/ _kt_=building[3],
              /*<<lib/state.ml 307 18>>*/ new_money=
               /*<<lib/state.ml 307 18>>*/ assoc(_e1_,stockpile)
              -
              _kt_
              |
              0;
             /*<<lib/state.ml 307 18>>*/ function filter_money(param)
             {var value=param[2],name=param[1];
               /*<<lib/state.ml 309 7>>*/ return  /*<<lib/state.ml 309 7>>*/ caml_string_equal
                       (name,_e2_)
                      ?[0,name,new_money]
                      :[0,name,value]}
             /*<<lib/state.ml 307 18>>*/ return  /*<<lib/state.ml 307 18>>*/ map$0
                    (filter_money,stockpile) /*<<lib/state.ml 311 33>>*/ },
          /*<<lib/state.ml 119 2>>*/ init_stockpile=
          function(json)
           { /*<<lib/state.ml 376 2>>*/  /*<<lib/state.ml 376 2>>*/ var
             _kp_=
              0;
             /*<<lib/state.ml 376 2>>*/ return  /*<<lib/state.ml 376 2>>*/ fold_left
                    (function(acc,resource)
                      { /*<<lib/state.ml 380 8>>*/  /*<<lib/state.ml 380 8>>*/ var
                        _kq_=
                          /*<<lib/state.ml 380 8>>*/ symbol$0
                          ( /*<<lib/state.ml 380 9>>*/ symbol$0
                            (resource,
                             function(_ks_){ /*<<?>>*/ return member(_e7_,_ks_)}),
                           to_int);
                        /*<<lib/state.ml 378 6>>*/ return [0,
                               [0,
                                 /*<<lib/state.ml 379 8>>*/ symbol$0
                                 ( /*<<lib/state.ml 379 9>>*/ symbol$0
                                   (resource,
                                    function(_kr_){ /*<<?>>*/ return member(_e8_,_kr_)}),
                                  to_string),
                                _kq_],
                               acc] /*<<lib/state.ml 381 12>>*/ },
                     _kp_,
                     json) /*<<lib/state.ml 382 11>>*/ },
          /*<<lib/state.ml 119 2>>*/ iter_resources=
          function(lst)
           { /*<<lib/state.ml 515 2>>*/  /*<<lib/state.ml 515 2>>*/ var
             _km_=
              0;
             /*<<lib/state.ml 515 2>>*/ return  /*<<lib/state.ml 515 2>>*/ fold_left
                    (function(acc,resource)
                      { /*<<lib/state.ml 517 17>>*/ var
                         /*<<lib/state.ml 517 17>>*/ name=
                          /*<<lib/state.ml 517 17>>*/ symbol$0
                          ( /*<<lib/state.ml 517 17>>*/ symbol$0
                            (resource,
                             function(_ko_){ /*<<?>>*/ return member(_f1_,_ko_)}),
                           to_string),
                         /*<<lib/state.ml 518 19>>*/ amount=
                          /*<<lib/state.ml 518 19>>*/ symbol$0
                          ( /*<<lib/state.ml 518 19>>*/ symbol$0
                            (resource,
                             function(_kn_){ /*<<?>>*/ return member(_f2_,_kn_)}),
                           to_int);
                        /*<<lib/state.ml 519 6>>*/ return [0,[0,name,amount],acc] /*<<lib/state.ml 519 37>>*/ },
                     _km_,
                     lst) /*<<lib/state.ml 520 10>>*/ },
          /*<<lib/state.ml 119 2>>*/ iter_events=
          function(json)
           { /*<<lib/state.ml 525 2>>*/  /*<<lib/state.ml 525 2>>*/ var
             _ki_=
              0;
             /*<<lib/state.ml 525 2>>*/ return  /*<<lib/state.ml 525 2>>*/ fold_left
                    (function(acc,event)
                      { /*<<lib/state.ml 527 17>>*/ var
                         /*<<lib/state.ml 527 17>>*/ text=
                          /*<<lib/state.ml 527 17>>*/ symbol$0
                          ( /*<<lib/state.ml 527 17>>*/ symbol$0
                            (event,function(_kl_){ /*<<?>>*/ return member(_f3_,_kl_)}),
                           to_string),
                         /*<<lib/state.ml 529 8>>*/ resource_lst=
                          /*<<lib/state.ml 529 8>>*/ symbol$0
                          ( /*<<lib/state.ml 529 8>>*/ symbol$0
                            ( /*<<lib/state.ml 529 8>>*/ symbol$0
                              (event,function(_kk_){ /*<<?>>*/ return member(_f4_,_kk_)}),
                             to_list),
                           iter_resources),
                         /*<<lib/state.ml 531 19>>*/ damage=
                          /*<<lib/state.ml 531 19>>*/ symbol$0
                          ( /*<<lib/state.ml 531 19>>*/ symbol$0
                            (event,function(_kj_){ /*<<?>>*/ return member(_f5_,_kj_)}),
                           to_int);
                        /*<<lib/state.ml 531 19>>*/ return [0,
                               [0,text,resource_lst,damage],
                               acc] /*<<lib/state.ml 532 41>>*/ },
                     _ki_,
                     json) /*<<lib/state.ml 533 11>>*/ },
          /*<<lib/state.ml 119 2>>*/ events_of_json=
          function(difficulty)
           { /*<<lib/state.ml 539 52>>*/ function _kg_(_kh_)
             { /*<<?>>*/ return member(difficulty,_kh_)}
             /*<<lib/state.ml 539 4>>*/ return  /*<<lib/state.ml 539 4>>*/ symbol$0
                    ( /*<<lib/state.ml 539 4>>*/ symbol$0
                      ( /*<<lib/state.ml 539 4>>*/ symbol$0
                        ( /*<<lib/state.ml 539 4>>*/ symbol$0
                          (_f6_,function(eta){ /*<<?>>*/ return arg(0,0,0,eta)}),
                         _kg_),
                       to_list),
                     iter_events) /*<<lib/state.ml 540 29>>*/ },
          /*<<lib/state.ml 545 13>>*/ _f9_=
          [0,[0,_f8_, /*<<lib/state.ml 545 13>>*/ events_of_json(_f7_)],0],
          /*<<lib/state.ml 544 15>>*/ _ga_=
          [0,[0,_f$_, /*<<lib/state.ml 544 15>>*/ events_of_json(_f__)],_f9_],
          /*<<lib/state.ml 543 13>>*/ events=
          [0,[0,_gc_, /*<<lib/state.ml 543 13>>*/ events_of_json(_gb_)],_ga_],
         get_element_by_id=
          function(id,element_type)
           { /*<<lib/js_of_ocaml/dom_html.ml 2362 2>>*/ function _ke_(e)
             { /*<<lib/js_of_ocaml/dom_html.ml 2365 31>>*/ return  /*<<lib/js_of_ocaml/dom_html.ml 2365 31>>*/ to_option
                      ( /*<<lib/js_of_ocaml/dom_html.ml 2365 31>>*/ caml_call1
                        (element_type,e)) /*<<lib/js_of_ocaml/dom_html.ml 2365 41>>*/ }
             /*<<lib/js_of_ocaml/dom_html.ml 2362 2>>*/ function _kf_(param)
             { /*<<lib/js_of_ocaml/dom_html.ml 2364 15>>*/ return 0 /*<<lib/js_of_ocaml/dom_html.ml 2364 19>>*/ }
             /*<<lib/js_of_ocaml/dom_html.ml 2363 30>>*/ var
              /*<<lib/js_of_ocaml/dom_html.ml 2363 30>>*/ t21=
               /*<<lib/js_of_ocaml/dom_html.ml 2363 30>>*/ caml_jsstring_of_string
               (id),
             match=case$0(doc.getElementById(t21),_kf_,_ke_);
            if(match)
             { /*<<lib/gui.ml 11 20>>*/  /*<<lib/gui.ml 11 20>>*/ var
               element=
                match[1];
               /*<<lib/gui.ml 11 20>>*/ return element}
             /*<<lib/gui.ml 10 12>>*/ throw Not_found /*<<lib/gui.ml 11 27>>*/ },
          /*<<lib/gui.ml 14 16>>*/ bg_canvas=
           /*<<lib/gui.ml 14 16>>*/ get_element_by_id(_gl_,canvas),
         t83=bg_canvas.getContext("2d"),
          /*<<lib/gui.ml 20 16>>*/ t88=
           /*<<lib/gui.ml 20 16>>*/ get_element_by_id(_gm_,canvas),
         t118=t88.getContext("2d"),
          /*<<lib/gui.ml 26 15>>*/ main_div=
           /*<<lib/gui.ml 26 15>>*/ getElementById(_gn_),
          /*<<lib/gui.ml 29 18>>*/ startup_div=
           /*<<lib/gui.ml 29 18>>*/ getElementById(_go_),
          /*<<lib/gui.ml 32 15>>*/ game_div=
           /*<<lib/gui.ml 32 15>>*/ getElementById(_gp_),
          /*<<lib/gui.ml 35 25>>*/ navbar_buttons_div=
           /*<<lib/gui.ml 35 25>>*/ getElementById(_gq_),
          /*<<lib/gui.ml 38 23>>*/ notification_div=
           /*<<lib/gui.ml 38 23>>*/ getElementById(_gr_),
          /*<<lib/gui.ml 41 15>>*/ t92=
           /*<<lib/gui.ml 41 15>>*/ getElementById(_gs_),
          /*<<lib/gui.ml 44 25>>*/ info_container_div=
           /*<<lib/gui.ml 44 25>>*/ getElementById(_gt_),
          /*<<lib/gui.ml 49 2>>*/ notification_container_div=
           /*<<lib/gui.ml 49 2>>*/ getElementById(_gu_),
          /*<<lib/gui.ml 53 20>>*/ selection_div=
           /*<<lib/gui.ml 53 20>>*/ getElementById(_gv_),
          /*<<lib/gui.ml 57 16>>*/ tick_span=
           /*<<lib/gui.ml 57 16>>*/ getElementById(_gw_),
          /*<<lib/gui.ml 61 22>>*/ population_span=
           /*<<lib/gui.ml 61 22>>*/ getElementById(_gx_),
          /*<<lib/gui.ml 65 17>>*/ money_span=
           /*<<lib/gui.ml 65 17>>*/ getElementById(_gy_),
          /*<<lib/gui.ml 69 16>>*/ food_span=
           /*<<lib/gui.ml 69 16>>*/ getElementById(_gz_),
          /*<<lib/gui.ml 73 23>>*/ electricity_span=
           /*<<lib/gui.ml 73 23>>*/ getElementById(_gA_),
          /*<<lib/gui.ml 77 16>>*/ iron_span=
           /*<<lib/gui.ml 77 16>>*/ getElementById(_gB_),
          /*<<lib/gui.ml 81 16>>*/ coal_span=
           /*<<lib/gui.ml 81 16>>*/ getElementById(_gC_),
          /*<<lib/gui.ml 85 17>>*/ steel_span=
           /*<<lib/gui.ml 85 17>>*/ getElementById(_gD_),
          /*<<lib/gui.ml 89 19>>*/ deficit_span=
           /*<<lib/gui.ml 89 19>>*/ getElementById(_gE_),
          /*<<lib/gui.ml 93 22>>*/ starvation_span=
           /*<<lib/gui.ml 93 22>>*/ getElementById(_gF_),
          /*<<lib/gui.ml 97 27>>*/ notification_content=
           /*<<lib/gui.ml 97 27>>*/ getElementById(_gG_),
          /*<<lib/gui.ml 101 18>>*/ save_button=
           /*<<lib/gui.ml 101 18>>*/ get_element_by_id(_gH_,button),
          /*<<lib/gui.ml 105 19>>*/ pause_button=
           /*<<lib/gui.ml 105 19>>*/ get_element_by_id(_gI_,button),
          /*<<lib/gui.ml 110 2>>*/ notification_button=
           /*<<lib/gui.ml 110 2>>*/ get_element_by_id(_gJ_,button),
          /*<<lib/gui.ml 114 13>>*/ submit=
           /*<<lib/gui.ml 114 13>>*/ get_element_by_id(_gK_,input),
          /*<<lib/gui.ml 118 14>>*/ sandbox=
           /*<<lib/gui.ml 118 14>>*/ get_element_by_id(_gL_,input),
          /*<<lib/gui.ml 122 13>>*/ slider=
           /*<<lib/gui.ml 122 13>>*/ get_element_by_id(_gM_,input),
          /*<<lib/gui.ml 126 16>>*/ game_save=
           /*<<lib/gui.ml 126 16>>*/ get_element_by_id(_gN_,input),
          /*<<lib/gui.ml 130 17>>*/ start_save=
           /*<<lib/gui.ml 130 17>>*/ get_element_by_id(_gO_,input),
          /*<<lib/gui.ml 134 12>>*/ label$0=
           /*<<lib/gui.ml 134 12>>*/ get_element_by_id(_gP_,label),
          /*<<lib/gui.ml 163 15>>*/ textures=
           /*<<lib/gui.ml 163 15>>*/ map$0
           (function(x)
             { /*<<lib/js_of_ocaml/dom_html.ml 2558 37>>*/  /*<<lib/js_of_ocaml/dom_html.ml 2558 37>>*/ var
               img=
                 /*<<lib/js_of_ocaml/dom_html.ml 2558 37>>*/ unsafeCreateElement
                 (doc,_eq_);
              img.src
              =
               /*<<lib/gui.ml 159 58>>*/ caml_jsstring_of_string
               ( /*<<lib/gui.ml 159 25>>*/ symbol
                 (_gR_, /*<<lib/gui.ml 159 40>>*/ symbol(x,_gQ_)));
              return [0,x,img] /*<<lib/gui.ml 163 51>>*/ },
            texture_names),
          /*<<lib/gui.ml 163 15>>*/ find_texture=
          function(name)
           { /*<<lib/gui.ml 168 2>>*/ return  /*<<lib/gui.ml 168 2>>*/ find
                     (function(x)
                       { /*<<lib/gui.ml 168 22>>*/ return  /*<<lib/gui.ml 168 22>>*/ caml_string_equal
                                (name,x[1]) /*<<lib/gui.ml 168 34>>*/ },
                      textures)
                    [2] /*<<lib/gui.ml 168 51>>*/ },
          /*<<lib/gui.ml 163 15>>*/ set_span=
          function(state,element,name)
           { /*<<lib/gui.ml 173 2>>*/ var
              /*<<lib/gui.ml 173 2>>*/ _kc_=state[24],
              /*<<lib/gui.ml 174 58>>*/ attribute_value=
               /*<<lib/gui.ml 174 4>>*/ find
                (function(param)
                  { /*<<lib/gui.ml 174 14>>*/  /*<<lib/gui.ml 174 14>>*/ var
                    k=
                     param[1];
                    /*<<lib/gui.ml 174 29>>*/ return  /*<<lib/gui.ml 174 29>>*/ caml_string_equal
                           (k,name) /*<<lib/gui.ml 174 38>>*/ },
                 _kc_)
               [2],
              /*<<lib/gui.ml 176 21>>*/ string_value=
               /*<<lib/gui.ml 176 21>>*/ caml_string_of_jsbytes
               ("" + attribute_value),
              /*<<lib/gui.ml 178 35>>*/ _kd_=
               /*<<lib/gui.ml 178 35>>*/ symbol(_gS_,string_value),
              /*<<lib/gui.ml 178 58>>*/ inner_html=
               /*<<lib/gui.ml 178 58>>*/ caml_jsstring_of_string
               ( /*<<lib/gui.ml 178 4>>*/ symbol
                 ( /*<<lib/gui.ml 178 4>>*/ capitalize_ascii(name),_kd_));
             /*<<lib/gui.ml 178 58>>*/ return element.innerHTML = inner_html /*<<lib/gui.ml 180 35>>*/ },
          /*<<lib/gui.ml 163 15>>*/ draw_map=
          function(state)
           { /*<<lib/gui.ml 307 2>>*/  /*<<lib/gui.ml 307 2>>*/ var
             _j9_=
              state[10];
             /*<<lib/gui.ml 307 2>>*/ return  /*<<lib/gui.ml 307 2>>*/ iteri
                    (function(i)
                      { /*<<lib/gui.ml 309 6>>*/ function _j__(j,c)
                        { /*<<lib/gui.ml 310 10>>*/ if(typeof c === "number")
                          var texture= /*<<lib/gui.ml 314 22>>*/ find_texture(_g5_);
                         else
                           /*<<lib/gui.ml 310 10>>*/ if(0 === c[0])
                            /*<<lib/gui.ml 313 35>>*/ var
                             /*<<lib/gui.ml 313 35>>*/ building=c[1],
                            texture= /*<<lib/gui.ml 313 35>>*/ find_texture(building[1]);
                          else
                           var texture= /*<<lib/gui.ml 312 24>>*/ find_texture(_g6_);
                          /*<<lib/gui.ml 295 38>>*/ var
                           /*<<lib/gui.ml 295 38>>*/ _ka_=state[8][1],
                           /*<<lib/gui.ml 296 39>>*/ _kb_=state[8][2];
                         t83.save();
                          /*<<lib/gui.ml 295 38>>*/ var
                           /*<<lib/gui.ml 300 54>>*/ t71=(i + j) * _kb_ / 2.,
                           /*<<lib/gui.ml 299 53>>*/ t70=(j - i) * _ka_ / 2.;
                         t83.translate(t70,t71);
                         t83.drawImage(texture,0.,0.,130.,230.,-65.,0.,130.,230.);
                         return t83.restore() /*<<lib/gui.ml 316 36>>*/ }
                        /*<<lib/gui.ml 309 6>>*/ return function(_j$_)
                        { /*<<?>>*/ return iteri(_j__,_j$_)} /*<<lib/gui.ml 316 37>>*/ },
                     _j9_) /*<<lib/gui.ml 317 15>>*/ },
          /*<<lib/gui.ml 163 15>>*/ cell_positions=
          function(state,event)
           { /*<<lib/gui.ml 323 38>>*/ var
              /*<<lib/gui.ml 323 38>>*/ _j4_=state[8][1],
              /*<<lib/gui.ml 324 39>>*/ _j5_=state[8][2],
             _j6_=state[7],
              /*<<lib/gui.ml 327 48>>*/ padding_width=
              (state[6][1] - _j4_ * _j6_)
              /
              2.,
             _j7_=t88.getBoundingClientRect().left,
              /*<<lib/gui.ml 330 32>>*/ mouse_x=event.clientX - _j7_,
             _j8_=t88.getBoundingClientRect().top,
              /*<<lib/gui.ml 334 32>>*/ mouse_y=event.clientY - _j8_,
              /*<<lib/gui.ml 338 46>>*/ x=
              (mouse_x - padding_width)
              /
              _j4_
              -
              _j6_
              /
              2.,
              /*<<lib/gui.ml 340 42>>*/ y=(mouse_y - _j5_ * 2.) / _j5_;
             /*<<lib/gui.ml 341 22>>*/ return [0,
                     /*<<lib/gui.ml 341 13>>*/ Math.floor(y - x) | 0,
                     /*<<lib/gui.ml 341 46>>*/ Math.floor(y + x) | 0] /*<<lib/gui.ml 341 68>>*/ };
         /*<<lib/gui.ml 348 67>>*/ for(;;)
         { /*<<lib/gui.ml 345 35>>*/ if(t92.hasChildNodes() | 0)
           { /*<<lib/gui.ml 346 4>>*/  /*<<lib/gui.ml 346 4>>*/ print_endline
             (_g7_);
             /*<<lib/gui.ml 346 4>>*/  /*<<lib/gui.ml 346 4>>*/ var
             _g8_=
              function(param)
               { /*<<lib/gui.ml 348 50>>*/ throw Not_found /*<<lib/gui.ml 348 65>>*/ };
             /*<<lib/gui.ml 347 4>>*/  /*<<lib/gui.ml 347 4>>*/ removeChild
             (t92, /*<<lib/gui.ml 348 6>>*/ get(t92.firstChild,_g8_));
            continue}
          var
           find_cost=
            function(lst,name)
             { /*<<lib/gui.ml 493 2>>*/ try
               { /*<<lib/gui.ml 493 6>>*/  /*<<lib/gui.ml 493 6>>*/ var
                 _j2_=
                   /*<<lib/gui.ml 493 6>>*/ caml_string_of_jsbytes
                   (""
                    +
                     /*<<lib/gui.ml 493 6>>*/ find
                      (function(b)
                        { /*<<lib/gui.ml 493 27>>*/ return  /*<<lib/gui.ml 493 27>>*/ caml_string_equal
                                 (b[1],name) /*<<lib/gui.ml 493 40>>*/ },
                       lst)
                     [2]);
                return _j2_}
              catch(_j3_)
               {_j3_ = caml_wrap_exception(_j3_);
                if(_j3_ === Not_found) /*<<lib/gui.ml 494 20>>*/ return _hi_;
                throw _j3_} /*<<lib/gui.ml 494 23>>*/ };
           /*<<lib/gui.ml 618 2>>*/  /*<<lib/gui.ml 618 2>>*/ addEventListener
           (game_save,
            change,
             /*<<lib/gui.ml 619 4>>*/ handler
             (function(param)
               { /*<<lib/gui.ml 620 23>>*/  /*<<lib/gui.ml 620 23>>*/ var
                 textbox=
                   /*<<lib/gui.ml 620 23>>*/ getElementById(_hm_);
                 /*<<lib/gui.ml 620 23>>*/ function _j0_(param)
                 { /*<<lib/gui.ml 622 53>>*/ throw Not_found /*<<lib/gui.ml 622 68>>*/ }
                 /*<<lib/gui.ml 622 11>>*/  /*<<lib/gui.ml 622 11>>*/ var
                 t172=
                   /*<<lib/gui.ml 622 11>>*/ get$0(game_save.files,_j0_);
                if(0 < t172.length)
                 { /*<<lib/gui.ml 625 10>>*/ var
                    /*<<lib/gui.ml 625 10>>*/ _j1_=
                    function(param)
                     { /*<<lib/gui.ml 626 52>>*/ throw Not_found /*<<lib/gui.ml 626 67>>*/ },
                    /*<<lib/gui.ml 626 12>>*/ file=
                     /*<<lib/gui.ml 626 12>>*/ get(t172.item(0),_j1_);
                  textbox.innerHTML = file.name}
                 /*<<lib/gui.ml 629 9>>*/ return true$0 /*<<lib/gui.ml 629 17>>*/ }),
            false$0);
           /*<<lib/gui.ml 636 2>>*/  /*<<lib/gui.ml 636 2>>*/ removeChild
           (notification_div,notification_button);
           /*<<lib/gui.ml 637 2>>*/  /*<<lib/gui.ml 637 2>>*/ removeChild
           (notification_div,notification_content);
           /*<<lib/gui.ml 638 2>>*/  /*<<lib/gui.ml 638 2>>*/ removeChild
           (notification_container_div,notification_div);
           /*<<lib/gui.ml 638 2>>*/  /*<<lib/gui.ml 638 2>>*/ var
           onchange_handler=
            function(param)
             { /*<<lib/gui.ml 665 47>>*/  /*<<lib/gui.ml 665 47>>*/ var
               cell_size=
                 /*<<lib/gui.ml 665 47>>*/ caml_string_of_jsstring
                 (slider.value);
              label$0.innerHTML
              =
               /*<<lib/gui.ml 666 62>>*/ caml_jsstring_of_string
               ( /*<<lib/gui.ml 666 35>>*/ symbol(_hp_,cell_size));
              return true$0 /*<<lib/gui.ml 667 12>>*/ };
          slider.onchange
          =
           /*<<lib/gui.ml 669 23>>*/ handler(onchange_handler);
           /*<<lib/gui.ml 638 2>>*/ var
           toggle_game=
            function(is_shown)
             { /*<<lib/gui.ml 674 2>>*/ return is_shown
                      ?( /*<<lib/gui.ml 675 4>>*/ appendChild
                         (navbar_buttons_div,pause_button),
                         /*<<lib/gui.ml 676 4>>*/ appendChild
                         (navbar_buttons_div,save_button),
                         /*<<lib/gui.ml 676 4>>*/ appendChild(main_div,game_div))
                      :( /*<<lib/gui.ml 680 4>>*/ removeChild
                         (navbar_buttons_div,pause_button),
                         /*<<lib/gui.ml 681 4>>*/ removeChild
                         (navbar_buttons_div,save_button),
                         /*<<lib/gui.ml 681 4>>*/ removeChild(main_div,game_div)) /*<<lib/gui.ml 683 5>>*/ },
           toggle_startup=
            function(is_shown)
             { /*<<lib/gui.ml 688 2>>*/ return is_shown
                      ? /*<<lib/gui.ml 688 19>>*/ appendChild
                        (main_div,startup_div)
                      : /*<<lib/gui.ml 689 7>>*/ removeChild(main_div,startup_div) /*<<lib/gui.ml 689 43>>*/ };
           /*<<lib/gui.ml 704 2>>*/  /*<<lib/gui.ml 704 2>>*/ toggle_startup
           (1);
           /*<<lib/gui.ml 705 2>>*/  /*<<lib/gui.ml 705 2>>*/ toggle_game(0);
           /*<<lib/gui.ml 638 2>>*/ var
            /*<<lib/gui.ml 705 2>>*/ update_statistics=
            function(state)
             { /*<<lib/gui.ml 238 2>>*/ var
                /*<<lib/gui.ml 238 2>>*/ string_value$3=state[19]?_g3_:_g4_,
                /*<<lib/gui.ml 239 35>>*/ inner_html$3=
                 /*<<lib/gui.ml 239 35>>*/ caml_jsstring_of_string
                 (string_value$3);
               /*<<lib/gui.ml 239 35>>*/ pause_button.innerHTML
              =
              inner_html$3;
               /*<<lib/gui.ml 238 2>>*/ var
                /*<<lib/gui.ml 185 21>>*/ string_value=
                 /*<<lib/gui.ml 185 21>>*/ caml_string_of_jsbytes
                 ("" + state[2]),
                /*<<lib/gui.ml 186 46>>*/ inner_html=
                 /*<<lib/gui.ml 186 46>>*/ caml_jsstring_of_string
                 ( /*<<lib/gui.ml 186 19>>*/ symbol(_gT_,string_value));
               /*<<lib/gui.ml 186 46>>*/ tick_span.innerHTML = inner_html;
               /*<<lib/gui.ml 238 2>>*/ var
                /*<<lib/gui.ml 192 21>>*/ string_value$0=
                 /*<<lib/gui.ml 192 21>>*/ caml_string_of_jsbytes
                 ("" + state[14]),
                /*<<lib/gui.ml 193 52>>*/ inner_html$0=
                 /*<<lib/gui.ml 193 52>>*/ caml_jsstring_of_string
                 ( /*<<lib/gui.ml 193 19>>*/ symbol(_gU_,string_value$0));
               /*<<lib/gui.ml 193 52>>*/ population_span.innerHTML
              =
              inner_html$0;
               /*<<lib/gui.ml 198 27>>*/  /*<<lib/gui.ml 198 27>>*/ set_span
               (state,money_span,_gV_);
               /*<<lib/gui.ml 202 26>>*/  /*<<lib/gui.ml 202 26>>*/ set_span
               (state,food_span,_gW_);
               /*<<lib/gui.ml 207 2>>*/  /*<<lib/gui.ml 207 2>>*/ set_span
               (state,electricity_span,_gX_);
               /*<<lib/gui.ml 211 26>>*/  /*<<lib/gui.ml 211 26>>*/ set_span
               (state,iron_span,_gY_);
               /*<<lib/gui.ml 215 26>>*/  /*<<lib/gui.ml 215 26>>*/ set_span
               (state,coal_span,_gZ_);
               /*<<lib/gui.ml 219 26>>*/  /*<<lib/gui.ml 219 26>>*/ set_span
               (state,steel_span,_g0_);
               /*<<lib/gui.ml 238 2>>*/ var
                /*<<lib/gui.ml 224 21>>*/ string_value$1=
                 /*<<lib/gui.ml 224 21>>*/ caml_string_of_jsbytes
                 ("" + state[17]),
                /*<<lib/gui.ml 225 57>>*/ inner_html$1=
                 /*<<lib/gui.ml 225 57>>*/ caml_jsstring_of_string
                 ( /*<<lib/gui.ml 225 19>>*/ symbol(_g1_,string_value$1));
               /*<<lib/gui.ml 225 57>>*/ deficit_span.innerHTML
              =
              inner_html$1;
               /*<<lib/gui.ml 238 2>>*/ var
                /*<<lib/gui.ml 231 21>>*/ string_value$2=
                 /*<<lib/gui.ml 231 21>>*/ caml_string_of_jsbytes
                 ("" + state[18]),
                /*<<lib/gui.ml 232 60>>*/ inner_html$2=
                 /*<<lib/gui.ml 232 60>>*/ caml_jsstring_of_string
                 ( /*<<lib/gui.ml 232 19>>*/ symbol(_g2_,string_value$2));
               /*<<lib/gui.ml 232 60>>*/ starvation_span.innerHTML
              =
              inner_html$2;
               /*<<lib/gui.ml 238 2>>*/ var
               _jZ_=
                0 !== caml_ml_string_length(state[5])?1:0;
              return _jZ_? /*<<lib/gui.ml 721 40>>*/ draw_map(state):_jZ_ /*<<lib/gui.ml 721 54>>*/ },
            /*<<lib/gui.ml 705 2>>*/ game_loop=
            function(state)
             { /*<<lib/gui.ml 762 2>>*/ if(state[20])
               { /*<<lib/gui.ml 735 14>>*/ var
                  /*<<lib/gui.ml 735 14>>*/ modal=
                   /*<<lib/gui.ml 735 14>>*/ createDiv(doc),
                  /*<<lib/gui.ml 736 25>>*/ modal_background=
                   /*<<lib/gui.ml 736 25>>*/ createDiv(doc),
                  /*<<lib/gui.ml 737 22>>*/ modal_content=
                   /*<<lib/gui.ml 737 22>>*/ createDiv(doc),
                  /*<<lib/gui.ml 738 21>>*/ modal_button=
                   /*<<lib/gui.ml 738 21>>*/ createButton(0,0,doc),
                  /*<<lib/js_of_ocaml/dom_html.ml 2530 38>>*/ message=
                   /*<<lib/js_of_ocaml/dom_html.ml 2530 38>>*/ unsafeCreateElement
                   (doc,_eo_);
                modal.className = "modal is-active";
                modal_background.className = "modal-background";
                modal_content.className
                =
                "modal-content is-flex is-justify-content-center has-text-light";
                modal_button.className = "modal-close is-large";
                 /*<<lib/gui.ml 746 2>>*/  /*<<lib/gui.ml 746 2>>*/ addEventListener
                 (modal_button,
                  click,
                   /*<<lib/gui.ml 747 4>>*/ handler
                   (function(param)
                     { /*<<?>>*/ var t192=t196.location;
                      t192.reload();
                      return true$0 /*<<lib/gui.ml 749 17>>*/ }),
                  false$0);
                message.innerHTML
                =
                 /*<<lib/gui.ml 752 25>>*/ caml_jsstring_of_string(state[23]);
                 /*<<lib/gui.ml 753 2>>*/  /*<<lib/gui.ml 753 2>>*/ appendChild
                 (modal,modal_background);
                 /*<<lib/gui.ml 754 2>>*/  /*<<lib/gui.ml 754 2>>*/ appendChild
                 (modal,modal_content);
                 /*<<lib/gui.ml 755 2>>*/  /*<<lib/gui.ml 755 2>>*/ appendChild
                 (modal,modal_button);
                 /*<<lib/gui.ml 756 2>>*/  /*<<lib/gui.ml 756 2>>*/ appendChild
                 (modal_content,message);
                 /*<<lib/gui.ml 756 2>>*/ return  /*<<lib/gui.ml 756 2>>*/ appendChild
                        (main_div,modal)}
               /*<<lib/gui.ml 770 4>>*/  /*<<lib/gui.ml 770 4>>*/ update_statistics
               (state);
               /*<<lib/gui.ml 763 22>>*/ var
                /*<<lib/gui.ml 763 22>>*/ update_time=state[4] + state[3],
                /*<<lib/gui.ml 764 23>>*/ current_time=
                 /*<<lib/gui.ml 764 23>>*/ unix_gettimeofday(0),
                /*<<lib/gui.ml 764 23>>*/ is_next_state=
                update_time < current_time?1:0;
               /*<<lib/gui.ml 764 23>>*/ if(is_next_state)
               {var switch$0=0;
                 /*<<lib/state.ml 652 2>>*/ if(1 - state[19])
                 { /*<<lib/state.ml 652 30>>*/  /*<<lib/state.ml 652 30>>*/ var
                   _ju_=
                    function(_jY_){ /*<<?>>*/ return 1 - _jY_};
                   /*<<lib/state.ml 653 7>>*/ if
                   ( /*<<lib/state.ml 653 7>>*/ symbol$0(state[1],_ju_))
                   { /*<<lib/state.ml 263 2>>*/ var
                      /*<<lib/state.ml 263 2>>*/ _js_=0 !== state[21]?1:0,
                      /*<<lib/state.ml 263 2>>*/ _jt_=_js_ || state[22];
                     /*<<lib/state.ml 264 4>>*/ if(_jt_)
                      /*<<lib/state.ml 264 4>>*/ state[20] = 1;
                     /*<<lib/state.ml 263 2>>*/ var
                      /*<<lib/state.ml 269 2>>*/ cond=state[21],
                      /*<<lib/state.ml 269 2>>*/ message$0=
                      1 === cond
                       ?_eW_
                       :2 === cond?_eX_:3 === cond?_eY_:state[22]?_eZ_:_e0_;
                     /*<<lib/state.ml 287 2>>*/ if(state[20])
                      /*<<lib/state.ml 287 29>>*/ state[23] = message$0}
                   /*<<lib/state.ml 655 33>>*/ if(1 - state[20])
                   { /*<<lib/state.ml 657 35>>*/  /*<<lib/state.ml 657 35>>*/ var
                     _jv_=
                      function(_jX_){ /*<<?>>*/ return _jX_ + 1 | 0};
                     /*<<lib/state.ml 658 20>>*/ state[2]
                    =
                     /*<<lib/state.ml 658 20>>*/ symbol$0(state[2],_jv_);
                     /*<<lib/state.ml 657 35>>*/ var
                      /*<<lib/state.ml 170 2>>*/ _ji_=state[10],
                      /*<<lib/state.ml 170 2>>*/ _jj_=0,
                      /*<<lib/state.ml 170 2>>*/ param$1=
                       /*<<lib/state.ml 170 2>>*/ symbol$0
                       ( /*<<lib/state.ml 170 2>>*/ fold_left$0
                         (function(acc,row)
                           { /*<<lib/state.ml 172 6>>*/  /*<<lib/state.ml 172 6>>*/ var
                             _jW_=
                              0;
                             /*<<lib/state.ml 172 6>>*/ return [0,
                                     /*<<lib/state.ml 172 6>>*/ fold_left$0
                                     (function(acc,cell)
                                       { /*<<lib/state.ml 174 10>>*/ if
                                         (typeof cell !== "number" && 0 === cell[0])
                                         { /*<<lib/state.ml 174 40>>*/  /*<<lib/state.ml 174 40>>*/ var
                                           b=
                                            cell[1];
                                           /*<<lib/state.ml 174 40>>*/ return [0,b,acc]}
                                         /*<<lib/state.ml 174 56>>*/ return acc /*<<lib/state.ml 174 59>>*/ },
                                      _jW_,
                                      row),
                                    acc] /*<<lib/state.ml 176 12>>*/ },
                          _jj_,
                          _ji_),
                        flatten),
                      /*<<lib/state.ml 660 27>>*/ _jw_=
                      function(stockpile$2)
                       {var stockpile=stockpile$2,param=param$1;
                        for(;;)
                         {if(param)
                           { /*<<lib/state.ml 293 2>>*/ var
                             t=param[2],
                             h=param[1],
                              /*<<lib/state.ml 293 2>>*/ _jI_=1,
                              /*<<lib/state.ml 293 2>>*/ _jJ_=
                               /*<<lib/state.ml 293 2>>*/ function(stockpile)
                                { /*<<?>>*/ return function(acc,dependency)
                                  { /*<<lib/state.ml 296 20>>*/ var
                                     /*<<lib/state.ml 296 20>>*/ name=dependency[1],
                                     /*<<lib/state.ml 297 22>>*/ amount=dependency[2];
                                    /*<<lib/state.ml 297 22>>*/ try
                                    { /*<<lib/state.ml 299 15>>*/ var
                                       /*<<lib/state.ml 299 15>>*/ _jU_=
                                        /*<<lib/state.ml 299 15>>*/ assoc(name,stockpile)
                                       -
                                       amount
                                       |
                                       0,
                                      new_amount=_jU_}
                                   catch(_jV_)
                                    {_jV_ = caml_wrap_exception(_jV_);
                                     if(_jV_ !== Not_found)throw _jV_;
                                     var new_amount=-1}
                                    /*<<lib/state.ml 301 9>>*/ if(0 <= new_amount)
                                    { /*<<lib/state.ml 301 33>>*/  /*<<lib/state.ml 301 33>>*/ var
                                      _jS_=
                                       acc?1:acc;
                                      /*<<lib/state.ml 301 50>>*/ return _jS_}
                                    /*<<lib/state.ml 296 20>>*/  /*<<lib/state.ml 301 50>>*/ var
                                    _jT_=
                                     acc?0:acc;
                                   return _jT_ /*<<lib/state.ml 301 62>>*/ }}
                               (stockpile),
                              /*<<lib/state.ml 294 5>>*/ _jK_=
                               /*<<lib/state.ml 294 5>>*/ function(_jP_,_jQ_)
                                { /*<<?>>*/ return function(_jR_)
                                  { /*<<?>>*/ return fold_left(_jQ_,_jP_,_jR_)}}
                               (_jI_,_jJ_);
                            if( /*<<lib/state.ml 294 5>>*/ symbol$0(h[7],_jK_))
                             { /*<<lib/state.ml 367 56>>*/ var
                                /*<<lib/state.ml 367 56>>*/ _jL_=
                                 /*<<lib/state.ml 367 56>>*/ function(h)
                                  { /*<<?>>*/ return function(stockpile)
                                    { /*<<lib/state.ml 343 2>>*/ var
                                       /*<<lib/state.ml 343 2>>*/ output=h[4],
                                       /*<<lib/state.ml 344 20>>*/ output_name=output[1],
                                       /*<<lib/state.ml 345 15>>*/ change=output[2];
                                      /*<<lib/state.ml 346 5>>*/ return  /*<<lib/state.ml 346 5>>*/ caml_string_equal
                                              (output_name,_e6_)
                                             ?stockpile
                                             : /*<<lib/state.ml 348 4>>*/ map$0
                                               (function(param)
                                                 { /*<<lib/state.ml 349 6>>*/ var
                                                    /*<<lib/state.ml 349 6>>*/ value=param[2],
                                                    /*<<lib/state.ml 349 6>>*/ name=param[1];
                                                   /*<<lib/state.ml 350 11>>*/ return  /*<<lib/state.ml 350 11>>*/ caml_string_equal
                                                           (name,output_name)
                                                          ?[0,name,value + change | 0]
                                                          :[0,name,value] /*<<lib/state.ml 351 27>>*/ },
                                                stockpile)}}
                                 (h),
                                /*<<lib/state.ml 367 40>>*/ _jM_=
                                 /*<<lib/state.ml 367 40>>*/ function(h)
                                  { /*<<?>>*/ return function(stockpile)
                                    { /*<<lib/state.ml 334 2>>*/ var
                                       /*<<lib/state.ml 334 2>>*/ _jO_=h[5],
                                       /*<<lib/state.ml 334 18>>*/ new_money=
                                        /*<<lib/state.ml 334 18>>*/ assoc(_e4_,stockpile)
                                       +
                                       _jO_
                                       |
                                       0;
                                      /*<<lib/state.ml 334 18>>*/ return  /*<<lib/state.ml 334 18>>*/ map$0
                                             (function(param)
                                               { /*<<lib/state.ml 336 4>>*/ var
                                                  /*<<lib/state.ml 336 4>>*/ value=param[2],
                                                  /*<<lib/state.ml 336 4>>*/ name=param[1];
                                                 /*<<lib/state.ml 337 9>>*/ return  /*<<lib/state.ml 337 9>>*/ caml_string_equal
                                                         (name,_e5_)
                                                        ?[0,name,new_money]
                                                        :[0,name,value] /*<<lib/state.ml 337 66>>*/ },
                                              stockpile)}}
                                 (h),
                                /*<<lib/state.ml 367 15>>*/ _jN_=
                                 /*<<lib/state.ml 367 15>>*/ function(h)
                                  { /*<<?>>*/ return function(stockpile$1)
                                    {var resource_dependency=h[7],stockpile=stockpile$1;
                                      /*<<lib/state.ml 317 4>>*/ for(;;)
                                      { /*<<lib/state.ml 317 4>>*/ if(resource_dependency)
                                        { /*<<lib/state.ml 320 26>>*/ var
                                          t=resource_dependency[2],
                                          h$0=resource_dependency[1],
                                           /*<<lib/state.ml 320 26>>*/ output_name=h$0[1],
                                           /*<<lib/state.ml 321 21>>*/ change=h$0[2],
                                           /*<<lib/state.ml 321 21>>*/ filter_value$0=
                                           function(output_name,change)
                                            {function filter_value(param)
                                              {var value=param[2],name=param[1];
                                                /*<<lib/state.ml 323 13>>*/ return  /*<<lib/state.ml 323 13>>*/ caml_string_equal
                                                        (name,output_name)
                                                       ?[0,name,value - change | 0]
                                                       :[0,name,value]}
                                             return filter_value},
                                           /*<<lib/state.ml 321 21>>*/ filter_value=
                                            /*<<lib/state.ml 321 21>>*/ filter_value$0
                                            (output_name,change);
                                          /*<<lib/state.ml 326 11>>*/ if
                                          ( /*<<lib/state.ml 326 11>>*/ caml_string_equal
                                            (output_name,_e3_))
                                           /*<<lib/state.ml 326 33>>*/ return stockpile;
                                          /*<<lib/state.ml 320 26>>*/ var
                                           /*<<lib/state.ml 327 39>>*/ stockpile$0=
                                            /*<<lib/state.ml 327 39>>*/ map$0(filter_value,stockpile),
                                          resource_dependency=t,
                                          stockpile=stockpile$0;
                                         continue}
                                        /*<<lib/state.ml 318 12>>*/ return stockpile}}}
                                 (h),
                                /*<<lib/state.ml 366 12>>*/ stockpile$0=
                                 /*<<lib/state.ml 366 12>>*/ symbol$0
                                 ( /*<<lib/state.ml 366 12>>*/ symbol$0
                                   ( /*<<lib/state.ml 366 12>>*/ symbol$0
                                     ( /*<<lib/state.ml 366 12>>*/ subtract_maintenace
                                       (h,stockpile),
                                      _jN_),
                                    _jM_),
                                  _jL_),
                               stockpile=stockpile$0,
                               param=t;
                              continue}
                             /*<<lib/state.ml 293 2>>*/ var
                              /*<<lib/state.ml 362 30>>*/ stockpile$1=
                               /*<<lib/state.ml 362 30>>*/ subtract_maintenace
                               (h,stockpile),
                             stockpile=stockpile$1,
                             param=t;
                            continue}
                           /*<<lib/state.ml 359 12>>*/ return stockpile}};
                     /*<<lib/state.ml 660 8>>*/ state[24]
                    =
                     /*<<lib/state.ml 660 8>>*/ symbol$0(state[24],_jw_);
                     /*<<lib/state.ml 216 2>>*/ if(0 === (state[2] % 3 | 0))
                     { /*<<lib/state.ml 182 2>>*/ var
                        /*<<lib/state.ml 182 2>>*/ _jk_=state[10],
                        /*<<lib/state.ml 182 2>>*/ _jl_=0,
                        /*<<lib/state.ml 182 2>>*/ homes=
                         /*<<lib/state.ml 182 2>>*/ fold_left$0
                         (function(acc,row)
                           { /*<<lib/state.ml 184 6>>*/  /*<<lib/state.ml 184 6>>*/ var
                             _jH_=
                              0;
                             /*<<lib/state.ml 184 6>>*/ return  /*<<lib/state.ml 184 6>>*/ fold_left$0
                                    (function(acc,cell)
                                      { /*<<lib/state.ml 186 10>>*/ if
                                        (typeof cell !== "number" && 0 === cell[0])
                                        {var b=cell[1],switch$0=0;
                                          /*<<lib/state.ml 188 37>>*/ if
                                          ( /*<<lib/state.ml 188 17>>*/ caml_string_equal(b[1],_eR_)
                                           ||
                                            /*<<lib/state.ml 188 37>>*/ caml_string_equal(b[1],_eS_))
                                          switch$0 = 1;
                                          /*<<camlinternalFormatBasics.ml 528 8>>*/ if(switch$0)
                                           /*<<lib/state.ml 189 14>>*/ return b[9] + acc | 0}
                                        /*<<lib/state.ml 190 17>>*/ return acc /*<<lib/state.ml 190 20>>*/ },
                                     _jH_,
                                     row)
                                   +
                                   acc
                                   |
                                   0 /*<<lib/state.ml 192 11>>*/ },
                          _jl_,
                          _jk_),
                        /*<<lib/state.ml 218 19>>*/ increase=
                         /*<<lib/state.ml 218 19>>*/ symbol$0
                         (0.5 * homes,function(_jG_){ /*<<?>>*/ return _jG_ | 0});
                       /*<<lib/state.ml 218 19>>*/ state[14]
                      =
                      state[14]
                      +
                      increase
                      |
                      0;
                       /*<<lib/state.ml 218 19>>*/ state[15]
                      =
                      state[15]
                      +
                      increase
                      |
                      0}
                     /*<<lib/state.ml 657 35>>*/  /*<<lib/state.ml 199 2>>*/ var
                     _jm_=
                      state[24];
                     /*<<lib/state.ml 200 4>>*/ state[24]
                    =
                     /*<<lib/state.ml 200 4>>*/ map$0
                     (function(param)
                       { /*<<lib/state.ml 201 6>>*/ var
                          /*<<lib/state.ml 201 6>>*/ v=param[2],
                          /*<<lib/state.ml 201 6>>*/ k=param[1];
                         /*<<lib/state.ml 202 11>>*/ return  /*<<lib/state.ml 202 11>>*/ caml_string_equal
                                 (k,_eT_)
                                ?[0,k,v - (0.25 * state[14] | 0) | 0]
                                :[0,k,v] /*<<lib/state.ml 204 20>>*/ },
                      _jm_);
                     /*<<lib/state.ml 657 35>>*/ var
                      /*<<lib/state.ml 210 28>>*/ _jn_=
                      -
                      (0.25 * state[14] | 0)
                      |
                      0,
                      /*<<lib/state.ml 210 7>>*/ _jo_=
                      function(_jF_){ /*<<?>>*/ return _jn_ + _jF_ | 0},
                      /*<<lib/state.ml 210 7>>*/ _jp_=
                      function(param)
                       { /*<<lib/state.ml 208 17>>*/  /*<<lib/state.ml 208 17>>*/ var
                         name=
                          param[1];
                         /*<<lib/state.ml 208 35>>*/ return  /*<<lib/state.ml 208 35>>*/ caml_string_equal
                                (name,_eU_) /*<<lib/state.ml 208 49>>*/ },
                      /*<<lib/state.ml 208 7>>*/ _jq_=
                      function(_jE_){ /*<<?>>*/ return find(_jp_,_jE_)};
                     /*<<lib/state.ml 207 4>>*/ state[16]
                    =
                     /*<<lib/state.ml 207 4>>*/ symbol$0
                     ( /*<<lib/state.ml 207 4>>*/ symbol$0
                       ( /*<<lib/state.ml 207 4>>*/ symbol$0(state[24],_jq_),
                        resource_amount),
                      _jo_);
                    if(state[1])
                     { /*<<lib/state.ml 664 8>>*/  /*<<lib/state.ml 664 8>>*/ var
                       _jx_=
                        state[24];
                       /*<<lib/state.ml 666 13>>*/ state[24]
                      =
                      [0,
                       _gk_,
                        /*<<lib/state.ml 666 13>>*/ caml_call1
                        ( /*<<lib/state.ml 666 13>>*/ find_all
                          (function(param)
                            { /*<<lib/state.ml 666 25>>*/  /*<<lib/state.ml 666 25>>*/ var
                              k=
                               param[1];
                              /*<<lib/state.ml 666 40>>*/ return  /*<<lib/state.ml 666 40>>*/ caml_string_notequal
                                     (k,_gj_) /*<<lib/state.ml 666 53>>*/ }),
                         _jx_)]}
                    else
                     { /*<<lib/state.ml 225 2>>*/ if(0 <= state[16])
                       { /*<<lib/state.ml 227 7>>*/ if(0 < state[18])
                          /*<<lib/state.ml 228 4>>*/ state[18] = 0}
                      else
                        /*<<lib/state.ml 226 4>>*/ state[18] = state[18] + 1 | 0;
                      var param$2=state[24];
                       /*<<lib/state.ml 232 36>>*/ for(;;)
                       { /*<<lib/state.ml 232 36>>*/ if(param$2)
                         {var t=param$2[2],h=param$2[1],switch$1=0;
                           /*<<lib/state.ml 235 49>>*/ if
                           (!
                            (0 <= h[2])
                            &&
                             /*<<lib/state.ml 235 49>>*/ caml_string_notequal(h[1],_eV_))
                           {var _jr_=0;switch$1 = 1}
                          if(! switch$1){var param$2=t;continue}}
                        else
                         var _jr_=1;
                        if(_jr_)
                         { /*<<lib/state.ml 242 7>>*/ if(0 < state[17])
                            /*<<lib/state.ml 242 41>>*/ state[17] = 0}
                        else
                          /*<<lib/state.ml 241 4>>*/ state[17] = state[17] + 1 | 0;
                         /*<<lib/state.ml 247 2>>*/ if(400 < state[2])
                          /*<<lib/state.ml 247 34>>*/ state[21] = 1;
                         /*<<lib/state.ml 252 2>>*/ if(20 < state[18])
                          /*<<lib/state.ml 253 4>>*/ state[21] = 2;
                         /*<<lib/state.ml 258 2>>*/ if(20 < state[17])
                          /*<<lib/state.ml 258 48>>*/ state[21] = 3;
                        break}}
                     /*<<lib/state.ml 657 35>>*/  /*<<lib/state.ml 674 9>>*/ var
                     _jy_=
                      0 ===  /*<<lib/state.ml 674 9>>*/ int$0(200)?1:0;
                     /*<<lib/state.ml 674 9>>*/ if(_jy_)
                      /*<<lib/state.ml 674 51>>*/ var
                       /*<<lib/state.ml 674 51>>*/ _jz_=
                       function(_jD_){ /*<<?>>*/ return 1 - _jD_},
                      _jA_= /*<<lib/state.ml 674 31>>*/ symbol$0(state[1],_jz_);
                    else
                     var _jA_=_jy_;
                     /*<<lib/state.ml 674 54>>*/ if(_jA_)
                     { /*<<lib/state.ml 584 14>>*/ var
                        /*<<lib/state.ml 584 14>>*/ level=
                         /*<<lib/state.ml 584 14>>*/ assoc(_gd_,state[24]),
                        /*<<lib/state.ml 584 14>>*/ difficulty=
                        1000 <= level?2000 <= level?_ge_:_gf_:_gg_,
                        /*<<lib/state.ml 590 18>>*/ l=
                         /*<<lib/state.ml 590 18>>*/ assoc(difficulty,events),
                       len=0,
                       param=l;
                      for(;;)
                       {if(param)
                         { /*<<list.ml 23 12>>*/ var
                            /*<<list.ml 23 12>>*/ param$0=param[2],
                            /*<<list.ml 23 12>>*/ len$0=len + 1 | 0,
                           len=len$0,
                           param=param$0;
                          continue}
                         /*<<lib/state.ml 592 4>>*/ var
                          /*<<lib/state.ml 592 4>>*/ match=
                           /*<<lib/state.ml 592 4>>*/ nth
                           (l, /*<<lib/state.ml 592 23>>*/ int$0(len)),
                          /*<<lib/state.ml 592 4>>*/ c=match[3],
                          /*<<lib/state.ml 592 4>>*/ s$0=match[2],
                          /*<<lib/state.ml 592 4>>*/ t$1=match[1],
                         s=state[24],
                         param$3=s$0;
                        for(;;)
                         {if(param$3)
                           { /*<<lib/state.ml 553 26>>*/ var
                             t$0=param$3[2],
                             h$0=param$3[1],
                              /*<<lib/state.ml 553 26>>*/ resource_name=h$0[1],
                              /*<<lib/state.ml 554 28>>*/ resource_amount$0=h$0[2],
                              /*<<lib/state.ml 554 28>>*/ filter_resource$0=
                              function(resource_name,resource_amount)
                               {function filter_resource(param)
                                 {var value=param[2],name=param[1];
                                   /*<<lib/state.ml 556 11>>*/ return  /*<<lib/state.ml 556 11>>*/ caml_string_equal
                                           (name,resource_name)
                                          ?[0,name,value + resource_amount | 0]
                                          :[0,name,value]}
                                return filter_resource},
                              /*<<lib/state.ml 554 28>>*/ filter_resource=
                               /*<<lib/state.ml 554 28>>*/ filter_resource$0
                               (resource_name,resource_amount$0),
                              /*<<lib/state.ml 559 22>>*/ stockpile=
                               /*<<lib/state.ml 559 22>>*/ map$0(filter_resource,s),
                             s=stockpile,
                             param$3=t$0;
                            continue}
                          state[5] = t$1;
                          state[24] = s;
                          var _jB_=state[10];
                           /*<<lib/state.ml 565 2>>*/  /*<<lib/state.ml 565 2>>*/ iteri
                           (function(i,row)
                             { /*<<lib/state.ml 567 6>>*/ return  /*<<lib/state.ml 567 6>>*/ iteri
                                      (function(j,cell)
                                        { /*<<lib/state.ml 569 10>>*/ if
                                          (typeof cell !== "number" && 0 === cell[0])
                                          { /*<<lib/state.ml 571 14>>*/  /*<<lib/state.ml 571 14>>*/ var
                                            building=
                                             cell[1];
                                            /*<<lib/state.ml 571 14>>*/ if(c < building[6])
                                            {var
                                              _jC_=
                                               [0,
                                                [0,
                                                 building[1],
                                                 building[2],
                                                 building[3],
                                                 building[4],
                                                 building[5],
                                                 building[6] - c | 0,
                                                 building[7],
                                                 building[8],
                                                 building[9],
                                                 building[10]]];
                                              /*<<lib/state.ml 572 25>>*/  /*<<lib/state.ml 572 25>>*/ caml_check_bound
                                               ( /*<<lib/state.ml 572 16>>*/ caml_check_bound(_jB_,i)
                                                 [1 + i],
                                                j)
                                              [1 + j]
                                             =
                                             _jC_;
                                              /*<<lib/state.ml 572 25>>*/ return 0}
                                            /*<<lib/state.ml 574 28>>*/  /*<<lib/state.ml 574 28>>*/ caml_check_bound
                                             ( /*<<lib/state.ml 574 19>>*/ caml_check_bound(_jB_,i)
                                               [1 + i],
                                              j)
                                            [1 + j]
                                           =
                                           0;
                                            /*<<lib/state.ml 574 28>>*/ return 0}
                                          /*<<lib/state.ml 575 17>>*/ return 0 /*<<lib/state.ml 575 19>>*/ },
                                       row) /*<<lib/state.ml 576 11>>*/ },
                            _jB_);
                          switch$0 = 1;
                          break}
                        break}}}}}
               /*<<lib/gui.ml 766 42>>*/ if(is_next_state)
                /*<<lib/gui.ml 767 26>>*/ state[4] = current_time;
               /*<<lib/gui.ml 772 7>>*/ if
               ( /*<<lib/gui.ml 772 7>>*/ caml_string_notequal(state[5],_hq_))
               { /*<<lib/gui.ml 643 2>>*/  /*<<lib/gui.ml 643 2>>*/ var
                 notification_handler=
                  function(param)
                   { /*<<lib/gui.ml 644 7>>*/ if
                     ( /*<<lib/gui.ml 644 7>>*/ caml_string_notequal
                       (state[5],_hn_))
                     { /*<<lib/gui.ml 645 6>>*/  /*<<lib/gui.ml 645 6>>*/ removeChild
                       (notification_div,notification_button);
                       /*<<lib/gui.ml 646 6>>*/  /*<<lib/gui.ml 646 6>>*/ removeChild
                       (notification_div,notification_content);
                       /*<<lib/gui.ml 647 6>>*/  /*<<lib/gui.ml 647 6>>*/ removeChild
                       (notification_container_div,notification_div)}
                     /*<<lib/gui.ml 647 65>>*/ state[5] = _ho_;
                     /*<<lib/gui.ml 647 65>>*/ return true$0 /*<<lib/gui.ml 650 12>>*/ };
                notification_content.innerHTML
                =
                 /*<<lib/gui.ml 652 38>>*/ caml_jsstring_of_string(state[5]);
                 /*<<lib/gui.ml 653 2>>*/  /*<<lib/gui.ml 653 2>>*/ appendChild
                 (notification_div,notification_button);
                 /*<<lib/gui.ml 654 2>>*/  /*<<lib/gui.ml 654 2>>*/ appendChild
                 (notification_div,notification_content);
                 /*<<lib/gui.ml 655 2>>*/  /*<<lib/gui.ml 655 2>>*/ appendChild
                 (notification_container_div,notification_div);
                 /*<<lib/gui.ml 656 2>>*/  /*<<lib/gui.ml 656 2>>*/ addEventListener
                 (notification_button,
                  click,
                   /*<<lib/gui.ml 657 4>>*/ handler(notification_handler),
                  false$0)}
               /*<<lib/gui.ml 763 22>>*/  /*<<lib/gui.ml 774 24>>*/ var
               t195=
                 /*<<lib/gui.ml 774 24>>*/ caml_js_wrap_callback
                 (function(param)
                   { /*<<lib/gui.ml 774 34>>*/ return  /*<<lib/gui.ml 774 34>>*/ game_loop
                            (state) /*<<lib/gui.ml 774 49>>*/ });
              t196.requestAnimationFrame(t195);
              return 0 /*<<lib/gui.ml 777 27>>*/ },
            /*<<lib/gui.ml 705 2>>*/ trigger_game_loop=
            function(state)
             { /*<<lib/gui.ml 780 2>>*/  /*<<lib/gui.ml 780 2>>*/ toggle_startup
               (0);
               /*<<lib/gui.ml 781 2>>*/  /*<<lib/gui.ml 781 2>>*/ toggle_game
               (1);
              t83.clearRect(0.,0.,state[6][1],state[6][2]);
              t118.clearRect(0.,0.,state[6][1],state[6][2]);
              bg_canvas.width = state[6][1];
              bg_canvas.height = state[6][2];
              t88.width = state[6][1];
              t88.height = state[6][2];
               /*<<lib/gui.ml 261 45>>*/ var
                /*<<lib/gui.ml 261 45>>*/ t38=state[8][2] * 2.,
                /*<<lib/gui.ml 260 35>>*/ t37=bg_canvas.width / 2.;
              t83.translate(t37,t38);
               /*<<lib/gui.ml 261 45>>*/ var
                /*<<lib/gui.ml 264 45>>*/ t42=state[8][2] * 2.,
                /*<<lib/gui.ml 263 35>>*/ t41=t88.width / 2.;
              t118.translate(t41,t42);
               /*<<lib/gui.ml 727 2>>*/  /*<<lib/gui.ml 727 2>>*/ update_statistics
               (state);
               /*<<lib/gui.ml 261 45>>*/  /*<<lib/gui.ml 727 2>>*/ var
               _ie_=
                state[9];
               /*<<lib/gui.ml 499 2>>*/  /*<<lib/gui.ml 499 2>>*/ mapi
               (function(i,param)
                 { /*<<lib/gui.ml 500 4>>*/ var
                    /*<<lib/gui.ml 500 4>>*/ img=param[2],
                    /*<<lib/gui.ml 500 4>>*/ name=param[1],
                    /*<<lib/gui.ml 501 16>>*/ box=
                     /*<<lib/gui.ml 501 16>>*/ createDiv(doc),
                    /*<<lib/js_of_ocaml/dom_html.ml 2594 21>>*/ span=
                     /*<<lib/js_of_ocaml/dom_html.ml 2594 21>>*/ createElement
                     (doc,_er_);
                  span.innerHTML
                  =
                   /*<<lib/gui.ml 503 70>>*/ caml_jsstring_of_string
                   ( /*<<lib/gui.ml 503 36>>*/ symbol
                     (name,
                       /*<<lib/gui.ml 503 44>>*/ symbol
                       (_hj_, /*<<lib/gui.ml 503 51>>*/ find_cost(_ie_,name))));
                  span.className = "is-size-7 has-text-weight-light";
                  span.id
                  =
                   /*<<lib/gui.ml 505 41>>*/ caml_jsstring_of_string
                   ( /*<<lib/gui.ml 505 19>>*/ caml_string_of_jsbytes("" + i));
                  box.className
                  =
                  "block mr-3 my-3 p-2 is-flex is-flex-direction-column is-justify-content-space-between is-align-items-center";
                  box.style.minWidth = "100px";
                  box.id
                  =
                   /*<<lib/gui.ml 511 40>>*/ caml_jsstring_of_string
                   ( /*<<lib/gui.ml 511 18>>*/ caml_string_of_jsbytes("" + i));
                  box.style.border = "1px solid hsl(0, 0%, 96%)";
                  box.style.borderRadius = "5px";
                  img.id
                  =
                   /*<<lib/gui.ml 514 40>>*/ caml_jsstring_of_string
                   ( /*<<lib/gui.ml 514 18>>*/ caml_string_of_jsbytes("" + i));
                  img.className = "image is-64x64";
                   /*<<lib/gui.ml 516 6>>*/  /*<<lib/gui.ml 516 6>>*/ appendChild
                   (selection_div,box);
                   /*<<lib/gui.ml 517 6>>*/  /*<<lib/gui.ml 517 6>>*/ appendChild
                   (box,img);
                   /*<<lib/gui.ml 517 6>>*/ return  /*<<lib/gui.ml 517 6>>*/ appendChild
                          (box,span) /*<<lib/gui.ml 518 31>>*/ },
                textures);
               /*<<lib/gui.ml 443 2>>*/  /*<<lib/gui.ml 443 2>>*/ addEventListener
               (t88,
                mousemove,
                 /*<<lib/gui.ml 444 4>>*/ handler
                 (function(event)
                   { /*<<lib/gui.ml 418 42>>*/ var
                      /*<<lib/gui.ml 418 42>>*/ canvas_width=state[6][1],
                      /*<<lib/gui.ml 419 43>>*/ canvas_height=state[6][2],
                      /*<<lib/gui.ml 419 43>>*/ map_length=state[7],
                      /*<<lib/gui.ml 421 18>>*/ param=
                       /*<<lib/gui.ml 421 18>>*/ cell_positions(state,event),
                      /*<<lib/gui.ml 421 18>>*/ t117=canvas_height * 2 | 0,
                      /*<<lib/gui.ml 426 4>>*/ t116=canvas_width * 2 | 0,
                      /*<<lib/gui.ml 425 4>>*/ t115=- canvas_height | 0,
                      /*<<lib/gui.ml 424 4>>*/ t114=- canvas_width | 0;
                    t118.clearRect(t114,t115,t116,t117);
                     /*<<lib/gui.ml 418 42>>*/ var switch$0=0;
                    if
                     (0
                      <=
                      param[1]
                      &&
                      param[1]
                      <
                      map_length
                      &&
                      0
                      <=
                      param[2]
                      &&
                      param[2]
                      <
                      map_length)
                     { /*<<lib/gui.ml 269 38>>*/ var
                       y=param[2],
                       x=param[1],
                        /*<<lib/gui.ml 269 38>>*/ cell_width=state[8][1],
                        /*<<lib/gui.ml 270 39>>*/ cell_height=state[8][2];
                      t118.save();
                       /*<<lib/gui.ml 269 38>>*/ var
                        /*<<lib/gui.ml 275 31>>*/ t46=(x + y) * cell_height / 2.,
                        /*<<lib/gui.ml 273 66>>*/ t45=(y - x) * cell_width / 2.;
                      t118.translate(t45,t46);
                      t118.beginPath();
                      t118.moveTo(0.,0.);
                       /*<<lib/gui.ml 269 38>>*/ var
                        /*<<lib/gui.ml 281 29>>*/ t53=cell_height / 2.,
                        /*<<lib/gui.ml 280 28>>*/ t52=cell_width / 2.;
                      t118.lineTo(t52,t53);
                      t118.lineTo(0.,cell_height);
                       /*<<lib/gui.ml 269 38>>*/ var
                        /*<<lib/gui.ml 285 29>>*/ t59=cell_height / 2.,
                        /*<<lib/gui.ml 284 30>>*/ t58=- cell_width / 2.;
                      t118.lineTo(t58,t59);
                      t118.lineTo(0.,0.);
                      t118.closePath();
                      t118.fillStyle = "hsla(60, 100%, 50%, 0.25)";
                      t118.fill();
                      t118.restore();
                       /*<<lib/gui.ml 269 38>>*/ var y$0=param[2],x$0=param[1];
                       /*<<lib/gui.ml 356 67>>*/ for(;;)
                       { /*<<lib/gui.ml 354 35>>*/ if(t92.hasChildNodes() | 0)
                         { /*<<lib/gui.ml 355 4>>*/  /*<<lib/gui.ml 355 4>>*/ var
                           _jh_=
                            function(param)
                             { /*<<lib/gui.ml 356 50>>*/ throw Not_found /*<<lib/gui.ml 356 65>>*/ };
                           /*<<lib/gui.ml 355 4>>*/  /*<<lib/gui.ml 355 4>>*/ removeChild
                           (t92, /*<<lib/gui.ml 356 6>>*/ get(t92.firstChild,_jh_));
                          continue}
                         /*<<lib/gui.ml 358 18>>*/  /*<<lib/gui.ml 358 18>>*/ var
                         bold_name=
                           /*<<lib/gui.ml 358 18>>*/ createDiv(doc);
                        bold_name.className = "has-text-bold";
                         /*<<lib/gui.ml 358 18>>*/  /*<<lib/gui.ml 360 23>>*/ var
                         match=
                           /*<<lib/gui.ml 360 23>>*/ caml_check_bound
                            ( /*<<lib/gui.ml 360 8>>*/ caml_check_bound(state[10],x$0)
                              [1 + x$0],
                             y$0)
                           [1 + y$0];
                         /*<<lib/gui.ml 360 23>>*/ if(typeof match === "number")
                         {bold_name.innerHTML = "Sand";
                           /*<<lib/gui.ml 363 6>>*/  /*<<lib/gui.ml 363 6>>*/ appendChild
                           (t92,bold_name);
                           /*<<lib/gui.ml 363 6>>*/  /*<<lib/gui.ml 363 6>>*/ appendChild
                           (info_container_div,t92)}
                        else
                          /*<<lib/gui.ml 360 23>>*/ if(0 === match[0])
                          { /*<<lib/gui.ml 370 28>>*/ var
                            building=match[1],
                             /*<<lib/gui.ml 370 28>>*/ output_name_div=
                              /*<<lib/gui.ml 370 28>>*/ createDiv(doc),
                             /*<<lib/gui.ml 371 30>>*/ output_amount_div=
                              /*<<lib/gui.ml 371 30>>*/ createDiv(doc),
                             /*<<lib/gui.ml 372 30>>*/ income_amount_div=
                              /*<<lib/gui.ml 372 30>>*/ createDiv(doc),
                             /*<<lib/gui.ml 373 31>>*/ defense_amount_div=
                              /*<<lib/gui.ml 373 31>>*/ createDiv(doc),
                             /*<<lib/gui.ml 374 35>>*/ maintenance_amount_div=
                              /*<<lib/gui.ml 374 35>>*/ createDiv(doc),
                             /*<<lib/gui.ml 374 35>>*/ elements=
                             [0,
                              output_name_div,
                              [0,
                               output_amount_div,
                               [0,
                                income_amount_div,
                                [0,defense_amount_div,[0,maintenance_amount_div,0]]]]];
                            /*<<lib/gui.ml 384 6>>*/  /*<<lib/gui.ml 384 6>>*/ iter$0
                            (function(element)
                              { /*<<lib/gui.ml 385 47>>*/ return element.className
                                      =
                                      "is-size-7" /*<<lib/gui.ml 385 68>>*/ },
                             elements);
                           bold_name.innerHTML
                           =
                            /*<<lib/gui.ml 388 52>>*/ caml_jsstring_of_string
                            ( /*<<lib/gui.ml 388 8>>*/ capitalize_ascii(building[1]));
                           output_name_div.innerHTML
                           =
                            /*<<lib/gui.ml 392 12>>*/ caml_jsstring_of_string
                            ( /*<<lib/gui.ml 390 9>>*/ symbol(_g9_,building[4][1]));
                           output_amount_div.innerHTML
                           =
                            /*<<lib/gui.ml 395 39>>*/ caml_jsstring_of_string
                            ( /*<<lib/gui.ml 394 9>>*/ symbol
                              (_g__,
                                /*<<lib/gui.ml 394 9>>*/ caml_string_of_jsbytes
                                ("" + building[4][2])));
                           income_amount_div.innerHTML
                           =
                            /*<<lib/gui.ml 398 12>>*/ caml_jsstring_of_string
                            ( /*<<lib/gui.ml 397 9>>*/ symbol
                              (_g$_,
                                /*<<lib/gui.ml 397 9>>*/ caml_string_of_jsbytes
                                ("" + building[5])));
                           defense_amount_div.innerHTML
                           =
                            /*<<lib/gui.ml 401 12>>*/ caml_jsstring_of_string
                            ( /*<<lib/gui.ml 400 9>>*/ symbol
                              (_ha_,
                                /*<<lib/gui.ml 400 9>>*/ caml_string_of_jsbytes
                                ("" + building[6])));
                           maintenance_amount_div.innerHTML
                           =
                            /*<<lib/gui.ml 404 12>>*/ caml_jsstring_of_string
                            ( /*<<lib/gui.ml 403 9>>*/ symbol
                              (_hb_,
                                /*<<lib/gui.ml 403 9>>*/ caml_string_of_jsbytes
                                ("" + building[3])));
                            /*<<lib/gui.ml 405 6>>*/  /*<<lib/gui.ml 405 6>>*/ appendChild
                            (t92,bold_name);
                            /*<<lib/gui.ml 406 41>>*/ if
                            ( /*<<lib/gui.ml 406 41>>*/ caml_string_notequal
                              (building[4][1],_hc_))
                            { /*<<lib/gui.ml 407 8>>*/  /*<<lib/gui.ml 407 8>>*/ appendChild
                              (t92,output_name_div);
                              /*<<lib/gui.ml 408 8>>*/  /*<<lib/gui.ml 408 8>>*/ appendChild
                              (t92,output_amount_div)}
                            /*<<lib/gui.ml 410 6>>*/  /*<<lib/gui.ml 410 6>>*/ appendChild
                            (t92,income_amount_div);
                            /*<<lib/gui.ml 411 6>>*/  /*<<lib/gui.ml 411 6>>*/ appendChild
                            (t92,defense_amount_div);
                            /*<<lib/gui.ml 412 6>>*/  /*<<lib/gui.ml 412 6>>*/ appendChild
                            (t92,maintenance_amount_div);
                            /*<<lib/gui.ml 412 6>>*/  /*<<lib/gui.ml 412 6>>*/ appendChild
                            (info_container_div,t92)}
                         else
                          {bold_name.innerHTML = "Road";
                            /*<<lib/gui.ml 367 6>>*/  /*<<lib/gui.ml 367 6>>*/ appendChild
                            (t92,bold_name);
                            /*<<lib/gui.ml 367 6>>*/  /*<<lib/gui.ml 367 6>>*/ appendChild
                            (info_container_div,t92)}
                        switch$0 = 1;
                        break}}
                     /*<<lib/gui.ml 437 2>>*/ return true$0}),
                false$0);
               /*<<lib/gui.ml 486 2>>*/  /*<<lib/gui.ml 486 2>>*/ addEventListener
               (t88,
                click,
                 /*<<lib/gui.ml 487 4>>*/ handler
                 (function(event)
                   { /*<<lib/gui.ml 451 18>>*/ var
                      /*<<lib/gui.ml 451 18>>*/ positions=
                       /*<<lib/gui.ml 451 18>>*/ cell_positions(state,event),
                      /*<<lib/gui.ml 453 11>>*/ name=
                       /*<<lib/gui.ml 453 11>>*/ is_selected(state)
                       ? /*<<lib/gui.ml 454 9>>*/ nth(textures,state[11])[1]
                       :_hh_,
                      /*<<lib/gui.ml 457 4>>*/ _iV_=
                       /*<<lib/gui.ml 457 4>>*/ is_selected(state);
                     /*<<lib/gui.ml 457 4>>*/ if(_iV_)
                     { /*<<lib/gui.ml 457 25>>*/  /*<<lib/gui.ml 457 25>>*/ var
                       _iW_=
                         /*<<lib/gui.ml 457 25>>*/ caml_string_notequal(name,_hd_);
                       /*<<lib/gui.ml 457 25>>*/ if(_iW_)
                       { /*<<lib/gui.ml 457 43>>*/  /*<<lib/gui.ml 457 43>>*/ var
                         _iX_=
                           /*<<lib/gui.ml 457 43>>*/ caml_string_notequal(name,_he_);
                         /*<<lib/gui.ml 457 43>>*/ if(_iX_)
                         {var _iY_=0 <= positions[1]?1:0;
                          if(_iY_)
                           {var _iZ_=positions[1] < state[7]?1:0;
                            if(_iZ_)
                             var
                              _i0_=0 <= positions[2]?1:0,
                              _i1_=_i0_?positions[2] < state[7]?1:0:_i0_;
                            else
                             var _i1_=_iZ_}
                          else
                           var _i1_=_iY_}
                        else
                         var _i1_=_iX_}
                      else
                       var _i1_=_iW_}
                    else
                     var _i1_=_iV_;
                     /*<<lib/gui.ml 462 7>>*/ if(_i1_)
                     { /*<<lib/gui.ml 462 7>>*/ var
                        /*<<lib/gui.ml 462 7>>*/ _i2_=positions[2],
                        /*<<lib/gui.ml 462 7>>*/ _i3_=positions[1],
                        /*<<lib/state.ml 602 2>>*/ _iM_=state[9],
                        /*<<lib/state.ml 603 4>>*/ building=
                         /*<<lib/state.ml 603 4>>*/ find
                         (function(building)
                           { /*<<lib/state.ml 603 31>>*/ return  /*<<lib/state.ml 603 31>>*/ caml_string_equal
                                    (building[1],name) /*<<lib/state.ml 603 51>>*/ },
                          _iM_),
                        /*<<lib/state.ml 603 4>>*/ _iN_=
                        function(_jg_){ /*<<?>>*/ return 1 - _jg_},
                        /*<<lib/state.ml 603 4>>*/ _iO_=1,
                        /*<<lib/state.ml 603 4>>*/ _iP_=
                        function(acc,resource)
                         { /*<<lib/state.ml 612 18>>*/ if
                           ( /*<<lib/state.ml 611 37>>*/ caml_string_equal
                             (resource[1],_gh_)
                            &&
                            building[2]
                            <=
                            resource[2])
                            /*<<lib/state.ml 614 18>>*/ return 0;
                          return acc /*<<lib/state.ml 614 29>>*/ },
                        /*<<lib/state.ml 608 9>>*/ _iQ_=
                        function(_jf_){ /*<<?>>*/ return fold_left(_iP_,_iO_,_jf_)},
                        /*<<lib/state.ml 607 6>>*/ is_sufficient=
                         /*<<lib/state.ml 607 6>>*/ symbol$0
                         ( /*<<lib/state.ml 607 6>>*/ symbol$0(state[24],_iQ_),_iN_);
                       /*<<lib/state.ml 607 6>>*/ if(is_sufficient)
                        /*<<lib/state.ml 621 8>>*/ var
                         /*<<lib/state.ml 621 8>>*/ _iR_=0,
                         /*<<lib/state.ml 621 8>>*/ _iS_=
                         function(acc,r)
                          { /*<<lib/state.ml 625 28>>*/ var
                             /*<<lib/state.ml 625 28>>*/ name=r[1],
                             /*<<lib/state.ml 626 30>>*/ amount=r[2];
                            /*<<lib/state.ml 627 20>>*/ return  /*<<lib/state.ml 627 20>>*/ caml_string_equal
                                    (name,_gi_)
                                   ?[0,[0,name,amount - building[2] | 0],acc]
                                   :[0,r,acc] /*<<lib/state.ml 629 30>>*/ },
                         /*<<lib/state.ml 623 13>>*/ _iT_=
                         function(_je_){ /*<<?>>*/ return fold_left(_iS_,_iR_,_je_)},
                        subtract_cost=
                         [0, /*<<lib/state.ml 622 10>>*/ symbol$0(state[24],_iT_)];
                      else
                       var subtract_cost=0;
                       /*<<lib/state.ml 632 2>>*/ if(subtract_cost)
                       { /*<<lib/state.ml 635 6>>*/  /*<<lib/state.ml 635 6>>*/ var
                         stockpile=
                          subtract_cost[1];
                        if(building[8] <= state[15])
                         { /*<<lib/state.ml 635 53>>*/ var
                            /*<<lib/state.ml 635 53>>*/ _iU_=state[9],
                            /*<<lib/state.ml 637 10>>*/ building$0=
                             /*<<lib/state.ml 637 10>>*/ find
                             (function(building)
                               { /*<<lib/state.ml 638 29>>*/ return  /*<<lib/state.ml 638 29>>*/ caml_string_equal
                                        (building[1],name) /*<<lib/state.ml 638 49>>*/ },
                              _iU_);
                           /*<<lib/state.ml 641 8>>*/  /*<<lib/state.ml 641 8>>*/ place_cell
                           (state,[0,building$0],_i3_,_i2_);
                           /*<<lib/state.ml 641 8>>*/ if(building$0[10])
                            /*<<lib/state.ml 643 10>>*/ state[22] = 1;
                           /*<<lib/state.ml 644 8>>*/ state[24] = stockpile;
                           /*<<lib/state.ml 644 8>>*/ state[15]
                          =
                          (state[15] - building$0[8] | 0)
                          +
                          building$0[9]
                          |
                          0;
                           /*<<lib/state.ml 644 8>>*/ state[14]
                          =
                          state[14]
                          +
                          building$0[9]
                          |
                          0}}}
                     /*<<lib/gui.ml 451 18>>*/  /*<<lib/gui.ml 464 4>>*/ var
                     _i4_=
                       /*<<lib/gui.ml 464 4>>*/ is_selected(state);
                     /*<<lib/gui.ml 464 4>>*/ if(_i4_)
                     { /*<<lib/gui.ml 464 25>>*/  /*<<lib/gui.ml 464 25>>*/ var
                       _i5_=
                         /*<<lib/gui.ml 464 25>>*/ caml_string_equal(name,_hf_);
                       /*<<lib/gui.ml 464 25>>*/ if(_i5_)
                       {var _i6_=0 <= positions[1]?1:0;
                        if(_i6_)
                         {var _i7_=positions[1] < state[7]?1:0;
                          if(_i7_)
                           var
                            _i8_=0 <= positions[2]?1:0,
                            _i9_=_i8_?positions[2] < state[7]?1:0:_i8_;
                          else
                           var _i9_=_i7_}
                        else
                         var _i9_=_i6_}
                      else
                       var _i9_=_i5_}
                    else
                     var _i9_=_i4_;
                     /*<<lib/gui.ml 470 4>>*/ if(_i9_)
                      /*<<lib/gui.ml 470 4>>*/  /*<<lib/gui.ml 470 4>>*/ place_cell
                      (state,
                       [1,[0,positions[1],positions[2]]],
                       positions[1],
                       positions[2]);
                     /*<<lib/gui.ml 451 18>>*/  /*<<lib/gui.ml 474 4>>*/ var
                     _i__=
                       /*<<lib/gui.ml 474 4>>*/ is_selected(state);
                     /*<<lib/gui.ml 474 4>>*/ if(_i__)
                     { /*<<lib/gui.ml 474 25>>*/  /*<<lib/gui.ml 474 25>>*/ var
                       _i$_=
                         /*<<lib/gui.ml 474 25>>*/ caml_string_equal(name,_hg_);
                       /*<<lib/gui.ml 474 25>>*/ if(_i$_)
                       {var _ja_=0 <= positions[1]?1:0;
                        if(_ja_)
                         {var _jb_=positions[1] < state[7]?1:0;
                          if(_jb_)
                           var
                            _jc_=0 <= positions[2]?1:0,
                            _jd_=_jc_?positions[2] < state[7]?1:0:_jc_;
                          else
                           var _jd_=_jb_}
                        else
                         var _jd_=_ja_}
                      else
                       var _jd_=_i$_}
                    else
                     var _jd_=_i__;
                     /*<<lib/gui.ml 479 7>>*/ if(_jd_)
                      /*<<lib/gui.ml 479 7>>*/  /*<<lib/gui.ml 479 7>>*/ place_cell
                      (state,0,positions[1],positions[2]);
                     /*<<lib/gui.ml 480 2>>*/  /*<<lib/gui.ml 480 2>>*/ draw_map
                     (state);
                     /*<<lib/gui.ml 480 2>>*/ return true$0}),
                false$0);
               /*<<lib/gui.ml 551 2>>*/  /*<<lib/gui.ml 551 2>>*/ mapi
               (function(i,param)
                 { /*<<lib/gui.ml 553 16>>*/  /*<<lib/gui.ml 553 16>>*/ var
                   img=
                     /*<<lib/gui.ml 553 16>>*/ getElementById
                     ( /*<<lib/gui.ml 553 36>>*/ caml_string_of_jsbytes("" + i));
                   /*<<lib/gui.ml 555 8>>*/ return  /*<<lib/gui.ml 555 8>>*/ addEventListener
                          (img,
                           click,
                            /*<<lib/gui.ml 555 8>>*/ handler
                            (function(event)
                              { /*<<lib/gui.ml 525 2>>*/ function _iK_(param)
                                { /*<<lib/gui.ml 526 40>>*/ throw Not_found /*<<lib/gui.ml 526 55>>*/ }
                                /*<<lib/gui.ml 526 4>>*/ var
                                 /*<<lib/gui.ml 526 4>>*/ event_target=
                                  /*<<lib/gui.ml 526 4>>*/ get(event.target,_iK_),
                                 /*<<lib/gui.ml 528 47>>*/ event_id=
                                  /*<<lib/gui.ml 528 47>>*/ caml_string_of_jsstring
                                  (event_target.id),
                                 /*<<lib/gui.ml 529 16>>*/ current=
                                  /*<<lib/gui.ml 529 16>>*/ getElementById(event_id),
                                 /*<<lib/gui.ml 531 28>>*/ id=
                                  /*<<lib/gui.ml 531 28>>*/ caml_string_of_jsbytes
                                  ("" + state[11]),
                                 /*<<lib/js_of_ocaml/dom_html.ml 2359 71>>*/ t19=
                                  /*<<lib/js_of_ocaml/dom_html.ml 2359 71>>*/ caml_jsstring_of_string
                                  (id),
                                previous=to_option(doc.getElementById(t19)),
                                _iL_=previous?1:0;
                                /*<<lib/gui.ml 534 4>>*/ if(_iL_)
                                { /*<<lib/gui.ml 537 6>>*/ if(previous)
                                   /*<<lib/gui.ml 536 22>>*/ var
                                    /*<<lib/gui.ml 536 22>>*/ element=previous[1],
                                   element$0=element;
                                 else
                                  var element$0= /*<<lib/gui.ml 535 14>>*/ failwith(_hk_);
                                 var t146=element$0.classList;
                                 t146.remove("selected")}
                                /*<<lib/gui.ml 526 4>>*/ var switch$0=0;
                                /*<<lib/gui.ml 540 7>>*/ if
                                ( /*<<lib/gui.ml 539 4>>*/ is_selected(state)
                                 &&
                                  /*<<lib/gui.ml 540 7>>*/ caml_string_equal
                                  (event_id,
                                    /*<<lib/gui.ml 540 18>>*/ caml_string_of_jsbytes
                                    ("" + state[11])))
                                { /*<<lib/gui.ml 541 7>>*/  /*<<lib/gui.ml 541 7>>*/ select_cell
                                  (state,-1);
                                 switch$0 = 1}
                                /*<<camlinternalFormatBasics.ml 528 8>>*/ if(! switch$0)
                                 /*<<lib/gui.ml 542 7>>*/  /*<<lib/gui.ml 542 7>>*/ select_cell
                                 (state,
                                   /*<<lib/gui.ml 542 25>>*/ caml_int_of_string(event_id));
                                /*<<lib/gui.ml 543 5>>*/ if
                                ( /*<<lib/gui.ml 543 5>>*/ is_selected(state))
                                {var t149=current.classList;t149.add("selected")}
                                /*<<lib/gui.ml 544 51>>*/ return true$0}),
                           false$0) /*<<lib/gui.ml 556 17>>*/ },
                textures);
               /*<<lib/gui.ml 600 2>>*/  /*<<lib/gui.ml 600 2>>*/ addEventListener
               (save_button,
                click,
                 /*<<lib/gui.ml 601 4>>*/ handler
                 (function(_iC_)
                   { /*<<lib/gui.ml 562 14>>*/ var
                      /*<<lib/gui.ml 562 14>>*/ modal=
                       /*<<lib/gui.ml 562 14>>*/ createDiv(doc),
                      /*<<lib/gui.ml 563 25>>*/ modal_background=
                       /*<<lib/gui.ml 563 25>>*/ createDiv(doc),
                      /*<<lib/gui.ml 564 22>>*/ modal_content=
                       /*<<lib/gui.ml 564 22>>*/ createDiv(doc),
                      /*<<lib/gui.ml 565 21>>*/ modal_button=
                       /*<<lib/gui.ml 565 21>>*/ createButton(0,0,doc),
                      /*<<lib/js_of_ocaml/dom_html.ml 2556 36>>*/ t168=
                       /*<<lib/js_of_ocaml/dom_html.ml 2556 36>>*/ unsafeCreateElement
                       (doc,_ep_);
                     /*<<lib/state.ml 480 2>>*/ function _ik_(eta)
                     { /*<<write.ml 440 16>>*/  /*<<write.ml 440 16>>*/ var
                       ob=
                         /*<<write.ml 440 16>>*/ create$3(0,0,256);
                       /*<<write.ml 434 4>>*/  /*<<write.ml 434 4>>*/ write_t
                       (ob,eta);
                       /*<<write.ml 440 16>>*/  /*<<write.ml 446 10>>*/ var
                       s=
                         /*<<write.ml 446 10>>*/ contents(ob);
                       /*<<write.ml 447 2>>*/  /*<<write.ml 447 2>>*/ clear$2(ob);
                       /*<<write.ml 447 2>>*/ return s}
                     /*<<lib/state.ml 480 2>>*/ var
                      /*<<lib/state.ml 480 2>>*/ _il_=0,
                      /*<<lib/state.ml 480 2>>*/ _im_=state[24],
                      /*<<lib/state.ml 480 2>>*/ lst=0,
                     _in_=
                      [0,
                       [0,
                        _fG_,
                        [0,
                         848054398,
                         fold_left
                          (function(acc,resource)
                            { /*<<?>>*/ return [0,
                                     [0,
                                      963043957,
                                      [0,
                                       [0,_fd_,[0,-976970511,resource[1]]],
                                       [0,[0,_fc_,[0,3654863,resource[2]]],0]]],
                                     acc] /*<<lib/state.ml 417 57>>*/ },
                           lst,
                           _im_)]],
                       _il_],
                     _ip_=state[10],
                     _io_=
                      [0,
                       [0,_fQ_,[0,3654863,state[13]]],
                       [0,
                        [0,_fP_,[0,3654863,state[14]]],
                        [0,
                         [0,_fO_,[0,3654863,state[15]]],
                         [0,
                          [0,_fN_,[0,3654863,state[16]]],
                          [0,
                           [0,_fM_,[0,3654863,state[17]]],
                           [0,
                            [0,_fL_,[0,3654863,state[18]]],
                            [0,
                             [0,_fK_,[0,737456202,state[19]]],
                             [0,
                              [0,_fJ_,[0,737456202,state[20]]],
                              [0,
                               [0,_fI_,[0,3654863,state[21]]],
                               [0,[0,_fH_,[0,737456202,state[22]]],_in_]]]]]]]]]];
                     /*<<lib/state.ml 423 2>>*/ function _ii_(i,row)
                     { /*<<lib/state.ml 438 9>>*/ return  /*<<lib/state.ml 438 9>>*/ mapi
                              (function(j,cell)
                                { /*<<lib/state.ml 429 4>>*/  /*<<lib/state.ml 429 4>>*/ var
                                  _iI_=
                                   0;
                                  /*<<lib/state.ml 423 20>>*/ if(typeof cell === "number")
                                  var _iJ_=_fe_;
                                 else
                                   /*<<lib/state.ml 423 20>>*/ if(0 === cell[0])
                                    /*<<lib/state.ml 425 27>>*/ var
                                     /*<<lib/state.ml 425 27>>*/ building=cell[1],
                                    _iJ_=building[1];
                                  else
                                   var _iJ_=_ff_;
                                 return [0,
                                         963043957,
                                         [0,
                                          [0,_fi_,[0,3654863,i]],
                                          [0,
                                           [0,_fh_,[0,3654863,j]],
                                           [0,[0,_fg_,[0,-976970511,_iJ_]],_iI_]]]] /*<<lib/state.ml 438 55>>*/ },
                               row) /*<<lib/state.ml 438 60>>*/ }
                     /*<<array.ml 168 2>>*/ var
                      /*<<array.ml 168 2>>*/ r=[0,0],
                      /*<<array.ml 168 2>>*/ _if_=_ip_.length - 1 - 1 | 0;
                     /*<<lib/state.ml 437 5>>*/ function _ij_(_iH_)
                     { /*<<?>>*/ return mapi(_ii_,_iH_)}
                     /*<<array.ml 168 2>>*/ if(! (_if_ < 0))
                     {var i$2=_if_;
                      a:
                       /*<<array.ml 170 4>>*/ for(;;)
                       { /*<<array.ml 170 11>>*/ var
                          /*<<array.ml 170 11>>*/ row=_ip_[1 + i$2],
                          /*<<array.ml 142 2>>*/ i$1=row.length - 1 - 1 | 0,
                         i=i$1,
                         res=0,
                          /*<<array.ml 170 4>>*/ _ig_=r[1];
                         /*<<array.ml 143 4>>*/ for(;;)
                         { /*<<array.ml 143 4>>*/ if(0 <= i)
                           { /*<<array.ml 143 43>>*/ var
                              /*<<array.ml 143 43>>*/ res$0=[0,row[1 + i],res],
                              /*<<array.ml 143 43>>*/ i$0=i - 1 | 0,
                             i=i$0,
                             res=res$0;
                            continue}
                          r[1] = [0,res,_ig_];
                          var _ih_=i$2 - 1 | 0;
                          if(0 !== i$2){var i$2=_ih_;continue a}
                          break}
                        break}}
                    var
                     _iq_=
                      [0,
                       [0,
                        _fR_,
                        [0,
                         848054398,
                          /*<<lib/state.ml 436 2>>*/ symbol$0
                          ( /*<<lib/state.ml 436 2>>*/ symbol$0(r[1],_ij_),flatten)]],
                       _io_],
                     _ir_=0;
                    function _is_(_iG_){ /*<<?>>*/ return _iG_[2]}
                     /*<<lib/state.ml 495 23>>*/  /*<<lib/state.ml 495 23>>*/ var
                     _it_=
                      [0,
                       [0,
                        _fS_,
                        [0,
                         3654863,
                          /*<<lib/state.ml 495 23>>*/ symbol$0(state[8],_is_)]],
                       _ir_];
                     /*<<lib/state.ml 495 23>>*/ function _iu_(_iF_)
                     { /*<<?>>*/ return _iF_[1]}
                     /*<<lib/state.ml 494 23>>*/ var
                      /*<<lib/state.ml 494 23>>*/ _iv_=
                      [0,
                       [0,
                        _fU_,
                        [0,
                         963043957,
                         [0,
                          [0,
                           _fT_,
                           [0,
                            3654863,
                             /*<<lib/state.ml 494 23>>*/ symbol$0(state[8],_iu_)]],
                          _it_]]],
                       _iq_],
                      /*<<lib/state.ml 494 23>>*/ _iw_=
                      [0,[0,_fV_,[0,3654863,state[7]]],_iv_],
                      /*<<lib/state.ml 494 23>>*/ _ix_=0;
                     /*<<lib/state.ml 494 23>>*/ function _iy_(_iE_)
                     { /*<<?>>*/ return _iE_[2]}
                     /*<<lib/state.ml 488 23>>*/  /*<<lib/state.ml 488 23>>*/ var
                     _iz_=
                      [0,
                       [0,
                        _fW_,
                        [0,
                         3654863,
                          /*<<lib/state.ml 488 23>>*/ symbol$0(state[6],_iy_)]],
                       _ix_];
                     /*<<lib/state.ml 488 23>>*/ function _iA_(_iD_)
                     { /*<<?>>*/ return _iD_[1]}
                     /*<<lib/state.ml 487 23>>*/ var
                      /*<<lib/state.ml 487 23>>*/ _iB_=
                      [0,
                       [0,
                        _fY_,
                        [0,
                         963043957,
                         [0,
                          [0,
                           _fX_,
                           [0,
                            3654863,
                             /*<<lib/state.ml 487 23>>*/ symbol$0(state[6],_iA_)]],
                          _iz_]]],
                       _iw_],
                      /*<<lib/gui.ml 568 27>>*/ s=
                       /*<<lib/gui.ml 568 27>>*/ caml_jsstring_of_string
                       ( /*<<lib/state.ml 487 23>>*/ symbol$0
                         ([0,
                           963043957,
                           [0,
                            [0,_f0_,[0,737456202,state[1]]],
                            [0,[0,_fZ_,[0,3654863,state[2]]],_iB_]]],
                          _ik_)),
                      /*<<lib/gui.ml 568 4>>*/ encode_url=
                       /*<<lib/gui.ml 568 4>>*/ symbol
                       (_hl_,
                         /*<<lib/gui.ml 569 7>>*/ caml_string_of_jsstring
                         ( /*<<lib/js_of_ocaml/js.ml 699 52>>*/ t196.encodeURIComponent
                           (s)));
                     /*<<lib/gui.ml 568 4>>*/ state[19] = 1;
                    modal.className = "modal is-active";
                    modal_background.className = "modal-background";
                    modal_content.className
                    =
                    "modal-content is-flex is-justify-content-center";
                    modal_button.className = "modal-close is-large";
                     /*<<lib/gui.ml 578 2>>*/  /*<<lib/gui.ml 578 2>>*/ addEventListener
                     (modal_button,
                      click,
                       /*<<lib/gui.ml 579 4>>*/ handler
                       (function(param)
                         { /*<<lib/gui.ml 580 9>>*/  /*<<lib/gui.ml 580 9>>*/ removeChild
                           (main_div,modal);
                           /*<<lib/gui.ml 580 9>>*/ return true$0 /*<<lib/gui.ml 581 17>>*/ }),
                      false$0);
                    t168.id = "download";
                    t168.href
                    =
                     /*<<lib/gui.ml 585 21>>*/ caml_jsstring_of_string
                     (encode_url);
                    t168.innerHTML = "Download";
                    t168.className = "button is-success";
                    t168.setAttribute("download","game_save.json");
                     /*<<lib/gui.ml 590 2>>*/  /*<<lib/gui.ml 590 2>>*/ appendChild
                     (modal,modal_background);
                     /*<<lib/gui.ml 591 2>>*/  /*<<lib/gui.ml 591 2>>*/ appendChild
                     (modal,modal_content);
                     /*<<lib/gui.ml 592 2>>*/  /*<<lib/gui.ml 592 2>>*/ appendChild
                     (modal,modal_button);
                     /*<<lib/gui.ml 593 2>>*/  /*<<lib/gui.ml 593 2>>*/ appendChild
                     (modal_content,t168);
                     /*<<lib/gui.ml 594 2>>*/  /*<<lib/gui.ml 594 2>>*/ appendChild
                     (main_div,modal);
                     /*<<lib/gui.ml 594 2>>*/ return true$0}),
                false$0);
               /*<<lib/gui.ml 608 2>>*/  /*<<lib/gui.ml 608 2>>*/ addEventListener
               (pause_button,
                click,
                 /*<<lib/gui.ml 609 4>>*/ handler
                 (function(param)
                   { /*<<lib/gui.ml 610 9>>*/ state[19] = 1 - state[19];
                     /*<<lib/gui.ml 610 9>>*/ return true$0 /*<<lib/gui.ml 611 17>>*/ }),
                false$0);
              draw_map(state);
              return game_loop(state) /*<<lib/gui.ml 784 17>>*/ },
            /*<<lib/gui.ml 705 2>>*/ handle_start_from_file=
            function(param)
             { /*<<lib/gui.ml 789 2>>*/ function opt_get(opt_value)
               { /*<<lib/gui.ml 790 4>>*/ return  /*<<lib/gui.ml 790 4>>*/ get
                        (opt_value,
                         function(param)
                          { /*<<lib/gui.ml 790 35>>*/ throw Not_found /*<<lib/gui.ml 790 50>>*/ }) /*<<lib/gui.ml 790 51>>*/ }
               /*<<lib/gui.ml 789 2>>*/ function _hD_(param)
               { /*<<lib/gui.ml 793 46>>*/ throw Not_found /*<<lib/gui.ml 793 61>>*/ }
               /*<<lib/gui.ml 793 4>>*/  /*<<lib/gui.ml 793 4>>*/ var
               t200=
                 /*<<lib/gui.ml 793 4>>*/ get$0(game_save.files,_hD_);
              if(0 < t200.length)
               { /*<<lib/gui.ml 796 15>>*/ var
                  /*<<lib/gui.ml 796 15>>*/ t206=
                   /*<<lib/gui.ml 796 15>>*/ opt_get(t200.item(0)),
                 t207=new t201(),
                 file_load_handler=
                  function(event)
                   { /*<<lib/gui.ml 799 25>>*/ var
                      /*<<lib/gui.ml 799 25>>*/ event_target=
                       /*<<lib/gui.ml 799 25>>*/ opt_get(event.target),
                     e=event_target.result,
                      /*<<lib/js_of_ocaml/file.ml 129 7>>*/ _hV_=
                      typeof e === "string"?e:no_handler,
                      /*<<lib/gui.ml 801 9>>*/ file_string=
                       /*<<lib/gui.ml 801 9>>*/ caml_string_of_jsstring
                       ( /*<<lib/gui.ml 800 6>>*/ opt_get(_hV_)),
                      /*<<lib/state.ml 442 13>>*/ json=
                       /*<<lib/state.ml 442 13>>*/ from_string$0
                       (0,0,0,file_string);
                     /*<<lib/state.ml 442 13>>*/ function get_field
                     (name,coordinate)
                     { /*<<lib/state.ml 444 27>>*/ function _ib_(_id_)
                       { /*<<?>>*/ return member(coordinate,_id_)}
                       /*<<lib/state.ml 444 4>>*/ return  /*<<lib/state.ml 444 4>>*/ symbol$0
                              ( /*<<lib/state.ml 444 4>>*/ symbol$0
                                ( /*<<lib/state.ml 444 4>>*/ symbol$0
                                  (json,function(_ic_){ /*<<?>>*/ return member(name,_ic_)}),
                                 _ib_),
                               to_int) /*<<lib/state.ml 444 54>>*/ }
                     /*<<lib/state.ml 442 13>>*/ function int_of_member(name)
                     { /*<<lib/state.ml 446 27>>*/ return  /*<<lib/state.ml 446 27>>*/ symbol$0
                              ( /*<<lib/state.ml 446 27>>*/ symbol$0
                                (json,function(_ia_){ /*<<?>>*/ return member(name,_ia_)}),
                               to_int) /*<<lib/state.ml 446 56>>*/ }
                     /*<<lib/state.ml 442 13>>*/ function bool_of_member(name)
                     { /*<<lib/state.ml 448 28>>*/ return  /*<<lib/state.ml 448 28>>*/ symbol$0
                              ( /*<<lib/state.ml 448 28>>*/ symbol$0
                                (json,function(_h$_){ /*<<?>>*/ return member(name,_h$_)}),
                               to_bool) /*<<lib/state.ml 448 58>>*/ }
                     /*<<lib/state.ml 468 6>>*/ var
                      /*<<lib/state.ml 468 6>>*/ _hE_=
                       /*<<lib/state.ml 468 6>>*/ get_field(_fk_,_fj_),
                      /*<<lib/state.ml 467 6>>*/ _hF_=
                       /*<<lib/state.ml 467 6>>*/ get_field(_fm_,_fl_),
                      /*<<lib/state.ml 466 6>>*/ _hG_=
                       /*<<lib/state.ml 466 6>>*/ int_of_member(_fn_),
                      /*<<lib/state.ml 465 6>>*/ _hH_=
                       /*<<lib/state.ml 465 6>>*/ get_field(_fp_,_fo_),
                      /*<<lib/state.ml 464 6>>*/ _hI_=
                       /*<<lib/state.ml 464 6>>*/ get_field(_fr_,_fq_),
                      /*<<lib/state.ml 463 8>>*/ _hJ_=
                      [0, /*<<lib/state.ml 463 8>>*/ bool_of_member(_fs_)],
                      /*<<lib/state.ml 461 17>>*/ _hK_=
                      [0, /*<<lib/state.ml 461 17>>*/ int_of_member(_ft_)],
                      /*<<lib/state.ml 460 20>>*/ _hL_=
                      [0, /*<<lib/state.ml 460 20>>*/ bool_of_member(_fu_)],
                      /*<<lib/state.ml 458 26>>*/ _hM_=
                      [0, /*<<lib/state.ml 458 26>>*/ int_of_member(_fw_)],
                      /*<<lib/state.ml 457 23>>*/ _hN_=
                      [0, /*<<lib/state.ml 457 23>>*/ int_of_member(_fx_)],
                      /*<<lib/state.ml 456 12>>*/ _hO_=
                      [0, /*<<lib/state.ml 456 12>>*/ int_of_member(_fy_)],
                      /*<<lib/state.ml 455 18>>*/ _hP_=
                      [0, /*<<lib/state.ml 455 18>>*/ int_of_member(_fz_)],
                      /*<<lib/state.ml 454 18>>*/ _hQ_=
                      [0, /*<<lib/state.ml 454 18>>*/ int_of_member(_fA_)],
                      /*<<lib/state.ml 453 24>>*/ _hR_=
                      [0, /*<<lib/state.ml 453 24>>*/ int_of_member(_fB_)],
                      /*<<lib/state.ml 452 12>>*/ _hS_=
                      [0, /*<<lib/state.ml 452 12>>*/ int_of_member(_fC_)],
                      /*<<lib/state.ml 450 4>>*/ state=
                       /*<<lib/state.ml 450 4>>*/ new_state
                       ([0, /*<<lib/state.ml 451 18>>*/ bool_of_member(_fD_)],
                        _hS_,
                        _hR_,
                        _hQ_,
                        _hP_,
                        _hO_,
                        _hN_,
                        _hM_,
                        _fv_,
                        _hL_,
                        _hK_,
                        _hJ_,
                        _hI_,
                        _hH_,
                        _hG_,
                        _hF_,
                        _hE_),
                      /*<<lib/state.ml 450 4>>*/ _hT_=state[10];
                     /*<<lib/state.ml 472 7>>*/ function _hU_(json)
                     { /*<<lib/state.ml 392 2>>*/ function x(cell)
                       { /*<<lib/state.ml 392 15>>*/ return  /*<<lib/state.ml 392 15>>*/ symbol$0
                                ( /*<<lib/state.ml 392 15>>*/ symbol$0
                                  (cell,function(_h__){ /*<<?>>*/ return member(_e9_,_h__)}),
                                 to_int) /*<<lib/state.ml 392 43>>*/ }
                       /*<<lib/state.ml 392 2>>*/ function y(cell)
                       { /*<<lib/state.ml 393 15>>*/ return  /*<<lib/state.ml 393 15>>*/ symbol$0
                                ( /*<<lib/state.ml 393 15>>*/ symbol$0
                                  (cell,function(_h9_){ /*<<?>>*/ return member(_e__,_h9_)}),
                                 to_int) /*<<lib/state.ml 393 43>>*/ }
                       /*<<lib/state.ml 392 2>>*/ function obj(cell)
                       { /*<<lib/state.ml 394 17>>*/ return  /*<<lib/state.ml 394 17>>*/ symbol$0
                                ( /*<<lib/state.ml 394 17>>*/ symbol$0
                                  (cell,function(_h8_){ /*<<?>>*/ return member(_e$_,_h8_)}),
                                 to_string) /*<<lib/state.ml 394 53>>*/ }
                       /*<<lib/state.ml 395 2>>*/  /*<<lib/state.ml 395 2>>*/ iter$0
                       (function(cell)
                         { /*<<lib/state.ml 397 17>>*/  /*<<lib/state.ml 397 17>>*/ var
                           _hY_=
                             /*<<lib/state.ml 397 17>>*/ caml_string_notequal
                             ( /*<<lib/state.ml 397 9>>*/ obj(cell),_fa_);
                           /*<<lib/state.ml 397 17>>*/ if(_hY_)
                           { /*<<lib/state.ml 398 19>>*/ if
                             ( /*<<lib/state.ml 398 19>>*/ caml_string_equal
                               ( /*<<lib/state.ml 398 11>>*/ obj(cell),_fb_))
                             { /*<<lib/state.ml 399 61>>*/ var
                                /*<<lib/state.ml 399 61>>*/ _hZ_=
                                 /*<<lib/state.ml 399 61>>*/ y(cell),
                                /*<<lib/state.ml 399 42>>*/ _h0_=
                                [1,[0, /*<<lib/state.ml 399 52>>*/ x(cell),_hZ_]],
                                /*<<lib/state.ml 399 26>>*/ _h1_=
                                 /*<<lib/state.ml 399 26>>*/ y(cell),
                                /*<<lib/state.ml 399 17>>*/ _h2_=
                                 /*<<lib/state.ml 399 17>>*/ x(cell);
                               /*<<lib/state.ml 399 24>>*/  /*<<lib/state.ml 399 24>>*/ caml_check_bound
                                ( /*<<lib/state.ml 399 10>>*/ caml_check_bound(_hT_,_h2_)
                                  [1 + _h2_],
                                 _h1_)
                               [1 + _h1_]
                              =
                              _h0_;
                               /*<<lib/state.ml 399 24>>*/ return 0}
                             /*<<lib/state.ml 401 10>>*/ var
                              /*<<lib/state.ml 401 10>>*/ _h3_=state[9],
                              /*<<lib/state.ml 402 40>>*/ name=
                               /*<<lib/state.ml 402 40>>*/ obj(cell),
                             _h4_=
                              [0,
                                /*<<lib/state.ml 387 2>>*/ find
                                (function(building)
                                  { /*<<lib/state.ml 387 29>>*/ return  /*<<lib/state.ml 387 29>>*/ caml_string_equal
                                           (building[1],name) /*<<lib/state.ml 387 49>>*/ },
                                 _h3_)],
                              /*<<lib/state.ml 401 26>>*/ _h5_=
                               /*<<lib/state.ml 401 26>>*/ y(cell),
                              /*<<lib/state.ml 401 17>>*/ _h6_=
                               /*<<lib/state.ml 401 17>>*/ x(cell);
                             /*<<lib/state.ml 401 24>>*/  /*<<lib/state.ml 401 24>>*/ caml_check_bound
                              ( /*<<lib/state.ml 401 10>>*/ caml_check_bound(_hT_,_h6_)
                                [1 + _h6_],
                               _h5_)
                             [1 + _h5_]
                            =
                            _h4_;
                             /*<<lib/state.ml 401 10>>*/ var _h7_=0}
                          else
                           var _h7_=_hY_;
                           /*<<lib/state.ml 402 67>>*/ return _h7_ /*<<lib/state.ml 402 67>>*/ },
                        json);
                       /*<<lib/state.ml 395 2>>*/ return _hT_}
                     /*<<lib/state.ml 471 4>>*/ var
                      /*<<lib/state.ml 471 4>>*/ cells=
                       /*<<lib/state.ml 471 4>>*/ symbol$0
                       ( /*<<lib/state.ml 471 4>>*/ symbol$0
                         ( /*<<lib/state.ml 471 4>>*/ symbol$0
                           (json,function(_hX_){ /*<<?>>*/ return member(_fE_,_hX_)}),
                          to_list),
                        _hU_),
                      /*<<lib/state.ml 475 4>>*/ stockpile=
                       /*<<lib/state.ml 475 4>>*/ symbol$0
                       ( /*<<lib/state.ml 475 4>>*/ symbol$0
                         ( /*<<lib/state.ml 475 4>>*/ symbol$0
                           ( /*<<lib/state.ml 475 4>>*/ symbol$0
                             (json,function(_hW_){ /*<<?>>*/ return member(_fF_,_hW_)}),
                            to_list),
                          init_stockpile),
                        rev);
                     /*<<lib/gui.ml 800 6>>*/  /*<<lib/gui.ml 800 6>>*/ trigger_game_loop
                     ([0,
                       state[1],
                       state[2],
                       state[3],
                       state[4],
                       state[5],
                       state[6],
                       state[7],
                       state[8],
                       state[9],
                       cells,
                       state[11],
                       state[12],
                       state[13],
                       state[14],
                       state[15],
                       state[16],
                       state[17],
                       state[18],
                       state[19],
                       state[20],
                       state[21],
                       state[22],
                       state[23],
                       stockpile]);
                     /*<<lib/gui.ml 800 6>>*/ return true$0 /*<<lib/gui.ml 802 14>>*/ };
                t207.onload
                =
                 /*<<lib/gui.ml 804 28>>*/ handler(file_load_handler);
                t207.readAsText(t206)}
               /*<<lib/gui.ml 807 2>>*/ return true$0 /*<<lib/gui.ml 807 10>>*/ },
            /*<<lib/gui.ml 705 2>>*/ handle_start_from_setup=
            function(param)
             { /*<<lib/gui.ml 812 2>>*/  /*<<lib/gui.ml 812 2>>*/ trigger_game_loop
               ( /*<<lib/gui.ml 812 2>>*/ new_state
                 (0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1200,
                  750,
                   /*<<lib/gui.ml 813 39>>*/ caml_int_of_string
                   ( /*<<lib/gui.ml 813 23>>*/ caml_string_of_jsstring
                     (slider.value)),
                  128,
                  64));
               /*<<lib/gui.ml 812 2>>*/ return true$0 /*<<lib/gui.ml 816 10>>*/ },
            /*<<lib/gui.ml 705 2>>*/ handle_start_from_setup_sandbo=
            function(param)
             { /*<<lib/gui.ml 822 4>>*/ var
                /*<<lib/gui.ml 822 4>>*/ state=
                 /*<<lib/gui.ml 822 4>>*/ new_state
                 (_hr_,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1200,
                  750,
                   /*<<lib/gui.ml 823 41>>*/ caml_int_of_string
                   ( /*<<lib/gui.ml 823 25>>*/ caml_string_of_jsstring
                     (slider.value)),
                  128,
                  64),
                /*<<lib/gui.ml 822 4>>*/ _hC_=state[24];
               /*<<lib/gui.ml 828 7>>*/ state[24]
              =
              [0,
               _ht_,
                /*<<lib/gui.ml 828 7>>*/ caml_call1
                ( /*<<lib/gui.ml 828 7>>*/ find_all
                  (function(param)
                    { /*<<lib/gui.ml 828 19>>*/  /*<<lib/gui.ml 828 19>>*/ var
                      k=
                       param[1];
                      /*<<lib/gui.ml 828 34>>*/ return  /*<<lib/gui.ml 828 34>>*/ caml_string_notequal
                             (k,_hs_) /*<<lib/gui.ml 828 47>>*/ }),
                 _hC_)];
               /*<<lib/gui.ml 829 2>>*/  /*<<lib/gui.ml 829 2>>*/ trigger_game_loop
               (state);
               /*<<lib/gui.ml 829 2>>*/ return true$0 /*<<lib/gui.ml 830 10>>*/ };
          start_save.onclick
          =
           /*<<lib/gui.ml 835 26>>*/ handler(handle_start_from_file);
          submit.onclick
          =
           /*<<lib/gui.ml 836 22>>*/ handler(handle_start_from_setup);
          sandbox.onclick
          =
           /*<<lib/gui.ml 837 23>>*/ handler(handle_start_from_setup_sandbo);
           /*<<std_exit.ml 18 8>>*/  /*<<std_exit.ml 18 8>>*/ do_at_exit(0);
           /*<<std_exit.ml 18 8>>*/ return}}
       /*<<src/bi_util.ml 52 4>>*/ r[1] = r[1] >>> 1 | 0;
       /*<<src/bi_util.ml 52 4>>*/ c[1]++;
      continue} /*<<?>>*/ }
  (function(){return this}()));

//# sourceMappingURL=main.map
